// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdpb.proto

#ifndef PROTOBUF_pdpb_2eproto__INCLUDED
#define PROTOBUF_pdpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "eraftpb.pb.h"
// @@protoc_insertion_point(includes)

namespace pdpb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pdpb_2eproto();
void protobuf_AssignDesc_pdpb_2eproto();
void protobuf_ShutdownFile_pdpb_2eproto();

class Leader;
class TsoRequest;
class Timestamp;
class TsoResponse;
class BootstrapRequest;
class BootstrapResponse;
class IsBootstrappedRequest;
class IsBootstrappedResponse;
class AllocIdRequest;
class AllocIdResponse;
class AllocVolumeIdRequest;
class AllocVolumeIdResponse;
class GetStoreRequest;
class GetStoreResponse;
class GetRegionRequest;
class GetRegionResponse;
class GetRegionByIDRequest;
class GetClusterConfigRequest;
class GetClusterConfigResponse;
class PutStoreRequest;
class PutStoreResponse;
class PDMember;
class GetPDMembersRequest;
class GetPDMembersResponse;
class PeerStats;
class RegionHeartbeatRequest;
class ChangePeer;
class TransferLeader;
class RegionHeartbeatResponse;
class PutClusterConfigRequest;
class PutClusterConfigResponse;
class AskSplitRequest;
class AskSplitResponse;
class StoreStats;
class StoreHeartbeatRequest;
class StoreHeartbeatResponse;
class ReportSplitRequest;
class ReportSplitResponse;
class RequestHeader;
class ResponseHeader;
class Request;
class Response;
class BootstrappedError;
class StoreIsTombstoneError;
class Error;

enum CommandType {
  Invalid = 0,
  Tso = 1,
  Bootstrap = 2,
  IsBootstrapped = 3,
  AllocId = 4,
  GetStore = 5,
  PutStore = 6,
  AskSplit = 7,
  GetRegion = 8,
  RegionHeartbeat = 9,
  GetClusterConfig = 10,
  PutClusterConfig = 11,
  StoreHeartbeat = 12,
  ReportSplit = 13,
  GetRegionByID = 14,
  GetPDMembers = 15,
  AllocVolumeId = 16
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = Invalid;
const CommandType CommandType_MAX = AllocVolumeId;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class Leader : public ::google::protobuf::Message {
 public:
  Leader();
  virtual ~Leader();

  Leader(const Leader& from);

  inline Leader& operator=(const Leader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Leader& default_instance();

  void Swap(Leader* other);

  // implements Message ----------------------------------------------

  Leader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Leader& from);
  void MergeFrom(const Leader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.Leader)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* addr_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static Leader* default_instance_;
};
// -------------------------------------------------------------------

class TsoRequest : public ::google::protobuf::Message {
 public:
  TsoRequest();
  virtual ~TsoRequest();

  TsoRequest(const TsoRequest& from);

  inline TsoRequest& operator=(const TsoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TsoRequest& default_instance();

  void Swap(TsoRequest* other);

  // implements Message ----------------------------------------------

  TsoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TsoRequest& from);
  void MergeFrom(const TsoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pdpb.TsoRequest)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static TsoRequest* default_instance_;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  void Swap(Timestamp* other);

  // implements Message ----------------------------------------------

  Timestamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 physical = 1;
  inline bool has_physical() const;
  inline void clear_physical();
  static const int kPhysicalFieldNumber = 1;
  inline ::google::protobuf::int64 physical() const;
  inline void set_physical(::google::protobuf::int64 value);

  // optional int64 logical = 2;
  inline bool has_logical() const;
  inline void clear_logical();
  static const int kLogicalFieldNumber = 2;
  inline ::google::protobuf::int64 logical() const;
  inline void set_logical(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pdpb.Timestamp)
 private:
  inline void set_has_physical();
  inline void clear_has_physical();
  inline void set_has_logical();
  inline void clear_has_logical();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 physical_;
  ::google::protobuf::int64 logical_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class TsoResponse : public ::google::protobuf::Message {
 public:
  TsoResponse();
  virtual ~TsoResponse();

  TsoResponse(const TsoResponse& from);

  inline TsoResponse& operator=(const TsoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TsoResponse& default_instance();

  void Swap(TsoResponse* other);

  // implements Message ----------------------------------------------

  TsoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TsoResponse& from);
  void MergeFrom(const TsoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .pdpb.Timestamp timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::pdpb::Timestamp& timestamp() const;
  inline ::pdpb::Timestamp* mutable_timestamp();
  inline ::pdpb::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::pdpb::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:pdpb.TsoResponse)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pdpb::Timestamp* timestamp_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static TsoResponse* default_instance_;
};
// -------------------------------------------------------------------

class BootstrapRequest : public ::google::protobuf::Message {
 public:
  BootstrapRequest();
  virtual ~BootstrapRequest();

  BootstrapRequest(const BootstrapRequest& from);

  inline BootstrapRequest& operator=(const BootstrapRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapRequest& default_instance();

  void Swap(BootstrapRequest* other);

  // implements Message ----------------------------------------------

  BootstrapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BootstrapRequest& from);
  void MergeFrom(const BootstrapRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Store store = 1;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 1;
  inline const ::metapb::Store& store() const;
  inline ::metapb::Store* mutable_store();
  inline ::metapb::Store* release_store();
  inline void set_allocated_store(::metapb::Store* store);

  // optional .metapb.Region region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:pdpb.BootstrapRequest)
 private:
  inline void set_has_store();
  inline void clear_has_store();
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Store* store_;
  ::metapb::Region* region_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static BootstrapRequest* default_instance_;
};
// -------------------------------------------------------------------

class BootstrapResponse : public ::google::protobuf::Message {
 public:
  BootstrapResponse();
  virtual ~BootstrapResponse();

  BootstrapResponse(const BootstrapResponse& from);

  inline BootstrapResponse& operator=(const BootstrapResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapResponse& default_instance();

  void Swap(BootstrapResponse* other);

  // implements Message ----------------------------------------------

  BootstrapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BootstrapResponse& from);
  void MergeFrom(const BootstrapResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.BootstrapResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static BootstrapResponse* default_instance_;
};
// -------------------------------------------------------------------

class IsBootstrappedRequest : public ::google::protobuf::Message {
 public:
  IsBootstrappedRequest();
  virtual ~IsBootstrappedRequest();

  IsBootstrappedRequest(const IsBootstrappedRequest& from);

  inline IsBootstrappedRequest& operator=(const IsBootstrappedRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsBootstrappedRequest& default_instance();

  void Swap(IsBootstrappedRequest* other);

  // implements Message ----------------------------------------------

  IsBootstrappedRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsBootstrappedRequest& from);
  void MergeFrom(const IsBootstrappedRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.IsBootstrappedRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static IsBootstrappedRequest* default_instance_;
};
// -------------------------------------------------------------------

class IsBootstrappedResponse : public ::google::protobuf::Message {
 public:
  IsBootstrappedResponse();
  virtual ~IsBootstrappedResponse();

  IsBootstrappedResponse(const IsBootstrappedResponse& from);

  inline IsBootstrappedResponse& operator=(const IsBootstrappedResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsBootstrappedResponse& default_instance();

  void Swap(IsBootstrappedResponse* other);

  // implements Message ----------------------------------------------

  IsBootstrappedResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsBootstrappedResponse& from);
  void MergeFrom(const IsBootstrappedResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bootstrapped = 1;
  inline bool has_bootstrapped() const;
  inline void clear_bootstrapped();
  static const int kBootstrappedFieldNumber = 1;
  inline bool bootstrapped() const;
  inline void set_bootstrapped(bool value);

  // @@protoc_insertion_point(class_scope:pdpb.IsBootstrappedResponse)
 private:
  inline void set_has_bootstrapped();
  inline void clear_has_bootstrapped();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool bootstrapped_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static IsBootstrappedResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllocIdRequest : public ::google::protobuf::Message {
 public:
  AllocIdRequest();
  virtual ~AllocIdRequest();

  AllocIdRequest(const AllocIdRequest& from);

  inline AllocIdRequest& operator=(const AllocIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocIdRequest& default_instance();

  void Swap(AllocIdRequest* other);

  // implements Message ----------------------------------------------

  AllocIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocIdRequest& from);
  void MergeFrom(const AllocIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.AllocIdRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static AllocIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllocIdResponse : public ::google::protobuf::Message {
 public:
  AllocIdResponse();
  virtual ~AllocIdResponse();

  AllocIdResponse(const AllocIdResponse& from);

  inline AllocIdResponse& operator=(const AllocIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocIdResponse& default_instance();

  void Swap(AllocIdResponse* other);

  // implements Message ----------------------------------------------

  AllocIdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocIdResponse& from);
  void MergeFrom(const AllocIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.AllocIdResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static AllocIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllocVolumeIdRequest : public ::google::protobuf::Message {
 public:
  AllocVolumeIdRequest();
  virtual ~AllocVolumeIdRequest();

  AllocVolumeIdRequest(const AllocVolumeIdRequest& from);

  inline AllocVolumeIdRequest& operator=(const AllocVolumeIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocVolumeIdRequest& default_instance();

  void Swap(AllocVolumeIdRequest* other);

  // implements Message ----------------------------------------------

  AllocVolumeIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocVolumeIdRequest& from);
  void MergeFrom(const AllocVolumeIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.AllocVolumeIdRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static AllocVolumeIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllocVolumeIdResponse : public ::google::protobuf::Message {
 public:
  AllocVolumeIdResponse();
  virtual ~AllocVolumeIdResponse();

  AllocVolumeIdResponse(const AllocVolumeIdResponse& from);

  inline AllocVolumeIdResponse& operator=(const AllocVolumeIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocVolumeIdResponse& default_instance();

  void Swap(AllocVolumeIdResponse* other);

  // implements Message ----------------------------------------------

  AllocVolumeIdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocVolumeIdResponse& from);
  void MergeFrom(const AllocVolumeIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.AllocVolumeIdResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static AllocVolumeIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreRequest : public ::google::protobuf::Message {
 public:
  GetStoreRequest();
  virtual ~GetStoreRequest();

  GetStoreRequest(const GetStoreRequest& from);

  inline GetStoreRequest& operator=(const GetStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreRequest& default_instance();

  void Swap(GetStoreRequest* other);

  // implements Message ----------------------------------------------

  GetStoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreRequest& from);
  void MergeFrom(const GetStoreRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::uint64 store_id() const;
  inline void set_store_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.GetStoreRequest)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 store_id_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetStoreRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreResponse : public ::google::protobuf::Message {
 public:
  GetStoreResponse();
  virtual ~GetStoreResponse();

  GetStoreResponse(const GetStoreResponse& from);

  inline GetStoreResponse& operator=(const GetStoreResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreResponse& default_instance();

  void Swap(GetStoreResponse* other);

  // implements Message ----------------------------------------------

  GetStoreResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreResponse& from);
  void MergeFrom(const GetStoreResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Store store = 1;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 1;
  inline const ::metapb::Store& store() const;
  inline ::metapb::Store* mutable_store();
  inline ::metapb::Store* release_store();
  inline void set_allocated_store(::metapb::Store* store);

  // @@protoc_insertion_point(class_scope:pdpb.GetStoreResponse)
 private:
  inline void set_has_store();
  inline void clear_has_store();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Store* store_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetStoreResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRegionRequest : public ::google::protobuf::Message {
 public:
  GetRegionRequest();
  virtual ~GetRegionRequest();

  GetRegionRequest(const GetRegionRequest& from);

  inline GetRegionRequest& operator=(const GetRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegionRequest& default_instance();

  void Swap(GetRegionRequest* other);

  // implements Message ----------------------------------------------

  GetRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegionRequest& from);
  void MergeFrom(const GetRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes region_key = 1;
  inline bool has_region_key() const;
  inline void clear_region_key();
  static const int kRegionKeyFieldNumber = 1;
  inline const ::std::string& region_key() const;
  inline void set_region_key(const ::std::string& value);
  inline void set_region_key(const char* value);
  inline void set_region_key(const void* value, size_t size);
  inline ::std::string* mutable_region_key();
  inline ::std::string* release_region_key();
  inline void set_allocated_region_key(::std::string* region_key);

  // @@protoc_insertion_point(class_scope:pdpb.GetRegionRequest)
 private:
  inline void set_has_region_key();
  inline void clear_has_region_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* region_key_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRegionResponse : public ::google::protobuf::Message {
 public:
  GetRegionResponse();
  virtual ~GetRegionResponse();

  GetRegionResponse(const GetRegionResponse& from);

  inline GetRegionResponse& operator=(const GetRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegionResponse& default_instance();

  void Swap(GetRegionResponse* other);

  // implements Message ----------------------------------------------

  GetRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegionResponse& from);
  void MergeFrom(const GetRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // optional .metapb.Peer leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline const ::metapb::Peer& leader() const;
  inline ::metapb::Peer* mutable_leader();
  inline ::metapb::Peer* release_leader();
  inline void set_allocated_leader(::metapb::Peer* leader);

  // @@protoc_insertion_point(class_scope:pdpb.GetRegionResponse)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* region_;
  ::metapb::Peer* leader_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRegionByIDRequest : public ::google::protobuf::Message {
 public:
  GetRegionByIDRequest();
  virtual ~GetRegionByIDRequest();

  GetRegionByIDRequest(const GetRegionByIDRequest& from);

  inline GetRegionByIDRequest& operator=(const GetRegionByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegionByIDRequest& default_instance();

  void Swap(GetRegionByIDRequest* other);

  // implements Message ----------------------------------------------

  GetRegionByIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegionByIDRequest& from);
  void MergeFrom(const GetRegionByIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 region_id() const;
  inline void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.GetRegionByIDRequest)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 region_id_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetRegionByIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetClusterConfigRequest : public ::google::protobuf::Message {
 public:
  GetClusterConfigRequest();
  virtual ~GetClusterConfigRequest();

  GetClusterConfigRequest(const GetClusterConfigRequest& from);

  inline GetClusterConfigRequest& operator=(const GetClusterConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterConfigRequest& default_instance();

  void Swap(GetClusterConfigRequest* other);

  // implements Message ----------------------------------------------

  GetClusterConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetClusterConfigRequest& from);
  void MergeFrom(const GetClusterConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.GetClusterConfigRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetClusterConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetClusterConfigResponse : public ::google::protobuf::Message {
 public:
  GetClusterConfigResponse();
  virtual ~GetClusterConfigResponse();

  GetClusterConfigResponse(const GetClusterConfigResponse& from);

  inline GetClusterConfigResponse& operator=(const GetClusterConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterConfigResponse& default_instance();

  void Swap(GetClusterConfigResponse* other);

  // implements Message ----------------------------------------------

  GetClusterConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetClusterConfigResponse& from);
  void MergeFrom(const GetClusterConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Cluster cluster = 1;
  inline bool has_cluster() const;
  inline void clear_cluster();
  static const int kClusterFieldNumber = 1;
  inline const ::metapb::Cluster& cluster() const;
  inline ::metapb::Cluster* mutable_cluster();
  inline ::metapb::Cluster* release_cluster();
  inline void set_allocated_cluster(::metapb::Cluster* cluster);

  // @@protoc_insertion_point(class_scope:pdpb.GetClusterConfigResponse)
 private:
  inline void set_has_cluster();
  inline void clear_has_cluster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Cluster* cluster_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetClusterConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutStoreRequest : public ::google::protobuf::Message {
 public:
  PutStoreRequest();
  virtual ~PutStoreRequest();

  PutStoreRequest(const PutStoreRequest& from);

  inline PutStoreRequest& operator=(const PutStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutStoreRequest& default_instance();

  void Swap(PutStoreRequest* other);

  // implements Message ----------------------------------------------

  PutStoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutStoreRequest& from);
  void MergeFrom(const PutStoreRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Store store = 1;
  inline bool has_store() const;
  inline void clear_store();
  static const int kStoreFieldNumber = 1;
  inline const ::metapb::Store& store() const;
  inline ::metapb::Store* mutable_store();
  inline ::metapb::Store* release_store();
  inline void set_allocated_store(::metapb::Store* store);

  // @@protoc_insertion_point(class_scope:pdpb.PutStoreRequest)
 private:
  inline void set_has_store();
  inline void clear_has_store();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Store* store_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static PutStoreRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutStoreResponse : public ::google::protobuf::Message {
 public:
  PutStoreResponse();
  virtual ~PutStoreResponse();

  PutStoreResponse(const PutStoreResponse& from);

  inline PutStoreResponse& operator=(const PutStoreResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutStoreResponse& default_instance();

  void Swap(PutStoreResponse* other);

  // implements Message ----------------------------------------------

  PutStoreResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutStoreResponse& from);
  void MergeFrom(const PutStoreResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.PutStoreResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static PutStoreResponse* default_instance_;
};
// -------------------------------------------------------------------

class PDMember : public ::google::protobuf::Message {
 public:
  PDMember();
  virtual ~PDMember();

  PDMember(const PDMember& from);

  inline PDMember& operator=(const PDMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PDMember& default_instance();

  void Swap(PDMember* other);

  // implements Message ----------------------------------------------

  PDMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PDMember& from);
  void MergeFrom(const PDMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string client_urls = 2;
  inline int client_urls_size() const;
  inline void clear_client_urls();
  static const int kClientUrlsFieldNumber = 2;
  inline const ::std::string& client_urls(int index) const;
  inline ::std::string* mutable_client_urls(int index);
  inline void set_client_urls(int index, const ::std::string& value);
  inline void set_client_urls(int index, const char* value);
  inline void set_client_urls(int index, const char* value, size_t size);
  inline ::std::string* add_client_urls();
  inline void add_client_urls(const ::std::string& value);
  inline void add_client_urls(const char* value);
  inline void add_client_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& client_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_client_urls();

  // repeated string peer_urls = 3;
  inline int peer_urls_size() const;
  inline void clear_peer_urls();
  static const int kPeerUrlsFieldNumber = 3;
  inline const ::std::string& peer_urls(int index) const;
  inline ::std::string* mutable_peer_urls(int index);
  inline void set_peer_urls(int index, const ::std::string& value);
  inline void set_peer_urls(int index, const char* value);
  inline void set_peer_urls(int index, const char* value, size_t size);
  inline ::std::string* add_peer_urls();
  inline void add_peer_urls(const ::std::string& value);
  inline void add_peer_urls(const char* value);
  inline void add_peer_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& peer_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peer_urls();

  // @@protoc_insertion_point(class_scope:pdpb.PDMember)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> client_urls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peer_urls_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static PDMember* default_instance_;
};
// -------------------------------------------------------------------

class GetPDMembersRequest : public ::google::protobuf::Message {
 public:
  GetPDMembersRequest();
  virtual ~GetPDMembersRequest();

  GetPDMembersRequest(const GetPDMembersRequest& from);

  inline GetPDMembersRequest& operator=(const GetPDMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPDMembersRequest& default_instance();

  void Swap(GetPDMembersRequest* other);

  // implements Message ----------------------------------------------

  GetPDMembersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPDMembersRequest& from);
  void MergeFrom(const GetPDMembersRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.GetPDMembersRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetPDMembersRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPDMembersResponse : public ::google::protobuf::Message {
 public:
  GetPDMembersResponse();
  virtual ~GetPDMembersResponse();

  GetPDMembersResponse(const GetPDMembersResponse& from);

  inline GetPDMembersResponse& operator=(const GetPDMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPDMembersResponse& default_instance();

  void Swap(GetPDMembersResponse* other);

  // implements Message ----------------------------------------------

  GetPDMembersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPDMembersResponse& from);
  void MergeFrom(const GetPDMembersResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pdpb.PDMember members = 1;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline const ::pdpb::PDMember& members(int index) const;
  inline ::pdpb::PDMember* mutable_members(int index);
  inline ::pdpb::PDMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::pdpb::PDMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::pdpb::PDMember >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:pdpb.GetPDMembersResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pdpb::PDMember > members_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static GetPDMembersResponse* default_instance_;
};
// -------------------------------------------------------------------

class PeerStats : public ::google::protobuf::Message {
 public:
  PeerStats();
  virtual ~PeerStats();

  PeerStats(const PeerStats& from);

  inline PeerStats& operator=(const PeerStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerStats& default_instance();

  void Swap(PeerStats* other);

  // implements Message ----------------------------------------------

  PeerStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerStats& from);
  void MergeFrom(const PeerStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Peer peer = 1;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 1;
  inline const ::metapb::Peer& peer() const;
  inline ::metapb::Peer* mutable_peer();
  inline ::metapb::Peer* release_peer();
  inline void set_allocated_peer(::metapb::Peer* peer);

  // optional uint64 down_seconds = 2;
  inline bool has_down_seconds() const;
  inline void clear_down_seconds();
  static const int kDownSecondsFieldNumber = 2;
  inline ::google::protobuf::uint64 down_seconds() const;
  inline void set_down_seconds(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.PeerStats)
 private:
  inline void set_has_peer();
  inline void clear_has_peer();
  inline void set_has_down_seconds();
  inline void clear_has_down_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Peer* peer_;
  ::google::protobuf::uint64 down_seconds_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static PeerStats* default_instance_;
};
// -------------------------------------------------------------------

class RegionHeartbeatRequest : public ::google::protobuf::Message {
 public:
  RegionHeartbeatRequest();
  virtual ~RegionHeartbeatRequest();

  RegionHeartbeatRequest(const RegionHeartbeatRequest& from);

  inline RegionHeartbeatRequest& operator=(const RegionHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionHeartbeatRequest& default_instance();

  void Swap(RegionHeartbeatRequest* other);

  // implements Message ----------------------------------------------

  RegionHeartbeatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionHeartbeatRequest& from);
  void MergeFrom(const RegionHeartbeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // optional .metapb.Peer leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline const ::metapb::Peer& leader() const;
  inline ::metapb::Peer* mutable_leader();
  inline ::metapb::Peer* release_leader();
  inline void set_allocated_leader(::metapb::Peer* leader);

  // repeated .pdpb.PeerStats down_peers = 3;
  inline int down_peers_size() const;
  inline void clear_down_peers();
  static const int kDownPeersFieldNumber = 3;
  inline const ::pdpb::PeerStats& down_peers(int index) const;
  inline ::pdpb::PeerStats* mutable_down_peers(int index);
  inline ::pdpb::PeerStats* add_down_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats >&
      down_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats >*
      mutable_down_peers();

  // repeated .metapb.Peer pending_peers = 4;
  inline int pending_peers_size() const;
  inline void clear_pending_peers();
  static const int kPendingPeersFieldNumber = 4;
  inline const ::metapb::Peer& pending_peers(int index) const;
  inline ::metapb::Peer* mutable_pending_peers(int index);
  inline ::metapb::Peer* add_pending_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
      pending_peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
      mutable_pending_peers();

  // optional uint64 bytes_written = 5;
  inline bool has_bytes_written() const;
  inline void clear_bytes_written();
  static const int kBytesWrittenFieldNumber = 5;
  inline ::google::protobuf::uint64 bytes_written() const;
  inline void set_bytes_written(::google::protobuf::uint64 value);

  // optional uint64 bytes_read = 6;
  inline bool has_bytes_read() const;
  inline void clear_bytes_read();
  static const int kBytesReadFieldNumber = 6;
  inline ::google::protobuf::uint64 bytes_read() const;
  inline void set_bytes_read(::google::protobuf::uint64 value);

  // optional uint64 keys_written = 7;
  inline bool has_keys_written() const;
  inline void clear_keys_written();
  static const int kKeysWrittenFieldNumber = 7;
  inline ::google::protobuf::uint64 keys_written() const;
  inline void set_keys_written(::google::protobuf::uint64 value);

  // optional uint64 keys_read = 8;
  inline bool has_keys_read() const;
  inline void clear_keys_read();
  static const int kKeysReadFieldNumber = 8;
  inline ::google::protobuf::uint64 keys_read() const;
  inline void set_keys_read(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.RegionHeartbeatRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_bytes_written();
  inline void clear_has_bytes_written();
  inline void set_has_bytes_read();
  inline void clear_has_bytes_read();
  inline void set_has_keys_written();
  inline void clear_has_keys_written();
  inline void set_has_keys_read();
  inline void clear_has_keys_read();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* region_;
  ::metapb::Peer* leader_;
  ::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats > down_peers_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Peer > pending_peers_;
  ::google::protobuf::uint64 bytes_written_;
  ::google::protobuf::uint64 bytes_read_;
  ::google::protobuf::uint64 keys_written_;
  ::google::protobuf::uint64 keys_read_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static RegionHeartbeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeer : public ::google::protobuf::Message {
 public:
  ChangePeer();
  virtual ~ChangePeer();

  ChangePeer(const ChangePeer& from);

  inline ChangePeer& operator=(const ChangePeer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeer& default_instance();

  void Swap(ChangePeer* other);

  // implements Message ----------------------------------------------

  ChangePeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeer& from);
  void MergeFrom(const ChangePeer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eraftpb.ConfChangeType change_type = 1;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  inline ::eraftpb::ConfChangeType change_type() const;
  inline void set_change_type(::eraftpb::ConfChangeType value);

  // optional .metapb.Peer peer = 2;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 2;
  inline const ::metapb::Peer& peer() const;
  inline ::metapb::Peer* mutable_peer();
  inline ::metapb::Peer* release_peer();
  inline void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:pdpb.ChangePeer)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_peer();
  inline void clear_has_peer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Peer* peer_;
  int change_type_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static ChangePeer* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeader : public ::google::protobuf::Message {
 public:
  TransferLeader();
  virtual ~TransferLeader();

  TransferLeader(const TransferLeader& from);

  inline TransferLeader& operator=(const TransferLeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeader& default_instance();

  void Swap(TransferLeader* other);

  // implements Message ----------------------------------------------

  TransferLeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeader& from);
  void MergeFrom(const TransferLeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Peer peer = 1;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 1;
  inline const ::metapb::Peer& peer() const;
  inline ::metapb::Peer* mutable_peer();
  inline ::metapb::Peer* release_peer();
  inline void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:pdpb.TransferLeader)
 private:
  inline void set_has_peer();
  inline void clear_has_peer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Peer* peer_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static TransferLeader* default_instance_;
};
// -------------------------------------------------------------------

class RegionHeartbeatResponse : public ::google::protobuf::Message {
 public:
  RegionHeartbeatResponse();
  virtual ~RegionHeartbeatResponse();

  RegionHeartbeatResponse(const RegionHeartbeatResponse& from);

  inline RegionHeartbeatResponse& operator=(const RegionHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionHeartbeatResponse& default_instance();

  void Swap(RegionHeartbeatResponse* other);

  // implements Message ----------------------------------------------

  RegionHeartbeatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionHeartbeatResponse& from);
  void MergeFrom(const RegionHeartbeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pdpb.ChangePeer change_peer = 1;
  inline bool has_change_peer() const;
  inline void clear_change_peer();
  static const int kChangePeerFieldNumber = 1;
  inline const ::pdpb::ChangePeer& change_peer() const;
  inline ::pdpb::ChangePeer* mutable_change_peer();
  inline ::pdpb::ChangePeer* release_change_peer();
  inline void set_allocated_change_peer(::pdpb::ChangePeer* change_peer);

  // optional .pdpb.TransferLeader transfer_leader = 2;
  inline bool has_transfer_leader() const;
  inline void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 2;
  inline const ::pdpb::TransferLeader& transfer_leader() const;
  inline ::pdpb::TransferLeader* mutable_transfer_leader();
  inline ::pdpb::TransferLeader* release_transfer_leader();
  inline void set_allocated_transfer_leader(::pdpb::TransferLeader* transfer_leader);

  // @@protoc_insertion_point(class_scope:pdpb.RegionHeartbeatResponse)
 private:
  inline void set_has_change_peer();
  inline void clear_has_change_peer();
  inline void set_has_transfer_leader();
  inline void clear_has_transfer_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pdpb::ChangePeer* change_peer_;
  ::pdpb::TransferLeader* transfer_leader_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static RegionHeartbeatResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutClusterConfigRequest : public ::google::protobuf::Message {
 public:
  PutClusterConfigRequest();
  virtual ~PutClusterConfigRequest();

  PutClusterConfigRequest(const PutClusterConfigRequest& from);

  inline PutClusterConfigRequest& operator=(const PutClusterConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutClusterConfigRequest& default_instance();

  void Swap(PutClusterConfigRequest* other);

  // implements Message ----------------------------------------------

  PutClusterConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutClusterConfigRequest& from);
  void MergeFrom(const PutClusterConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Cluster cluster = 1;
  inline bool has_cluster() const;
  inline void clear_cluster();
  static const int kClusterFieldNumber = 1;
  inline const ::metapb::Cluster& cluster() const;
  inline ::metapb::Cluster* mutable_cluster();
  inline ::metapb::Cluster* release_cluster();
  inline void set_allocated_cluster(::metapb::Cluster* cluster);

  // @@protoc_insertion_point(class_scope:pdpb.PutClusterConfigRequest)
 private:
  inline void set_has_cluster();
  inline void clear_has_cluster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Cluster* cluster_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static PutClusterConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutClusterConfigResponse : public ::google::protobuf::Message {
 public:
  PutClusterConfigResponse();
  virtual ~PutClusterConfigResponse();

  PutClusterConfigResponse(const PutClusterConfigResponse& from);

  inline PutClusterConfigResponse& operator=(const PutClusterConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutClusterConfigResponse& default_instance();

  void Swap(PutClusterConfigResponse* other);

  // implements Message ----------------------------------------------

  PutClusterConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutClusterConfigResponse& from);
  void MergeFrom(const PutClusterConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.PutClusterConfigResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static PutClusterConfigResponse* default_instance_;
};
// -------------------------------------------------------------------

class AskSplitRequest : public ::google::protobuf::Message {
 public:
  AskSplitRequest();
  virtual ~AskSplitRequest();

  AskSplitRequest(const AskSplitRequest& from);

  inline AskSplitRequest& operator=(const AskSplitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskSplitRequest& default_instance();

  void Swap(AskSplitRequest* other);

  // implements Message ----------------------------------------------

  AskSplitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskSplitRequest& from);
  void MergeFrom(const AskSplitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:pdpb.AskSplitRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* region_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static AskSplitRequest* default_instance_;
};
// -------------------------------------------------------------------

class AskSplitResponse : public ::google::protobuf::Message {
 public:
  AskSplitResponse();
  virtual ~AskSplitResponse();

  AskSplitResponse(const AskSplitResponse& from);

  inline AskSplitResponse& operator=(const AskSplitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskSplitResponse& default_instance();

  void Swap(AskSplitResponse* other);

  // implements Message ----------------------------------------------

  AskSplitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskSplitResponse& from);
  void MergeFrom(const AskSplitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 new_region_id = 1;
  inline bool has_new_region_id() const;
  inline void clear_new_region_id();
  static const int kNewRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 new_region_id() const;
  inline void set_new_region_id(::google::protobuf::uint64 value);

  // repeated uint64 new_peer_ids = 2;
  inline int new_peer_ids_size() const;
  inline void clear_new_peer_ids();
  static const int kNewPeerIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 new_peer_ids(int index) const;
  inline void set_new_peer_ids(int index, ::google::protobuf::uint64 value);
  inline void add_new_peer_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      new_peer_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_new_peer_ids();

  // @@protoc_insertion_point(class_scope:pdpb.AskSplitResponse)
 private:
  inline void set_has_new_region_id();
  inline void clear_has_new_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 new_region_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > new_peer_ids_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static AskSplitResponse* default_instance_;
};
// -------------------------------------------------------------------

class StoreStats : public ::google::protobuf::Message {
 public:
  StoreStats();
  virtual ~StoreStats();

  StoreStats(const StoreStats& from);

  inline StoreStats& operator=(const StoreStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreStats& default_instance();

  void Swap(StoreStats* other);

  // implements Message ----------------------------------------------

  StoreStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreStats& from);
  void MergeFrom(const StoreStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::uint64 store_id() const;
  inline void set_store_id(::google::protobuf::uint64 value);

  // optional uint64 capacity = 2;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 2;
  inline ::google::protobuf::uint64 capacity() const;
  inline void set_capacity(::google::protobuf::uint64 value);

  // optional uint64 available = 3;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 3;
  inline ::google::protobuf::uint64 available() const;
  inline void set_available(::google::protobuf::uint64 value);

  // optional uint32 region_count = 4;
  inline bool has_region_count() const;
  inline void clear_region_count();
  static const int kRegionCountFieldNumber = 4;
  inline ::google::protobuf::uint32 region_count() const;
  inline void set_region_count(::google::protobuf::uint32 value);

  // optional uint32 sending_snap_count = 5;
  inline bool has_sending_snap_count() const;
  inline void clear_sending_snap_count();
  static const int kSendingSnapCountFieldNumber = 5;
  inline ::google::protobuf::uint32 sending_snap_count() const;
  inline void set_sending_snap_count(::google::protobuf::uint32 value);

  // optional uint32 receiving_snap_count = 6;
  inline bool has_receiving_snap_count() const;
  inline void clear_receiving_snap_count();
  static const int kReceivingSnapCountFieldNumber = 6;
  inline ::google::protobuf::uint32 receiving_snap_count() const;
  inline void set_receiving_snap_count(::google::protobuf::uint32 value);

  // optional uint32 start_time = 7;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 applying_snap_count = 8;
  inline bool has_applying_snap_count() const;
  inline void clear_applying_snap_count();
  static const int kApplyingSnapCountFieldNumber = 8;
  inline ::google::protobuf::uint32 applying_snap_count() const;
  inline void set_applying_snap_count(::google::protobuf::uint32 value);

  // optional bool is_busy = 9;
  inline bool has_is_busy() const;
  inline void clear_is_busy();
  static const int kIsBusyFieldNumber = 9;
  inline bool is_busy() const;
  inline void set_is_busy(bool value);

  // @@protoc_insertion_point(class_scope:pdpb.StoreStats)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_region_count();
  inline void clear_has_region_count();
  inline void set_has_sending_snap_count();
  inline void clear_has_sending_snap_count();
  inline void set_has_receiving_snap_count();
  inline void clear_has_receiving_snap_count();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_applying_snap_count();
  inline void clear_has_applying_snap_count();
  inline void set_has_is_busy();
  inline void clear_has_is_busy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 store_id_;
  ::google::protobuf::uint64 capacity_;
  ::google::protobuf::uint64 available_;
  ::google::protobuf::uint32 region_count_;
  ::google::protobuf::uint32 sending_snap_count_;
  ::google::protobuf::uint32 receiving_snap_count_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 applying_snap_count_;
  bool is_busy_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static StoreStats* default_instance_;
};
// -------------------------------------------------------------------

class StoreHeartbeatRequest : public ::google::protobuf::Message {
 public:
  StoreHeartbeatRequest();
  virtual ~StoreHeartbeatRequest();

  StoreHeartbeatRequest(const StoreHeartbeatRequest& from);

  inline StoreHeartbeatRequest& operator=(const StoreHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreHeartbeatRequest& default_instance();

  void Swap(StoreHeartbeatRequest* other);

  // implements Message ----------------------------------------------

  StoreHeartbeatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreHeartbeatRequest& from);
  void MergeFrom(const StoreHeartbeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pdpb.StoreStats stats = 1;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline const ::pdpb::StoreStats& stats() const;
  inline ::pdpb::StoreStats* mutable_stats();
  inline ::pdpb::StoreStats* release_stats();
  inline void set_allocated_stats(::pdpb::StoreStats* stats);

  // @@protoc_insertion_point(class_scope:pdpb.StoreHeartbeatRequest)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pdpb::StoreStats* stats_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static StoreHeartbeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class StoreHeartbeatResponse : public ::google::protobuf::Message {
 public:
  StoreHeartbeatResponse();
  virtual ~StoreHeartbeatResponse();

  StoreHeartbeatResponse(const StoreHeartbeatResponse& from);

  inline StoreHeartbeatResponse& operator=(const StoreHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreHeartbeatResponse& default_instance();

  void Swap(StoreHeartbeatResponse* other);

  // implements Message ----------------------------------------------

  StoreHeartbeatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreHeartbeatResponse& from);
  void MergeFrom(const StoreHeartbeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.StoreHeartbeatResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static StoreHeartbeatResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportSplitRequest : public ::google::protobuf::Message {
 public:
  ReportSplitRequest();
  virtual ~ReportSplitRequest();

  ReportSplitRequest(const ReportSplitRequest& from);

  inline ReportSplitRequest& operator=(const ReportSplitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSplitRequest& default_instance();

  void Swap(ReportSplitRequest* other);

  // implements Message ----------------------------------------------

  ReportSplitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSplitRequest& from);
  void MergeFrom(const ReportSplitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline const ::metapb::Region& left() const;
  inline ::metapb::Region* mutable_left();
  inline ::metapb::Region* release_left();
  inline void set_allocated_left(::metapb::Region* left);

  // optional .metapb.Region right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline const ::metapb::Region& right() const;
  inline ::metapb::Region* mutable_right();
  inline ::metapb::Region* release_right();
  inline void set_allocated_right(::metapb::Region* right);

  // @@protoc_insertion_point(class_scope:pdpb.ReportSplitRequest)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* left_;
  ::metapb::Region* right_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static ReportSplitRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportSplitResponse : public ::google::protobuf::Message {
 public:
  ReportSplitResponse();
  virtual ~ReportSplitResponse();

  ReportSplitResponse(const ReportSplitResponse& from);

  inline ReportSplitResponse& operator=(const ReportSplitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportSplitResponse& default_instance();

  void Swap(ReportSplitResponse* other);

  // implements Message ----------------------------------------------

  ReportSplitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportSplitResponse& from);
  void MergeFrom(const ReportSplitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.ReportSplitResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static ReportSplitResponse* default_instance_;
};
// -------------------------------------------------------------------

class RequestHeader : public ::google::protobuf::Message {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHeader& default_instance();

  void Swap(RequestHeader* other);

  // implements Message ----------------------------------------------

  RequestHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional uint64 cluster_id = 2;
  inline bool has_cluster_id() const;
  inline void clear_cluster_id();
  static const int kClusterIdFieldNumber = 2;
  inline ::google::protobuf::uint64 cluster_id() const;
  inline void set_cluster_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pdpb.RequestHeader)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::google::protobuf::uint64 cluster_id_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static RequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  void Swap(ResponseHeader* other);

  // implements Message ----------------------------------------------

  ResponseHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional uint64 cluster_id = 2;
  inline bool has_cluster_id() const;
  inline void clear_cluster_id();
  static const int kClusterIdFieldNumber = 2;
  inline ::google::protobuf::uint64 cluster_id() const;
  inline void set_cluster_id(::google::protobuf::uint64 value);

  // optional .pdpb.Error error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::pdpb::Error& error() const;
  inline ::pdpb::Error* mutable_error();
  inline ::pdpb::Error* release_error();
  inline void set_allocated_error(::pdpb::Error* error);

  // @@protoc_insertion_point(class_scope:pdpb.ResponseHeader)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::google::protobuf::uint64 cluster_id_;
  ::pdpb::Error* error_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static ResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pdpb.RequestHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::pdpb::RequestHeader& header() const;
  inline ::pdpb::RequestHeader* mutable_header();
  inline ::pdpb::RequestHeader* release_header();
  inline void set_allocated_header(::pdpb::RequestHeader* header);

  // optional .pdpb.CommandType cmd_type = 2;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  inline ::pdpb::CommandType cmd_type() const;
  inline void set_cmd_type(::pdpb::CommandType value);

  // optional .pdpb.TsoRequest tso = 3;
  inline bool has_tso() const;
  inline void clear_tso();
  static const int kTsoFieldNumber = 3;
  inline const ::pdpb::TsoRequest& tso() const;
  inline ::pdpb::TsoRequest* mutable_tso();
  inline ::pdpb::TsoRequest* release_tso();
  inline void set_allocated_tso(::pdpb::TsoRequest* tso);

  // optional .pdpb.BootstrapRequest bootstrap = 4;
  inline bool has_bootstrap() const;
  inline void clear_bootstrap();
  static const int kBootstrapFieldNumber = 4;
  inline const ::pdpb::BootstrapRequest& bootstrap() const;
  inline ::pdpb::BootstrapRequest* mutable_bootstrap();
  inline ::pdpb::BootstrapRequest* release_bootstrap();
  inline void set_allocated_bootstrap(::pdpb::BootstrapRequest* bootstrap);

  // optional .pdpb.IsBootstrappedRequest is_bootstrapped = 5;
  inline bool has_is_bootstrapped() const;
  inline void clear_is_bootstrapped();
  static const int kIsBootstrappedFieldNumber = 5;
  inline const ::pdpb::IsBootstrappedRequest& is_bootstrapped() const;
  inline ::pdpb::IsBootstrappedRequest* mutable_is_bootstrapped();
  inline ::pdpb::IsBootstrappedRequest* release_is_bootstrapped();
  inline void set_allocated_is_bootstrapped(::pdpb::IsBootstrappedRequest* is_bootstrapped);

  // optional .pdpb.AllocIdRequest alloc_id = 6;
  inline bool has_alloc_id() const;
  inline void clear_alloc_id();
  static const int kAllocIdFieldNumber = 6;
  inline const ::pdpb::AllocIdRequest& alloc_id() const;
  inline ::pdpb::AllocIdRequest* mutable_alloc_id();
  inline ::pdpb::AllocIdRequest* release_alloc_id();
  inline void set_allocated_alloc_id(::pdpb::AllocIdRequest* alloc_id);

  // optional .pdpb.GetStoreRequest get_store = 7;
  inline bool has_get_store() const;
  inline void clear_get_store();
  static const int kGetStoreFieldNumber = 7;
  inline const ::pdpb::GetStoreRequest& get_store() const;
  inline ::pdpb::GetStoreRequest* mutable_get_store();
  inline ::pdpb::GetStoreRequest* release_get_store();
  inline void set_allocated_get_store(::pdpb::GetStoreRequest* get_store);

  // optional .pdpb.PutStoreRequest put_store = 8;
  inline bool has_put_store() const;
  inline void clear_put_store();
  static const int kPutStoreFieldNumber = 8;
  inline const ::pdpb::PutStoreRequest& put_store() const;
  inline ::pdpb::PutStoreRequest* mutable_put_store();
  inline ::pdpb::PutStoreRequest* release_put_store();
  inline void set_allocated_put_store(::pdpb::PutStoreRequest* put_store);

  // optional .pdpb.AskSplitRequest ask_split = 9;
  inline bool has_ask_split() const;
  inline void clear_ask_split();
  static const int kAskSplitFieldNumber = 9;
  inline const ::pdpb::AskSplitRequest& ask_split() const;
  inline ::pdpb::AskSplitRequest* mutable_ask_split();
  inline ::pdpb::AskSplitRequest* release_ask_split();
  inline void set_allocated_ask_split(::pdpb::AskSplitRequest* ask_split);

  // optional .pdpb.GetRegionRequest get_region = 10;
  inline bool has_get_region() const;
  inline void clear_get_region();
  static const int kGetRegionFieldNumber = 10;
  inline const ::pdpb::GetRegionRequest& get_region() const;
  inline ::pdpb::GetRegionRequest* mutable_get_region();
  inline ::pdpb::GetRegionRequest* release_get_region();
  inline void set_allocated_get_region(::pdpb::GetRegionRequest* get_region);

  // optional .pdpb.RegionHeartbeatRequest region_heartbeat = 11;
  inline bool has_region_heartbeat() const;
  inline void clear_region_heartbeat();
  static const int kRegionHeartbeatFieldNumber = 11;
  inline const ::pdpb::RegionHeartbeatRequest& region_heartbeat() const;
  inline ::pdpb::RegionHeartbeatRequest* mutable_region_heartbeat();
  inline ::pdpb::RegionHeartbeatRequest* release_region_heartbeat();
  inline void set_allocated_region_heartbeat(::pdpb::RegionHeartbeatRequest* region_heartbeat);

  // optional .pdpb.GetClusterConfigRequest get_cluster_config = 12;
  inline bool has_get_cluster_config() const;
  inline void clear_get_cluster_config();
  static const int kGetClusterConfigFieldNumber = 12;
  inline const ::pdpb::GetClusterConfigRequest& get_cluster_config() const;
  inline ::pdpb::GetClusterConfigRequest* mutable_get_cluster_config();
  inline ::pdpb::GetClusterConfigRequest* release_get_cluster_config();
  inline void set_allocated_get_cluster_config(::pdpb::GetClusterConfigRequest* get_cluster_config);

  // optional .pdpb.PutClusterConfigRequest put_cluster_config = 13;
  inline bool has_put_cluster_config() const;
  inline void clear_put_cluster_config();
  static const int kPutClusterConfigFieldNumber = 13;
  inline const ::pdpb::PutClusterConfigRequest& put_cluster_config() const;
  inline ::pdpb::PutClusterConfigRequest* mutable_put_cluster_config();
  inline ::pdpb::PutClusterConfigRequest* release_put_cluster_config();
  inline void set_allocated_put_cluster_config(::pdpb::PutClusterConfigRequest* put_cluster_config);

  // optional .pdpb.StoreHeartbeatRequest store_heartbeat = 14;
  inline bool has_store_heartbeat() const;
  inline void clear_store_heartbeat();
  static const int kStoreHeartbeatFieldNumber = 14;
  inline const ::pdpb::StoreHeartbeatRequest& store_heartbeat() const;
  inline ::pdpb::StoreHeartbeatRequest* mutable_store_heartbeat();
  inline ::pdpb::StoreHeartbeatRequest* release_store_heartbeat();
  inline void set_allocated_store_heartbeat(::pdpb::StoreHeartbeatRequest* store_heartbeat);

  // optional .pdpb.ReportSplitRequest report_split = 15;
  inline bool has_report_split() const;
  inline void clear_report_split();
  static const int kReportSplitFieldNumber = 15;
  inline const ::pdpb::ReportSplitRequest& report_split() const;
  inline ::pdpb::ReportSplitRequest* mutable_report_split();
  inline ::pdpb::ReportSplitRequest* release_report_split();
  inline void set_allocated_report_split(::pdpb::ReportSplitRequest* report_split);

  // optional .pdpb.GetRegionByIDRequest get_region_by_id = 16;
  inline bool has_get_region_by_id() const;
  inline void clear_get_region_by_id();
  static const int kGetRegionByIdFieldNumber = 16;
  inline const ::pdpb::GetRegionByIDRequest& get_region_by_id() const;
  inline ::pdpb::GetRegionByIDRequest* mutable_get_region_by_id();
  inline ::pdpb::GetRegionByIDRequest* release_get_region_by_id();
  inline void set_allocated_get_region_by_id(::pdpb::GetRegionByIDRequest* get_region_by_id);

  // optional .pdpb.GetPDMembersRequest get_pd_members = 17;
  inline bool has_get_pd_members() const;
  inline void clear_get_pd_members();
  static const int kGetPdMembersFieldNumber = 17;
  inline const ::pdpb::GetPDMembersRequest& get_pd_members() const;
  inline ::pdpb::GetPDMembersRequest* mutable_get_pd_members();
  inline ::pdpb::GetPDMembersRequest* release_get_pd_members();
  inline void set_allocated_get_pd_members(::pdpb::GetPDMembersRequest* get_pd_members);

  // optional .pdpb.AllocVolumeIdRequest alloc_volume_id = 18;
  inline bool has_alloc_volume_id() const;
  inline void clear_alloc_volume_id();
  static const int kAllocVolumeIdFieldNumber = 18;
  inline const ::pdpb::AllocVolumeIdRequest& alloc_volume_id() const;
  inline ::pdpb::AllocVolumeIdRequest* mutable_alloc_volume_id();
  inline ::pdpb::AllocVolumeIdRequest* release_alloc_volume_id();
  inline void set_allocated_alloc_volume_id(::pdpb::AllocVolumeIdRequest* alloc_volume_id);

  // @@protoc_insertion_point(class_scope:pdpb.Request)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_tso();
  inline void clear_has_tso();
  inline void set_has_bootstrap();
  inline void clear_has_bootstrap();
  inline void set_has_is_bootstrapped();
  inline void clear_has_is_bootstrapped();
  inline void set_has_alloc_id();
  inline void clear_has_alloc_id();
  inline void set_has_get_store();
  inline void clear_has_get_store();
  inline void set_has_put_store();
  inline void clear_has_put_store();
  inline void set_has_ask_split();
  inline void clear_has_ask_split();
  inline void set_has_get_region();
  inline void clear_has_get_region();
  inline void set_has_region_heartbeat();
  inline void clear_has_region_heartbeat();
  inline void set_has_get_cluster_config();
  inline void clear_has_get_cluster_config();
  inline void set_has_put_cluster_config();
  inline void clear_has_put_cluster_config();
  inline void set_has_store_heartbeat();
  inline void clear_has_store_heartbeat();
  inline void set_has_report_split();
  inline void clear_has_report_split();
  inline void set_has_get_region_by_id();
  inline void clear_has_get_region_by_id();
  inline void set_has_get_pd_members();
  inline void clear_has_get_pd_members();
  inline void set_has_alloc_volume_id();
  inline void clear_has_alloc_volume_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pdpb::RequestHeader* header_;
  ::pdpb::TsoRequest* tso_;
  ::pdpb::BootstrapRequest* bootstrap_;
  ::pdpb::IsBootstrappedRequest* is_bootstrapped_;
  ::pdpb::AllocIdRequest* alloc_id_;
  ::pdpb::GetStoreRequest* get_store_;
  ::pdpb::PutStoreRequest* put_store_;
  ::pdpb::AskSplitRequest* ask_split_;
  ::pdpb::GetRegionRequest* get_region_;
  ::pdpb::RegionHeartbeatRequest* region_heartbeat_;
  ::pdpb::GetClusterConfigRequest* get_cluster_config_;
  ::pdpb::PutClusterConfigRequest* put_cluster_config_;
  ::pdpb::StoreHeartbeatRequest* store_heartbeat_;
  ::pdpb::ReportSplitRequest* report_split_;
  ::pdpb::GetRegionByIDRequest* get_region_by_id_;
  ::pdpb::GetPDMembersRequest* get_pd_members_;
  ::pdpb::AllocVolumeIdRequest* alloc_volume_id_;
  int cmd_type_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pdpb.ResponseHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::pdpb::ResponseHeader& header() const;
  inline ::pdpb::ResponseHeader* mutable_header();
  inline ::pdpb::ResponseHeader* release_header();
  inline void set_allocated_header(::pdpb::ResponseHeader* header);

  // optional .pdpb.CommandType cmd_type = 2;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  inline ::pdpb::CommandType cmd_type() const;
  inline void set_cmd_type(::pdpb::CommandType value);

  // optional .pdpb.TsoResponse tso = 3;
  inline bool has_tso() const;
  inline void clear_tso();
  static const int kTsoFieldNumber = 3;
  inline const ::pdpb::TsoResponse& tso() const;
  inline ::pdpb::TsoResponse* mutable_tso();
  inline ::pdpb::TsoResponse* release_tso();
  inline void set_allocated_tso(::pdpb::TsoResponse* tso);

  // optional .pdpb.BootstrapResponse bootstrap = 4;
  inline bool has_bootstrap() const;
  inline void clear_bootstrap();
  static const int kBootstrapFieldNumber = 4;
  inline const ::pdpb::BootstrapResponse& bootstrap() const;
  inline ::pdpb::BootstrapResponse* mutable_bootstrap();
  inline ::pdpb::BootstrapResponse* release_bootstrap();
  inline void set_allocated_bootstrap(::pdpb::BootstrapResponse* bootstrap);

  // optional .pdpb.IsBootstrappedResponse is_bootstrapped = 5;
  inline bool has_is_bootstrapped() const;
  inline void clear_is_bootstrapped();
  static const int kIsBootstrappedFieldNumber = 5;
  inline const ::pdpb::IsBootstrappedResponse& is_bootstrapped() const;
  inline ::pdpb::IsBootstrappedResponse* mutable_is_bootstrapped();
  inline ::pdpb::IsBootstrappedResponse* release_is_bootstrapped();
  inline void set_allocated_is_bootstrapped(::pdpb::IsBootstrappedResponse* is_bootstrapped);

  // optional .pdpb.AllocIdResponse alloc_id = 6;
  inline bool has_alloc_id() const;
  inline void clear_alloc_id();
  static const int kAllocIdFieldNumber = 6;
  inline const ::pdpb::AllocIdResponse& alloc_id() const;
  inline ::pdpb::AllocIdResponse* mutable_alloc_id();
  inline ::pdpb::AllocIdResponse* release_alloc_id();
  inline void set_allocated_alloc_id(::pdpb::AllocIdResponse* alloc_id);

  // optional .pdpb.GetStoreResponse get_store = 7;
  inline bool has_get_store() const;
  inline void clear_get_store();
  static const int kGetStoreFieldNumber = 7;
  inline const ::pdpb::GetStoreResponse& get_store() const;
  inline ::pdpb::GetStoreResponse* mutable_get_store();
  inline ::pdpb::GetStoreResponse* release_get_store();
  inline void set_allocated_get_store(::pdpb::GetStoreResponse* get_store);

  // optional .pdpb.PutStoreResponse put_store = 8;
  inline bool has_put_store() const;
  inline void clear_put_store();
  static const int kPutStoreFieldNumber = 8;
  inline const ::pdpb::PutStoreResponse& put_store() const;
  inline ::pdpb::PutStoreResponse* mutable_put_store();
  inline ::pdpb::PutStoreResponse* release_put_store();
  inline void set_allocated_put_store(::pdpb::PutStoreResponse* put_store);

  // optional .pdpb.AskSplitResponse ask_split = 9;
  inline bool has_ask_split() const;
  inline void clear_ask_split();
  static const int kAskSplitFieldNumber = 9;
  inline const ::pdpb::AskSplitResponse& ask_split() const;
  inline ::pdpb::AskSplitResponse* mutable_ask_split();
  inline ::pdpb::AskSplitResponse* release_ask_split();
  inline void set_allocated_ask_split(::pdpb::AskSplitResponse* ask_split);

  // optional .pdpb.GetRegionResponse get_region = 10;
  inline bool has_get_region() const;
  inline void clear_get_region();
  static const int kGetRegionFieldNumber = 10;
  inline const ::pdpb::GetRegionResponse& get_region() const;
  inline ::pdpb::GetRegionResponse* mutable_get_region();
  inline ::pdpb::GetRegionResponse* release_get_region();
  inline void set_allocated_get_region(::pdpb::GetRegionResponse* get_region);

  // optional .pdpb.RegionHeartbeatResponse region_heartbeat = 11;
  inline bool has_region_heartbeat() const;
  inline void clear_region_heartbeat();
  static const int kRegionHeartbeatFieldNumber = 11;
  inline const ::pdpb::RegionHeartbeatResponse& region_heartbeat() const;
  inline ::pdpb::RegionHeartbeatResponse* mutable_region_heartbeat();
  inline ::pdpb::RegionHeartbeatResponse* release_region_heartbeat();
  inline void set_allocated_region_heartbeat(::pdpb::RegionHeartbeatResponse* region_heartbeat);

  // optional .pdpb.GetClusterConfigResponse get_cluster_config = 12;
  inline bool has_get_cluster_config() const;
  inline void clear_get_cluster_config();
  static const int kGetClusterConfigFieldNumber = 12;
  inline const ::pdpb::GetClusterConfigResponse& get_cluster_config() const;
  inline ::pdpb::GetClusterConfigResponse* mutable_get_cluster_config();
  inline ::pdpb::GetClusterConfigResponse* release_get_cluster_config();
  inline void set_allocated_get_cluster_config(::pdpb::GetClusterConfigResponse* get_cluster_config);

  // optional .pdpb.PutClusterConfigResponse put_cluster_config = 13;
  inline bool has_put_cluster_config() const;
  inline void clear_put_cluster_config();
  static const int kPutClusterConfigFieldNumber = 13;
  inline const ::pdpb::PutClusterConfigResponse& put_cluster_config() const;
  inline ::pdpb::PutClusterConfigResponse* mutable_put_cluster_config();
  inline ::pdpb::PutClusterConfigResponse* release_put_cluster_config();
  inline void set_allocated_put_cluster_config(::pdpb::PutClusterConfigResponse* put_cluster_config);

  // optional .pdpb.StoreHeartbeatResponse store_heartbeat = 14;
  inline bool has_store_heartbeat() const;
  inline void clear_store_heartbeat();
  static const int kStoreHeartbeatFieldNumber = 14;
  inline const ::pdpb::StoreHeartbeatResponse& store_heartbeat() const;
  inline ::pdpb::StoreHeartbeatResponse* mutable_store_heartbeat();
  inline ::pdpb::StoreHeartbeatResponse* release_store_heartbeat();
  inline void set_allocated_store_heartbeat(::pdpb::StoreHeartbeatResponse* store_heartbeat);

  // optional .pdpb.ReportSplitResponse report_split = 15;
  inline bool has_report_split() const;
  inline void clear_report_split();
  static const int kReportSplitFieldNumber = 15;
  inline const ::pdpb::ReportSplitResponse& report_split() const;
  inline ::pdpb::ReportSplitResponse* mutable_report_split();
  inline ::pdpb::ReportSplitResponse* release_report_split();
  inline void set_allocated_report_split(::pdpb::ReportSplitResponse* report_split);

  // optional .pdpb.GetRegionResponse get_region_by_id = 16;
  inline bool has_get_region_by_id() const;
  inline void clear_get_region_by_id();
  static const int kGetRegionByIdFieldNumber = 16;
  inline const ::pdpb::GetRegionResponse& get_region_by_id() const;
  inline ::pdpb::GetRegionResponse* mutable_get_region_by_id();
  inline ::pdpb::GetRegionResponse* release_get_region_by_id();
  inline void set_allocated_get_region_by_id(::pdpb::GetRegionResponse* get_region_by_id);

  // optional .pdpb.GetPDMembersResponse get_pd_members = 17;
  inline bool has_get_pd_members() const;
  inline void clear_get_pd_members();
  static const int kGetPdMembersFieldNumber = 17;
  inline const ::pdpb::GetPDMembersResponse& get_pd_members() const;
  inline ::pdpb::GetPDMembersResponse* mutable_get_pd_members();
  inline ::pdpb::GetPDMembersResponse* release_get_pd_members();
  inline void set_allocated_get_pd_members(::pdpb::GetPDMembersResponse* get_pd_members);

  // optional .pdpb.AllocVolumeIdResponse alloc_volume_id = 18;
  inline bool has_alloc_volume_id() const;
  inline void clear_alloc_volume_id();
  static const int kAllocVolumeIdFieldNumber = 18;
  inline const ::pdpb::AllocVolumeIdResponse& alloc_volume_id() const;
  inline ::pdpb::AllocVolumeIdResponse* mutable_alloc_volume_id();
  inline ::pdpb::AllocVolumeIdResponse* release_alloc_volume_id();
  inline void set_allocated_alloc_volume_id(::pdpb::AllocVolumeIdResponse* alloc_volume_id);

  // @@protoc_insertion_point(class_scope:pdpb.Response)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_tso();
  inline void clear_has_tso();
  inline void set_has_bootstrap();
  inline void clear_has_bootstrap();
  inline void set_has_is_bootstrapped();
  inline void clear_has_is_bootstrapped();
  inline void set_has_alloc_id();
  inline void clear_has_alloc_id();
  inline void set_has_get_store();
  inline void clear_has_get_store();
  inline void set_has_put_store();
  inline void clear_has_put_store();
  inline void set_has_ask_split();
  inline void clear_has_ask_split();
  inline void set_has_get_region();
  inline void clear_has_get_region();
  inline void set_has_region_heartbeat();
  inline void clear_has_region_heartbeat();
  inline void set_has_get_cluster_config();
  inline void clear_has_get_cluster_config();
  inline void set_has_put_cluster_config();
  inline void clear_has_put_cluster_config();
  inline void set_has_store_heartbeat();
  inline void clear_has_store_heartbeat();
  inline void set_has_report_split();
  inline void clear_has_report_split();
  inline void set_has_get_region_by_id();
  inline void clear_has_get_region_by_id();
  inline void set_has_get_pd_members();
  inline void clear_has_get_pd_members();
  inline void set_has_alloc_volume_id();
  inline void clear_has_alloc_volume_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pdpb::ResponseHeader* header_;
  ::pdpb::TsoResponse* tso_;
  ::pdpb::BootstrapResponse* bootstrap_;
  ::pdpb::IsBootstrappedResponse* is_bootstrapped_;
  ::pdpb::AllocIdResponse* alloc_id_;
  ::pdpb::GetStoreResponse* get_store_;
  ::pdpb::PutStoreResponse* put_store_;
  ::pdpb::AskSplitResponse* ask_split_;
  ::pdpb::GetRegionResponse* get_region_;
  ::pdpb::RegionHeartbeatResponse* region_heartbeat_;
  ::pdpb::GetClusterConfigResponse* get_cluster_config_;
  ::pdpb::PutClusterConfigResponse* put_cluster_config_;
  ::pdpb::StoreHeartbeatResponse* store_heartbeat_;
  ::pdpb::ReportSplitResponse* report_split_;
  ::pdpb::GetRegionResponse* get_region_by_id_;
  ::pdpb::GetPDMembersResponse* get_pd_members_;
  ::pdpb::AllocVolumeIdResponse* alloc_volume_id_;
  int cmd_type_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class BootstrappedError : public ::google::protobuf::Message {
 public:
  BootstrappedError();
  virtual ~BootstrappedError();

  BootstrappedError(const BootstrappedError& from);

  inline BootstrappedError& operator=(const BootstrappedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrappedError& default_instance();

  void Swap(BootstrappedError* other);

  // implements Message ----------------------------------------------

  BootstrappedError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BootstrappedError& from);
  void MergeFrom(const BootstrappedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.BootstrappedError)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static BootstrappedError* default_instance_;
};
// -------------------------------------------------------------------

class StoreIsTombstoneError : public ::google::protobuf::Message {
 public:
  StoreIsTombstoneError();
  virtual ~StoreIsTombstoneError();

  StoreIsTombstoneError(const StoreIsTombstoneError& from);

  inline StoreIsTombstoneError& operator=(const StoreIsTombstoneError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreIsTombstoneError& default_instance();

  void Swap(StoreIsTombstoneError* other);

  // implements Message ----------------------------------------------

  StoreIsTombstoneError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreIsTombstoneError& from);
  void MergeFrom(const StoreIsTombstoneError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pdpb.StoreIsTombstoneError)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static StoreIsTombstoneError* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .pdpb.BootstrappedError bootstrapped = 2;
  inline bool has_bootstrapped() const;
  inline void clear_bootstrapped();
  static const int kBootstrappedFieldNumber = 2;
  inline const ::pdpb::BootstrappedError& bootstrapped() const;
  inline ::pdpb::BootstrappedError* mutable_bootstrapped();
  inline ::pdpb::BootstrappedError* release_bootstrapped();
  inline void set_allocated_bootstrapped(::pdpb::BootstrappedError* bootstrapped);

  // optional .pdpb.StoreIsTombstoneError is_tombstone = 3;
  inline bool has_is_tombstone() const;
  inline void clear_is_tombstone();
  static const int kIsTombstoneFieldNumber = 3;
  inline const ::pdpb::StoreIsTombstoneError& is_tombstone() const;
  inline ::pdpb::StoreIsTombstoneError* mutable_is_tombstone();
  inline ::pdpb::StoreIsTombstoneError* release_is_tombstone();
  inline void set_allocated_is_tombstone(::pdpb::StoreIsTombstoneError* is_tombstone);

  // @@protoc_insertion_point(class_scope:pdpb.Error)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_bootstrapped();
  inline void clear_has_bootstrapped();
  inline void set_has_is_tombstone();
  inline void clear_has_is_tombstone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::pdpb::BootstrappedError* bootstrapped_;
  ::pdpb::StoreIsTombstoneError* is_tombstone_;
  friend void  protobuf_AddDesc_pdpb_2eproto();
  friend void protobuf_AssignDesc_pdpb_2eproto();
  friend void protobuf_ShutdownFile_pdpb_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// Leader

// optional string addr = 1;
inline bool Leader::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Leader::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Leader::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Leader::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& Leader::addr() const {
  // @@protoc_insertion_point(field_get:pdpb.Leader.addr)
  return *addr_;
}
inline void Leader::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:pdpb.Leader.addr)
}
inline void Leader::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.Leader.addr)
}
inline void Leader::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.Leader.addr)
}
inline ::std::string* Leader::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.Leader.addr)
  return addr_;
}
inline ::std::string* Leader::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Leader::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Leader.addr)
}

// optional uint64 id = 3;
inline bool Leader::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Leader::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Leader::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Leader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Leader::id() const {
  // @@protoc_insertion_point(field_get:pdpb.Leader.id)
  return id_;
}
inline void Leader::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Leader.id)
}

// -------------------------------------------------------------------

// TsoRequest

// optional uint32 count = 1;
inline bool TsoRequest::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TsoRequest::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TsoRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TsoRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TsoRequest::count() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoRequest.count)
  return count_;
}
inline void TsoRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.TsoRequest.count)
}

// -------------------------------------------------------------------

// Timestamp

// optional int64 physical = 1;
inline bool Timestamp::has_physical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_physical() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_physical() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_physical() {
  physical_ = GOOGLE_LONGLONG(0);
  clear_has_physical();
}
inline ::google::protobuf::int64 Timestamp::physical() const {
  // @@protoc_insertion_point(field_get:pdpb.Timestamp.physical)
  return physical_;
}
inline void Timestamp::set_physical(::google::protobuf::int64 value) {
  set_has_physical();
  physical_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Timestamp.physical)
}

// optional int64 logical = 2;
inline bool Timestamp::has_logical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_logical() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_logical() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_logical() {
  logical_ = GOOGLE_LONGLONG(0);
  clear_has_logical();
}
inline ::google::protobuf::int64 Timestamp::logical() const {
  // @@protoc_insertion_point(field_get:pdpb.Timestamp.logical)
  return logical_;
}
inline void Timestamp::set_logical(::google::protobuf::int64 value) {
  set_has_logical();
  logical_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Timestamp.logical)
}

// -------------------------------------------------------------------

// TsoResponse

// optional uint32 count = 1;
inline bool TsoResponse::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TsoResponse::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TsoResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TsoResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TsoResponse::count() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoResponse.count)
  return count_;
}
inline void TsoResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.TsoResponse.count)
}

// optional .pdpb.Timestamp timestamp = 2;
inline bool TsoResponse::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TsoResponse::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TsoResponse::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TsoResponse::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::pdpb::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::pdpb::Timestamp& TsoResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoResponse.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::pdpb::Timestamp* TsoResponse::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::pdpb::Timestamp;
  // @@protoc_insertion_point(field_mutable:pdpb.TsoResponse.timestamp)
  return timestamp_;
}
inline ::pdpb::Timestamp* TsoResponse::release_timestamp() {
  clear_has_timestamp();
  ::pdpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void TsoResponse::set_allocated_timestamp(::pdpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.TsoResponse.timestamp)
}

// -------------------------------------------------------------------

// BootstrapRequest

// optional .metapb.Store store = 1;
inline bool BootstrapRequest::has_store() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootstrapRequest::set_has_store() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BootstrapRequest::clear_has_store() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BootstrapRequest::clear_store() {
  if (store_ != NULL) store_->::metapb::Store::Clear();
  clear_has_store();
}
inline const ::metapb::Store& BootstrapRequest::store() const {
  // @@protoc_insertion_point(field_get:pdpb.BootstrapRequest.store)
  return store_ != NULL ? *store_ : *default_instance_->store_;
}
inline ::metapb::Store* BootstrapRequest::mutable_store() {
  set_has_store();
  if (store_ == NULL) store_ = new ::metapb::Store;
  // @@protoc_insertion_point(field_mutable:pdpb.BootstrapRequest.store)
  return store_;
}
inline ::metapb::Store* BootstrapRequest::release_store() {
  clear_has_store();
  ::metapb::Store* temp = store_;
  store_ = NULL;
  return temp;
}
inline void BootstrapRequest::set_allocated_store(::metapb::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    set_has_store();
  } else {
    clear_has_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.BootstrapRequest.store)
}

// optional .metapb.Region region = 2;
inline bool BootstrapRequest::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BootstrapRequest::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BootstrapRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BootstrapRequest::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& BootstrapRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.BootstrapRequest.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* BootstrapRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:pdpb.BootstrapRequest.region)
  return region_;
}
inline ::metapb::Region* BootstrapRequest::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void BootstrapRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.BootstrapRequest.region)
}

// -------------------------------------------------------------------

// BootstrapResponse

// -------------------------------------------------------------------

// IsBootstrappedRequest

// -------------------------------------------------------------------

// IsBootstrappedResponse

// optional bool bootstrapped = 1;
inline bool IsBootstrappedResponse::has_bootstrapped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsBootstrappedResponse::set_has_bootstrapped() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsBootstrappedResponse::clear_has_bootstrapped() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsBootstrappedResponse::clear_bootstrapped() {
  bootstrapped_ = false;
  clear_has_bootstrapped();
}
inline bool IsBootstrappedResponse::bootstrapped() const {
  // @@protoc_insertion_point(field_get:pdpb.IsBootstrappedResponse.bootstrapped)
  return bootstrapped_;
}
inline void IsBootstrappedResponse::set_bootstrapped(bool value) {
  set_has_bootstrapped();
  bootstrapped_ = value;
  // @@protoc_insertion_point(field_set:pdpb.IsBootstrappedResponse.bootstrapped)
}

// -------------------------------------------------------------------

// AllocIdRequest

// -------------------------------------------------------------------

// AllocIdResponse

// optional uint64 id = 1;
inline bool AllocIdResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllocIdResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllocIdResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllocIdResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AllocIdResponse::id() const {
  // @@protoc_insertion_point(field_get:pdpb.AllocIdResponse.id)
  return id_;
}
inline void AllocIdResponse::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.AllocIdResponse.id)
}

// -------------------------------------------------------------------

// AllocVolumeIdRequest

// -------------------------------------------------------------------

// AllocVolumeIdResponse

// optional uint64 id = 1;
inline bool AllocVolumeIdResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllocVolumeIdResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllocVolumeIdResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllocVolumeIdResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AllocVolumeIdResponse::id() const {
  // @@protoc_insertion_point(field_get:pdpb.AllocVolumeIdResponse.id)
  return id_;
}
inline void AllocVolumeIdResponse::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.AllocVolumeIdResponse.id)
}

// -------------------------------------------------------------------

// GetStoreRequest

// optional uint64 store_id = 1;
inline bool GetStoreRequest::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStoreRequest::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStoreRequest::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStoreRequest::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
  clear_has_store_id();
}
inline ::google::protobuf::uint64 GetStoreRequest::store_id() const {
  // @@protoc_insertion_point(field_get:pdpb.GetStoreRequest.store_id)
  return store_id_;
}
inline void GetStoreRequest::set_store_id(::google::protobuf::uint64 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.GetStoreRequest.store_id)
}

// -------------------------------------------------------------------

// GetStoreResponse

// optional .metapb.Store store = 1;
inline bool GetStoreResponse::has_store() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStoreResponse::set_has_store() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStoreResponse::clear_has_store() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStoreResponse::clear_store() {
  if (store_ != NULL) store_->::metapb::Store::Clear();
  clear_has_store();
}
inline const ::metapb::Store& GetStoreResponse::store() const {
  // @@protoc_insertion_point(field_get:pdpb.GetStoreResponse.store)
  return store_ != NULL ? *store_ : *default_instance_->store_;
}
inline ::metapb::Store* GetStoreResponse::mutable_store() {
  set_has_store();
  if (store_ == NULL) store_ = new ::metapb::Store;
  // @@protoc_insertion_point(field_mutable:pdpb.GetStoreResponse.store)
  return store_;
}
inline ::metapb::Store* GetStoreResponse::release_store() {
  clear_has_store();
  ::metapb::Store* temp = store_;
  store_ = NULL;
  return temp;
}
inline void GetStoreResponse::set_allocated_store(::metapb::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    set_has_store();
  } else {
    clear_has_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetStoreResponse.store)
}

// -------------------------------------------------------------------

// GetRegionRequest

// optional bytes region_key = 1;
inline bool GetRegionRequest::has_region_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegionRequest::set_has_region_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegionRequest::clear_has_region_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegionRequest::clear_region_key() {
  if (region_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_key_->clear();
  }
  clear_has_region_key();
}
inline const ::std::string& GetRegionRequest::region_key() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionRequest.region_key)
  return *region_key_;
}
inline void GetRegionRequest::set_region_key(const ::std::string& value) {
  set_has_region_key();
  if (region_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_key_ = new ::std::string;
  }
  region_key_->assign(value);
  // @@protoc_insertion_point(field_set:pdpb.GetRegionRequest.region_key)
}
inline void GetRegionRequest::set_region_key(const char* value) {
  set_has_region_key();
  if (region_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_key_ = new ::std::string;
  }
  region_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.GetRegionRequest.region_key)
}
inline void GetRegionRequest::set_region_key(const void* value, size_t size) {
  set_has_region_key();
  if (region_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_key_ = new ::std::string;
  }
  region_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.GetRegionRequest.region_key)
}
inline ::std::string* GetRegionRequest::mutable_region_key() {
  set_has_region_key();
  if (region_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    region_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionRequest.region_key)
  return region_key_;
}
inline ::std::string* GetRegionRequest::release_region_key() {
  clear_has_region_key();
  if (region_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = region_key_;
    region_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRegionRequest::set_allocated_region_key(::std::string* region_key) {
  if (region_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_key_;
  }
  if (region_key) {
    set_has_region_key();
    region_key_ = region_key;
  } else {
    clear_has_region_key();
    region_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionRequest.region_key)
}

// -------------------------------------------------------------------

// GetRegionResponse

// optional .metapb.Region region = 1;
inline bool GetRegionResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegionResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegionResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegionResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& GetRegionResponse::region() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionResponse.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* GetRegionResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionResponse.region)
  return region_;
}
inline ::metapb::Region* GetRegionResponse::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void GetRegionResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionResponse.region)
}

// optional .metapb.Peer leader = 2;
inline bool GetRegionResponse::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRegionResponse::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRegionResponse::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRegionResponse::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
inline const ::metapb::Peer& GetRegionResponse::leader() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionResponse.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::metapb::Peer* GetRegionResponse::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionResponse.leader)
  return leader_;
}
inline ::metapb::Peer* GetRegionResponse::release_leader() {
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void GetRegionResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionResponse.leader)
}

// -------------------------------------------------------------------

// GetRegionByIDRequest

// optional uint64 region_id = 1;
inline bool GetRegionByIDRequest::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegionByIDRequest::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegionByIDRequest::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegionByIDRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
inline ::google::protobuf::uint64 GetRegionByIDRequest::region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionByIDRequest.region_id)
  return region_id_;
}
inline void GetRegionByIDRequest::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.GetRegionByIDRequest.region_id)
}

// -------------------------------------------------------------------

// GetClusterConfigRequest

// -------------------------------------------------------------------

// GetClusterConfigResponse

// optional .metapb.Cluster cluster = 1;
inline bool GetClusterConfigResponse::has_cluster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetClusterConfigResponse::set_has_cluster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetClusterConfigResponse::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetClusterConfigResponse::clear_cluster() {
  if (cluster_ != NULL) cluster_->::metapb::Cluster::Clear();
  clear_has_cluster();
}
inline const ::metapb::Cluster& GetClusterConfigResponse::cluster() const {
  // @@protoc_insertion_point(field_get:pdpb.GetClusterConfigResponse.cluster)
  return cluster_ != NULL ? *cluster_ : *default_instance_->cluster_;
}
inline ::metapb::Cluster* GetClusterConfigResponse::mutable_cluster() {
  set_has_cluster();
  if (cluster_ == NULL) cluster_ = new ::metapb::Cluster;
  // @@protoc_insertion_point(field_mutable:pdpb.GetClusterConfigResponse.cluster)
  return cluster_;
}
inline ::metapb::Cluster* GetClusterConfigResponse::release_cluster() {
  clear_has_cluster();
  ::metapb::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline void GetClusterConfigResponse::set_allocated_cluster(::metapb::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    set_has_cluster();
  } else {
    clear_has_cluster();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetClusterConfigResponse.cluster)
}

// -------------------------------------------------------------------

// PutStoreRequest

// optional .metapb.Store store = 1;
inline bool PutStoreRequest::has_store() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutStoreRequest::set_has_store() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutStoreRequest::clear_has_store() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutStoreRequest::clear_store() {
  if (store_ != NULL) store_->::metapb::Store::Clear();
  clear_has_store();
}
inline const ::metapb::Store& PutStoreRequest::store() const {
  // @@protoc_insertion_point(field_get:pdpb.PutStoreRequest.store)
  return store_ != NULL ? *store_ : *default_instance_->store_;
}
inline ::metapb::Store* PutStoreRequest::mutable_store() {
  set_has_store();
  if (store_ == NULL) store_ = new ::metapb::Store;
  // @@protoc_insertion_point(field_mutable:pdpb.PutStoreRequest.store)
  return store_;
}
inline ::metapb::Store* PutStoreRequest::release_store() {
  clear_has_store();
  ::metapb::Store* temp = store_;
  store_ = NULL;
  return temp;
}
inline void PutStoreRequest::set_allocated_store(::metapb::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    set_has_store();
  } else {
    clear_has_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutStoreRequest.store)
}

// -------------------------------------------------------------------

// PutStoreResponse

// -------------------------------------------------------------------

// PDMember

// optional string name = 1;
inline bool PDMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PDMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PDMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PDMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PDMember::name() const {
  // @@protoc_insertion_point(field_get:pdpb.PDMember.name)
  return *name_;
}
inline void PDMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pdpb.PDMember.name)
}
inline void PDMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.PDMember.name)
}
inline void PDMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.PDMember.name)
}
inline ::std::string* PDMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PDMember.name)
  return name_;
}
inline ::std::string* PDMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PDMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PDMember.name)
}

// repeated string client_urls = 2;
inline int PDMember::client_urls_size() const {
  return client_urls_.size();
}
inline void PDMember::clear_client_urls() {
  client_urls_.Clear();
}
inline const ::std::string& PDMember::client_urls(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.PDMember.client_urls)
  return client_urls_.Get(index);
}
inline ::std::string* PDMember::mutable_client_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.PDMember.client_urls)
  return client_urls_.Mutable(index);
}
inline void PDMember::set_client_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pdpb.PDMember.client_urls)
  client_urls_.Mutable(index)->assign(value);
}
inline void PDMember::set_client_urls(int index, const char* value) {
  client_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.PDMember.client_urls)
}
inline void PDMember::set_client_urls(int index, const char* value, size_t size) {
  client_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.PDMember.client_urls)
}
inline ::std::string* PDMember::add_client_urls() {
  return client_urls_.Add();
}
inline void PDMember::add_client_urls(const ::std::string& value) {
  client_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pdpb.PDMember.client_urls)
}
inline void PDMember::add_client_urls(const char* value) {
  client_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pdpb.PDMember.client_urls)
}
inline void PDMember::add_client_urls(const char* value, size_t size) {
  client_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pdpb.PDMember.client_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PDMember::client_urls() const {
  // @@protoc_insertion_point(field_list:pdpb.PDMember.client_urls)
  return client_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PDMember::mutable_client_urls() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.PDMember.client_urls)
  return &client_urls_;
}

// repeated string peer_urls = 3;
inline int PDMember::peer_urls_size() const {
  return peer_urls_.size();
}
inline void PDMember::clear_peer_urls() {
  peer_urls_.Clear();
}
inline const ::std::string& PDMember::peer_urls(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.PDMember.peer_urls)
  return peer_urls_.Get(index);
}
inline ::std::string* PDMember::mutable_peer_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.PDMember.peer_urls)
  return peer_urls_.Mutable(index);
}
inline void PDMember::set_peer_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pdpb.PDMember.peer_urls)
  peer_urls_.Mutable(index)->assign(value);
}
inline void PDMember::set_peer_urls(int index, const char* value) {
  peer_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.PDMember.peer_urls)
}
inline void PDMember::set_peer_urls(int index, const char* value, size_t size) {
  peer_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.PDMember.peer_urls)
}
inline ::std::string* PDMember::add_peer_urls() {
  return peer_urls_.Add();
}
inline void PDMember::add_peer_urls(const ::std::string& value) {
  peer_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pdpb.PDMember.peer_urls)
}
inline void PDMember::add_peer_urls(const char* value) {
  peer_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pdpb.PDMember.peer_urls)
}
inline void PDMember::add_peer_urls(const char* value, size_t size) {
  peer_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pdpb.PDMember.peer_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PDMember::peer_urls() const {
  // @@protoc_insertion_point(field_list:pdpb.PDMember.peer_urls)
  return peer_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PDMember::mutable_peer_urls() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.PDMember.peer_urls)
  return &peer_urls_;
}

// -------------------------------------------------------------------

// GetPDMembersRequest

// -------------------------------------------------------------------

// GetPDMembersResponse

// repeated .pdpb.PDMember members = 1;
inline int GetPDMembersResponse::members_size() const {
  return members_.size();
}
inline void GetPDMembersResponse::clear_members() {
  members_.Clear();
}
inline const ::pdpb::PDMember& GetPDMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.GetPDMembersResponse.members)
  return members_.Get(index);
}
inline ::pdpb::PDMember* GetPDMembersResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.GetPDMembersResponse.members)
  return members_.Mutable(index);
}
inline ::pdpb::PDMember* GetPDMembersResponse::add_members() {
  // @@protoc_insertion_point(field_add:pdpb.GetPDMembersResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pdpb::PDMember >&
GetPDMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:pdpb.GetPDMembersResponse.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::pdpb::PDMember >*
GetPDMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.GetPDMembersResponse.members)
  return &members_;
}

// -------------------------------------------------------------------

// PeerStats

// optional .metapb.Peer peer = 1;
inline bool PeerStats::has_peer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerStats::set_has_peer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerStats::clear_has_peer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerStats::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
inline const ::metapb::Peer& PeerStats::peer() const {
  // @@protoc_insertion_point(field_get:pdpb.PeerStats.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* PeerStats::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:pdpb.PeerStats.peer)
  return peer_;
}
inline ::metapb::Peer* PeerStats::release_peer() {
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void PeerStats::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PeerStats.peer)
}

// optional uint64 down_seconds = 2;
inline bool PeerStats::has_down_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerStats::set_has_down_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeerStats::clear_has_down_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeerStats::clear_down_seconds() {
  down_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_down_seconds();
}
inline ::google::protobuf::uint64 PeerStats::down_seconds() const {
  // @@protoc_insertion_point(field_get:pdpb.PeerStats.down_seconds)
  return down_seconds_;
}
inline void PeerStats::set_down_seconds(::google::protobuf::uint64 value) {
  set_has_down_seconds();
  down_seconds_ = value;
  // @@protoc_insertion_point(field_set:pdpb.PeerStats.down_seconds)
}

// -------------------------------------------------------------------

// RegionHeartbeatRequest

// optional .metapb.Region region = 1;
inline bool RegionHeartbeatRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionHeartbeatRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionHeartbeatRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionHeartbeatRequest::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& RegionHeartbeatRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* RegionHeartbeatRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.region)
  return region_;
}
inline ::metapb::Region* RegionHeartbeatRequest::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void RegionHeartbeatRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatRequest.region)
}

// optional .metapb.Peer leader = 2;
inline bool RegionHeartbeatRequest::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionHeartbeatRequest::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionHeartbeatRequest::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionHeartbeatRequest::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
inline const ::metapb::Peer& RegionHeartbeatRequest::leader() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::metapb::Peer* RegionHeartbeatRequest::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.leader)
  return leader_;
}
inline ::metapb::Peer* RegionHeartbeatRequest::release_leader() {
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void RegionHeartbeatRequest::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatRequest.leader)
}

// repeated .pdpb.PeerStats down_peers = 3;
inline int RegionHeartbeatRequest::down_peers_size() const {
  return down_peers_.size();
}
inline void RegionHeartbeatRequest::clear_down_peers() {
  down_peers_.Clear();
}
inline const ::pdpb::PeerStats& RegionHeartbeatRequest::down_peers(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_.Get(index);
}
inline ::pdpb::PeerStats* RegionHeartbeatRequest::mutable_down_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_.Mutable(index);
}
inline ::pdpb::PeerStats* RegionHeartbeatRequest::add_down_peers() {
  // @@protoc_insertion_point(field_add:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats >&
RegionHeartbeatRequest::down_peers() const {
  // @@protoc_insertion_point(field_list:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats >*
RegionHeartbeatRequest::mutable_down_peers() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.RegionHeartbeatRequest.down_peers)
  return &down_peers_;
}

// repeated .metapb.Peer pending_peers = 4;
inline int RegionHeartbeatRequest::pending_peers_size() const {
  return pending_peers_.size();
}
inline void RegionHeartbeatRequest::clear_pending_peers() {
  pending_peers_.Clear();
}
inline const ::metapb::Peer& RegionHeartbeatRequest::pending_peers(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_.Get(index);
}
inline ::metapb::Peer* RegionHeartbeatRequest::mutable_pending_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_.Mutable(index);
}
inline ::metapb::Peer* RegionHeartbeatRequest::add_pending_peers() {
  // @@protoc_insertion_point(field_add:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
RegionHeartbeatRequest::pending_peers() const {
  // @@protoc_insertion_point(field_list:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
RegionHeartbeatRequest::mutable_pending_peers() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.RegionHeartbeatRequest.pending_peers)
  return &pending_peers_;
}

// optional uint64 bytes_written = 5;
inline bool RegionHeartbeatRequest::has_bytes_written() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegionHeartbeatRequest::set_has_bytes_written() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegionHeartbeatRequest::clear_has_bytes_written() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegionHeartbeatRequest::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_written();
}
inline ::google::protobuf::uint64 RegionHeartbeatRequest::bytes_written() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.bytes_written)
  return bytes_written_;
}
inline void RegionHeartbeatRequest::set_bytes_written(::google::protobuf::uint64 value) {
  set_has_bytes_written();
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.bytes_written)
}

// optional uint64 bytes_read = 6;
inline bool RegionHeartbeatRequest::has_bytes_read() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionHeartbeatRequest::set_has_bytes_read() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionHeartbeatRequest::clear_has_bytes_read() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionHeartbeatRequest::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_read();
}
inline ::google::protobuf::uint64 RegionHeartbeatRequest::bytes_read() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.bytes_read)
  return bytes_read_;
}
inline void RegionHeartbeatRequest::set_bytes_read(::google::protobuf::uint64 value) {
  set_has_bytes_read();
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.bytes_read)
}

// optional uint64 keys_written = 7;
inline bool RegionHeartbeatRequest::has_keys_written() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionHeartbeatRequest::set_has_keys_written() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionHeartbeatRequest::clear_has_keys_written() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionHeartbeatRequest::clear_keys_written() {
  keys_written_ = GOOGLE_ULONGLONG(0);
  clear_has_keys_written();
}
inline ::google::protobuf::uint64 RegionHeartbeatRequest::keys_written() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.keys_written)
  return keys_written_;
}
inline void RegionHeartbeatRequest::set_keys_written(::google::protobuf::uint64 value) {
  set_has_keys_written();
  keys_written_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.keys_written)
}

// optional uint64 keys_read = 8;
inline bool RegionHeartbeatRequest::has_keys_read() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionHeartbeatRequest::set_has_keys_read() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionHeartbeatRequest::clear_has_keys_read() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionHeartbeatRequest::clear_keys_read() {
  keys_read_ = GOOGLE_ULONGLONG(0);
  clear_has_keys_read();
}
inline ::google::protobuf::uint64 RegionHeartbeatRequest::keys_read() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.keys_read)
  return keys_read_;
}
inline void RegionHeartbeatRequest::set_keys_read(::google::protobuf::uint64 value) {
  set_has_keys_read();
  keys_read_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.keys_read)
}

// -------------------------------------------------------------------

// ChangePeer

// optional .eraftpb.ConfChangeType change_type = 1;
inline bool ChangePeer::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePeer::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePeer::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePeer::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
inline ::eraftpb::ConfChangeType ChangePeer::change_type() const {
  // @@protoc_insertion_point(field_get:pdpb.ChangePeer.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
inline void ChangePeer::set_change_type(::eraftpb::ConfChangeType value) {
  assert(::eraftpb::ConfChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:pdpb.ChangePeer.change_type)
}

// optional .metapb.Peer peer = 2;
inline bool ChangePeer::has_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePeer::set_has_peer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePeer::clear_has_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePeer::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
inline const ::metapb::Peer& ChangePeer::peer() const {
  // @@protoc_insertion_point(field_get:pdpb.ChangePeer.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* ChangePeer::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:pdpb.ChangePeer.peer)
  return peer_;
}
inline ::metapb::Peer* ChangePeer::release_peer() {
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ChangePeer::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ChangePeer.peer)
}

// -------------------------------------------------------------------

// TransferLeader

// optional .metapb.Peer peer = 1;
inline bool TransferLeader::has_peer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferLeader::set_has_peer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferLeader::clear_has_peer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferLeader::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
inline const ::metapb::Peer& TransferLeader::peer() const {
  // @@protoc_insertion_point(field_get:pdpb.TransferLeader.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* TransferLeader::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:pdpb.TransferLeader.peer)
  return peer_;
}
inline ::metapb::Peer* TransferLeader::release_peer() {
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void TransferLeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.TransferLeader.peer)
}

// -------------------------------------------------------------------

// RegionHeartbeatResponse

// optional .pdpb.ChangePeer change_peer = 1;
inline bool RegionHeartbeatResponse::has_change_peer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionHeartbeatResponse::set_has_change_peer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionHeartbeatResponse::clear_has_change_peer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionHeartbeatResponse::clear_change_peer() {
  if (change_peer_ != NULL) change_peer_->::pdpb::ChangePeer::Clear();
  clear_has_change_peer();
}
inline const ::pdpb::ChangePeer& RegionHeartbeatResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
inline ::pdpb::ChangePeer* RegionHeartbeatResponse::mutable_change_peer() {
  set_has_change_peer();
  if (change_peer_ == NULL) change_peer_ = new ::pdpb::ChangePeer;
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.change_peer)
  return change_peer_;
}
inline ::pdpb::ChangePeer* RegionHeartbeatResponse::release_change_peer() {
  clear_has_change_peer();
  ::pdpb::ChangePeer* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline void RegionHeartbeatResponse::set_allocated_change_peer(::pdpb::ChangePeer* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    set_has_change_peer();
  } else {
    clear_has_change_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.change_peer)
}

// optional .pdpb.TransferLeader transfer_leader = 2;
inline bool RegionHeartbeatResponse::has_transfer_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionHeartbeatResponse::set_has_transfer_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionHeartbeatResponse::clear_has_transfer_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionHeartbeatResponse::clear_transfer_leader() {
  if (transfer_leader_ != NULL) transfer_leader_->::pdpb::TransferLeader::Clear();
  clear_has_transfer_leader();
}
inline const ::pdpb::TransferLeader& RegionHeartbeatResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
inline ::pdpb::TransferLeader* RegionHeartbeatResponse::mutable_transfer_leader() {
  set_has_transfer_leader();
  if (transfer_leader_ == NULL) transfer_leader_ = new ::pdpb::TransferLeader;
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.transfer_leader)
  return transfer_leader_;
}
inline ::pdpb::TransferLeader* RegionHeartbeatResponse::release_transfer_leader() {
  clear_has_transfer_leader();
  ::pdpb::TransferLeader* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline void RegionHeartbeatResponse::set_allocated_transfer_leader(::pdpb::TransferLeader* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    set_has_transfer_leader();
  } else {
    clear_has_transfer_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.transfer_leader)
}

// -------------------------------------------------------------------

// PutClusterConfigRequest

// optional .metapb.Cluster cluster = 1;
inline bool PutClusterConfigRequest::has_cluster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutClusterConfigRequest::set_has_cluster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutClusterConfigRequest::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutClusterConfigRequest::clear_cluster() {
  if (cluster_ != NULL) cluster_->::metapb::Cluster::Clear();
  clear_has_cluster();
}
inline const ::metapb::Cluster& PutClusterConfigRequest::cluster() const {
  // @@protoc_insertion_point(field_get:pdpb.PutClusterConfigRequest.cluster)
  return cluster_ != NULL ? *cluster_ : *default_instance_->cluster_;
}
inline ::metapb::Cluster* PutClusterConfigRequest::mutable_cluster() {
  set_has_cluster();
  if (cluster_ == NULL) cluster_ = new ::metapb::Cluster;
  // @@protoc_insertion_point(field_mutable:pdpb.PutClusterConfigRequest.cluster)
  return cluster_;
}
inline ::metapb::Cluster* PutClusterConfigRequest::release_cluster() {
  clear_has_cluster();
  ::metapb::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline void PutClusterConfigRequest::set_allocated_cluster(::metapb::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    set_has_cluster();
  } else {
    clear_has_cluster();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutClusterConfigRequest.cluster)
}

// -------------------------------------------------------------------

// PutClusterConfigResponse

// -------------------------------------------------------------------

// AskSplitRequest

// optional .metapb.Region region = 1;
inline bool AskSplitRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskSplitRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskSplitRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskSplitRequest::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& AskSplitRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitRequest.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* AskSplitRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:pdpb.AskSplitRequest.region)
  return region_;
}
inline ::metapb::Region* AskSplitRequest::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void AskSplitRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskSplitRequest.region)
}

// -------------------------------------------------------------------

// AskSplitResponse

// optional uint64 new_region_id = 1;
inline bool AskSplitResponse::has_new_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskSplitResponse::set_has_new_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskSplitResponse::clear_has_new_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskSplitResponse::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_new_region_id();
}
inline ::google::protobuf::uint64 AskSplitResponse::new_region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitResponse.new_region_id)
  return new_region_id_;
}
inline void AskSplitResponse::set_new_region_id(::google::protobuf::uint64 value) {
  set_has_new_region_id();
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.AskSplitResponse.new_region_id)
}

// repeated uint64 new_peer_ids = 2;
inline int AskSplitResponse::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
inline void AskSplitResponse::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
inline ::google::protobuf::uint64 AskSplitResponse::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_.Get(index);
}
inline void AskSplitResponse::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pdpb.AskSplitResponse.new_peer_ids)
}
inline void AskSplitResponse::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:pdpb.AskSplitResponse.new_peer_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AskSplitResponse::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:pdpb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AskSplitResponse::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.AskSplitResponse.new_peer_ids)
  return &new_peer_ids_;
}

// -------------------------------------------------------------------

// StoreStats

// optional uint64 store_id = 1;
inline bool StoreStats::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreStats::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreStats::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreStats::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
  clear_has_store_id();
}
inline ::google::protobuf::uint64 StoreStats::store_id() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.store_id)
  return store_id_;
}
inline void StoreStats::set_store_id(::google::protobuf::uint64 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.store_id)
}

// optional uint64 capacity = 2;
inline bool StoreStats::has_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreStats::set_has_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreStats::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreStats::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
  clear_has_capacity();
}
inline ::google::protobuf::uint64 StoreStats::capacity() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.capacity)
  return capacity_;
}
inline void StoreStats::set_capacity(::google::protobuf::uint64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.capacity)
}

// optional uint64 available = 3;
inline bool StoreStats::has_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreStats::set_has_available() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreStats::clear_has_available() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreStats::clear_available() {
  available_ = GOOGLE_ULONGLONG(0);
  clear_has_available();
}
inline ::google::protobuf::uint64 StoreStats::available() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.available)
  return available_;
}
inline void StoreStats::set_available(::google::protobuf::uint64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.available)
}

// optional uint32 region_count = 4;
inline bool StoreStats::has_region_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreStats::set_has_region_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreStats::clear_has_region_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreStats::clear_region_count() {
  region_count_ = 0u;
  clear_has_region_count();
}
inline ::google::protobuf::uint32 StoreStats::region_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.region_count)
  return region_count_;
}
inline void StoreStats::set_region_count(::google::protobuf::uint32 value) {
  set_has_region_count();
  region_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.region_count)
}

// optional uint32 sending_snap_count = 5;
inline bool StoreStats::has_sending_snap_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoreStats::set_has_sending_snap_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoreStats::clear_has_sending_snap_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoreStats::clear_sending_snap_count() {
  sending_snap_count_ = 0u;
  clear_has_sending_snap_count();
}
inline ::google::protobuf::uint32 StoreStats::sending_snap_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.sending_snap_count)
  return sending_snap_count_;
}
inline void StoreStats::set_sending_snap_count(::google::protobuf::uint32 value) {
  set_has_sending_snap_count();
  sending_snap_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.sending_snap_count)
}

// optional uint32 receiving_snap_count = 6;
inline bool StoreStats::has_receiving_snap_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoreStats::set_has_receiving_snap_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StoreStats::clear_has_receiving_snap_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StoreStats::clear_receiving_snap_count() {
  receiving_snap_count_ = 0u;
  clear_has_receiving_snap_count();
}
inline ::google::protobuf::uint32 StoreStats::receiving_snap_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.receiving_snap_count)
  return receiving_snap_count_;
}
inline void StoreStats::set_receiving_snap_count(::google::protobuf::uint32 value) {
  set_has_receiving_snap_count();
  receiving_snap_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.receiving_snap_count)
}

// optional uint32 start_time = 7;
inline bool StoreStats::has_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StoreStats::set_has_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StoreStats::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StoreStats::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 StoreStats::start_time() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.start_time)
  return start_time_;
}
inline void StoreStats::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.start_time)
}

// optional uint32 applying_snap_count = 8;
inline bool StoreStats::has_applying_snap_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StoreStats::set_has_applying_snap_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StoreStats::clear_has_applying_snap_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StoreStats::clear_applying_snap_count() {
  applying_snap_count_ = 0u;
  clear_has_applying_snap_count();
}
inline ::google::protobuf::uint32 StoreStats::applying_snap_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.applying_snap_count)
  return applying_snap_count_;
}
inline void StoreStats::set_applying_snap_count(::google::protobuf::uint32 value) {
  set_has_applying_snap_count();
  applying_snap_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.applying_snap_count)
}

// optional bool is_busy = 9;
inline bool StoreStats::has_is_busy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StoreStats::set_has_is_busy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StoreStats::clear_has_is_busy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StoreStats::clear_is_busy() {
  is_busy_ = false;
  clear_has_is_busy();
}
inline bool StoreStats::is_busy() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.is_busy)
  return is_busy_;
}
inline void StoreStats::set_is_busy(bool value) {
  set_has_is_busy();
  is_busy_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.is_busy)
}

// -------------------------------------------------------------------

// StoreHeartbeatRequest

// optional .pdpb.StoreStats stats = 1;
inline bool StoreHeartbeatRequest::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreHeartbeatRequest::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreHeartbeatRequest::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreHeartbeatRequest::clear_stats() {
  if (stats_ != NULL) stats_->::pdpb::StoreStats::Clear();
  clear_has_stats();
}
inline const ::pdpb::StoreStats& StoreHeartbeatRequest::stats() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreHeartbeatRequest.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::pdpb::StoreStats* StoreHeartbeatRequest::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::pdpb::StoreStats;
  // @@protoc_insertion_point(field_mutable:pdpb.StoreHeartbeatRequest.stats)
  return stats_;
}
inline ::pdpb::StoreStats* StoreHeartbeatRequest::release_stats() {
  clear_has_stats();
  ::pdpb::StoreStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void StoreHeartbeatRequest::set_allocated_stats(::pdpb::StoreStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.StoreHeartbeatRequest.stats)
}

// -------------------------------------------------------------------

// StoreHeartbeatResponse

// -------------------------------------------------------------------

// ReportSplitRequest

// optional .metapb.Region left = 1;
inline bool ReportSplitRequest::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportSplitRequest::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportSplitRequest::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportSplitRequest::clear_left() {
  if (left_ != NULL) left_->::metapb::Region::Clear();
  clear_has_left();
}
inline const ::metapb::Region& ReportSplitRequest::left() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportSplitRequest.left)
  return left_ != NULL ? *left_ : *default_instance_->left_;
}
inline ::metapb::Region* ReportSplitRequest::mutable_left() {
  set_has_left();
  if (left_ == NULL) left_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:pdpb.ReportSplitRequest.left)
  return left_;
}
inline ::metapb::Region* ReportSplitRequest::release_left() {
  clear_has_left();
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
inline void ReportSplitRequest::set_allocated_left(::metapb::Region* left) {
  delete left_;
  left_ = left;
  if (left) {
    set_has_left();
  } else {
    clear_has_left();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportSplitRequest.left)
}

// optional .metapb.Region right = 2;
inline bool ReportSplitRequest::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportSplitRequest::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportSplitRequest::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportSplitRequest::clear_right() {
  if (right_ != NULL) right_->::metapb::Region::Clear();
  clear_has_right();
}
inline const ::metapb::Region& ReportSplitRequest::right() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportSplitRequest.right)
  return right_ != NULL ? *right_ : *default_instance_->right_;
}
inline ::metapb::Region* ReportSplitRequest::mutable_right() {
  set_has_right();
  if (right_ == NULL) right_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:pdpb.ReportSplitRequest.right)
  return right_;
}
inline ::metapb::Region* ReportSplitRequest::release_right() {
  clear_has_right();
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
inline void ReportSplitRequest::set_allocated_right(::metapb::Region* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportSplitRequest.right)
}

// -------------------------------------------------------------------

// ReportSplitResponse

// -------------------------------------------------------------------

// RequestHeader

// optional bytes uuid = 1;
inline bool RequestHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestHeader::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& RequestHeader::uuid() const {
  // @@protoc_insertion_point(field_get:pdpb.RequestHeader.uuid)
  return *uuid_;
}
inline void RequestHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:pdpb.RequestHeader.uuid)
}
inline void RequestHeader::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.RequestHeader.uuid)
}
inline void RequestHeader::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.RequestHeader.uuid)
}
inline ::std::string* RequestHeader::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RequestHeader.uuid)
  return uuid_;
}
inline ::std::string* RequestHeader::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RequestHeader.uuid)
}

// optional uint64 cluster_id = 2;
inline bool RequestHeader::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestHeader::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestHeader::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cluster_id();
}
inline ::google::protobuf::uint64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:pdpb.RequestHeader.cluster_id)
  return cluster_id_;
}
inline void RequestHeader::set_cluster_id(::google::protobuf::uint64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RequestHeader.cluster_id)
}

// -------------------------------------------------------------------

// ResponseHeader

// optional bytes uuid = 1;
inline bool ResponseHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHeader::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:pdpb.ResponseHeader.uuid)
  return *uuid_;
}
inline void ResponseHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:pdpb.ResponseHeader.uuid)
}
inline void ResponseHeader::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.ResponseHeader.uuid)
}
inline void ResponseHeader::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.ResponseHeader.uuid)
}
inline ::std::string* ResponseHeader::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ResponseHeader.uuid)
  return uuid_;
}
inline ::std::string* ResponseHeader::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ResponseHeader.uuid)
}

// optional uint64 cluster_id = 2;
inline bool ResponseHeader::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeader::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHeader::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cluster_id();
}
inline ::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:pdpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
inline void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.ResponseHeader.cluster_id)
}

// optional .pdpb.Error error = 3;
inline bool ResponseHeader::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseHeader::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseHeader::clear_error() {
  if (error_ != NULL) error_->::pdpb::Error::Clear();
  clear_has_error();
}
inline const ::pdpb::Error& ResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:pdpb.ResponseHeader.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::pdpb::Error* ResponseHeader::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::pdpb::Error;
  // @@protoc_insertion_point(field_mutable:pdpb.ResponseHeader.error)
  return error_;
}
inline ::pdpb::Error* ResponseHeader::release_error() {
  clear_has_error();
  ::pdpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ResponseHeader::set_allocated_error(::pdpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ResponseHeader.error)
}

// -------------------------------------------------------------------

// Request

// optional .pdpb.RequestHeader header = 1;
inline bool Request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_header() {
  if (header_ != NULL) header_->::pdpb::RequestHeader::Clear();
  clear_has_header();
}
inline const ::pdpb::RequestHeader& Request::header() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::pdpb::RequestHeader* Request::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::pdpb::RequestHeader;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.header)
  return header_;
}
inline ::pdpb::RequestHeader* Request::release_header() {
  clear_has_header();
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Request::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.header)
}

// optional .pdpb.CommandType cmd_type = 2;
inline bool Request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::pdpb::CommandType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.cmd_type)
  return static_cast< ::pdpb::CommandType >(cmd_type_);
}
inline void Request::set_cmd_type(::pdpb::CommandType value) {
  assert(::pdpb::CommandType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Request.cmd_type)
}

// optional .pdpb.TsoRequest tso = 3;
inline bool Request::has_tso() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_tso() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_tso() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_tso() {
  if (tso_ != NULL) tso_->::pdpb::TsoRequest::Clear();
  clear_has_tso();
}
inline const ::pdpb::TsoRequest& Request::tso() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.tso)
  return tso_ != NULL ? *tso_ : *default_instance_->tso_;
}
inline ::pdpb::TsoRequest* Request::mutable_tso() {
  set_has_tso();
  if (tso_ == NULL) tso_ = new ::pdpb::TsoRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.tso)
  return tso_;
}
inline ::pdpb::TsoRequest* Request::release_tso() {
  clear_has_tso();
  ::pdpb::TsoRequest* temp = tso_;
  tso_ = NULL;
  return temp;
}
inline void Request::set_allocated_tso(::pdpb::TsoRequest* tso) {
  delete tso_;
  tso_ = tso;
  if (tso) {
    set_has_tso();
  } else {
    clear_has_tso();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.tso)
}

// optional .pdpb.BootstrapRequest bootstrap = 4;
inline bool Request::has_bootstrap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_bootstrap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_bootstrap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_bootstrap() {
  if (bootstrap_ != NULL) bootstrap_->::pdpb::BootstrapRequest::Clear();
  clear_has_bootstrap();
}
inline const ::pdpb::BootstrapRequest& Request::bootstrap() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.bootstrap)
  return bootstrap_ != NULL ? *bootstrap_ : *default_instance_->bootstrap_;
}
inline ::pdpb::BootstrapRequest* Request::mutable_bootstrap() {
  set_has_bootstrap();
  if (bootstrap_ == NULL) bootstrap_ = new ::pdpb::BootstrapRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.bootstrap)
  return bootstrap_;
}
inline ::pdpb::BootstrapRequest* Request::release_bootstrap() {
  clear_has_bootstrap();
  ::pdpb::BootstrapRequest* temp = bootstrap_;
  bootstrap_ = NULL;
  return temp;
}
inline void Request::set_allocated_bootstrap(::pdpb::BootstrapRequest* bootstrap) {
  delete bootstrap_;
  bootstrap_ = bootstrap;
  if (bootstrap) {
    set_has_bootstrap();
  } else {
    clear_has_bootstrap();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.bootstrap)
}

// optional .pdpb.IsBootstrappedRequest is_bootstrapped = 5;
inline bool Request::has_is_bootstrapped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_is_bootstrapped() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_is_bootstrapped() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_is_bootstrapped() {
  if (is_bootstrapped_ != NULL) is_bootstrapped_->::pdpb::IsBootstrappedRequest::Clear();
  clear_has_is_bootstrapped();
}
inline const ::pdpb::IsBootstrappedRequest& Request::is_bootstrapped() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.is_bootstrapped)
  return is_bootstrapped_ != NULL ? *is_bootstrapped_ : *default_instance_->is_bootstrapped_;
}
inline ::pdpb::IsBootstrappedRequest* Request::mutable_is_bootstrapped() {
  set_has_is_bootstrapped();
  if (is_bootstrapped_ == NULL) is_bootstrapped_ = new ::pdpb::IsBootstrappedRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.is_bootstrapped)
  return is_bootstrapped_;
}
inline ::pdpb::IsBootstrappedRequest* Request::release_is_bootstrapped() {
  clear_has_is_bootstrapped();
  ::pdpb::IsBootstrappedRequest* temp = is_bootstrapped_;
  is_bootstrapped_ = NULL;
  return temp;
}
inline void Request::set_allocated_is_bootstrapped(::pdpb::IsBootstrappedRequest* is_bootstrapped) {
  delete is_bootstrapped_;
  is_bootstrapped_ = is_bootstrapped;
  if (is_bootstrapped) {
    set_has_is_bootstrapped();
  } else {
    clear_has_is_bootstrapped();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.is_bootstrapped)
}

// optional .pdpb.AllocIdRequest alloc_id = 6;
inline bool Request::has_alloc_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_alloc_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_alloc_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_alloc_id() {
  if (alloc_id_ != NULL) alloc_id_->::pdpb::AllocIdRequest::Clear();
  clear_has_alloc_id();
}
inline const ::pdpb::AllocIdRequest& Request::alloc_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.alloc_id)
  return alloc_id_ != NULL ? *alloc_id_ : *default_instance_->alloc_id_;
}
inline ::pdpb::AllocIdRequest* Request::mutable_alloc_id() {
  set_has_alloc_id();
  if (alloc_id_ == NULL) alloc_id_ = new ::pdpb::AllocIdRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.alloc_id)
  return alloc_id_;
}
inline ::pdpb::AllocIdRequest* Request::release_alloc_id() {
  clear_has_alloc_id();
  ::pdpb::AllocIdRequest* temp = alloc_id_;
  alloc_id_ = NULL;
  return temp;
}
inline void Request::set_allocated_alloc_id(::pdpb::AllocIdRequest* alloc_id) {
  delete alloc_id_;
  alloc_id_ = alloc_id;
  if (alloc_id) {
    set_has_alloc_id();
  } else {
    clear_has_alloc_id();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.alloc_id)
}

// optional .pdpb.GetStoreRequest get_store = 7;
inline bool Request::has_get_store() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_get_store() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_get_store() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_get_store() {
  if (get_store_ != NULL) get_store_->::pdpb::GetStoreRequest::Clear();
  clear_has_get_store();
}
inline const ::pdpb::GetStoreRequest& Request::get_store() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.get_store)
  return get_store_ != NULL ? *get_store_ : *default_instance_->get_store_;
}
inline ::pdpb::GetStoreRequest* Request::mutable_get_store() {
  set_has_get_store();
  if (get_store_ == NULL) get_store_ = new ::pdpb::GetStoreRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.get_store)
  return get_store_;
}
inline ::pdpb::GetStoreRequest* Request::release_get_store() {
  clear_has_get_store();
  ::pdpb::GetStoreRequest* temp = get_store_;
  get_store_ = NULL;
  return temp;
}
inline void Request::set_allocated_get_store(::pdpb::GetStoreRequest* get_store) {
  delete get_store_;
  get_store_ = get_store;
  if (get_store) {
    set_has_get_store();
  } else {
    clear_has_get_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.get_store)
}

// optional .pdpb.PutStoreRequest put_store = 8;
inline bool Request::has_put_store() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_put_store() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_put_store() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_put_store() {
  if (put_store_ != NULL) put_store_->::pdpb::PutStoreRequest::Clear();
  clear_has_put_store();
}
inline const ::pdpb::PutStoreRequest& Request::put_store() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.put_store)
  return put_store_ != NULL ? *put_store_ : *default_instance_->put_store_;
}
inline ::pdpb::PutStoreRequest* Request::mutable_put_store() {
  set_has_put_store();
  if (put_store_ == NULL) put_store_ = new ::pdpb::PutStoreRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.put_store)
  return put_store_;
}
inline ::pdpb::PutStoreRequest* Request::release_put_store() {
  clear_has_put_store();
  ::pdpb::PutStoreRequest* temp = put_store_;
  put_store_ = NULL;
  return temp;
}
inline void Request::set_allocated_put_store(::pdpb::PutStoreRequest* put_store) {
  delete put_store_;
  put_store_ = put_store;
  if (put_store) {
    set_has_put_store();
  } else {
    clear_has_put_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.put_store)
}

// optional .pdpb.AskSplitRequest ask_split = 9;
inline bool Request::has_ask_split() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_ask_split() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_ask_split() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_ask_split() {
  if (ask_split_ != NULL) ask_split_->::pdpb::AskSplitRequest::Clear();
  clear_has_ask_split();
}
inline const ::pdpb::AskSplitRequest& Request::ask_split() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.ask_split)
  return ask_split_ != NULL ? *ask_split_ : *default_instance_->ask_split_;
}
inline ::pdpb::AskSplitRequest* Request::mutable_ask_split() {
  set_has_ask_split();
  if (ask_split_ == NULL) ask_split_ = new ::pdpb::AskSplitRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.ask_split)
  return ask_split_;
}
inline ::pdpb::AskSplitRequest* Request::release_ask_split() {
  clear_has_ask_split();
  ::pdpb::AskSplitRequest* temp = ask_split_;
  ask_split_ = NULL;
  return temp;
}
inline void Request::set_allocated_ask_split(::pdpb::AskSplitRequest* ask_split) {
  delete ask_split_;
  ask_split_ = ask_split;
  if (ask_split) {
    set_has_ask_split();
  } else {
    clear_has_ask_split();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.ask_split)
}

// optional .pdpb.GetRegionRequest get_region = 10;
inline bool Request::has_get_region() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_get_region() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_get_region() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_get_region() {
  if (get_region_ != NULL) get_region_->::pdpb::GetRegionRequest::Clear();
  clear_has_get_region();
}
inline const ::pdpb::GetRegionRequest& Request::get_region() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.get_region)
  return get_region_ != NULL ? *get_region_ : *default_instance_->get_region_;
}
inline ::pdpb::GetRegionRequest* Request::mutable_get_region() {
  set_has_get_region();
  if (get_region_ == NULL) get_region_ = new ::pdpb::GetRegionRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.get_region)
  return get_region_;
}
inline ::pdpb::GetRegionRequest* Request::release_get_region() {
  clear_has_get_region();
  ::pdpb::GetRegionRequest* temp = get_region_;
  get_region_ = NULL;
  return temp;
}
inline void Request::set_allocated_get_region(::pdpb::GetRegionRequest* get_region) {
  delete get_region_;
  get_region_ = get_region;
  if (get_region) {
    set_has_get_region();
  } else {
    clear_has_get_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.get_region)
}

// optional .pdpb.RegionHeartbeatRequest region_heartbeat = 11;
inline bool Request::has_region_heartbeat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::set_has_region_heartbeat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Request::clear_has_region_heartbeat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Request::clear_region_heartbeat() {
  if (region_heartbeat_ != NULL) region_heartbeat_->::pdpb::RegionHeartbeatRequest::Clear();
  clear_has_region_heartbeat();
}
inline const ::pdpb::RegionHeartbeatRequest& Request::region_heartbeat() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.region_heartbeat)
  return region_heartbeat_ != NULL ? *region_heartbeat_ : *default_instance_->region_heartbeat_;
}
inline ::pdpb::RegionHeartbeatRequest* Request::mutable_region_heartbeat() {
  set_has_region_heartbeat();
  if (region_heartbeat_ == NULL) region_heartbeat_ = new ::pdpb::RegionHeartbeatRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.region_heartbeat)
  return region_heartbeat_;
}
inline ::pdpb::RegionHeartbeatRequest* Request::release_region_heartbeat() {
  clear_has_region_heartbeat();
  ::pdpb::RegionHeartbeatRequest* temp = region_heartbeat_;
  region_heartbeat_ = NULL;
  return temp;
}
inline void Request::set_allocated_region_heartbeat(::pdpb::RegionHeartbeatRequest* region_heartbeat) {
  delete region_heartbeat_;
  region_heartbeat_ = region_heartbeat;
  if (region_heartbeat) {
    set_has_region_heartbeat();
  } else {
    clear_has_region_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.region_heartbeat)
}

// optional .pdpb.GetClusterConfigRequest get_cluster_config = 12;
inline bool Request::has_get_cluster_config() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Request::set_has_get_cluster_config() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Request::clear_has_get_cluster_config() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Request::clear_get_cluster_config() {
  if (get_cluster_config_ != NULL) get_cluster_config_->::pdpb::GetClusterConfigRequest::Clear();
  clear_has_get_cluster_config();
}
inline const ::pdpb::GetClusterConfigRequest& Request::get_cluster_config() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.get_cluster_config)
  return get_cluster_config_ != NULL ? *get_cluster_config_ : *default_instance_->get_cluster_config_;
}
inline ::pdpb::GetClusterConfigRequest* Request::mutable_get_cluster_config() {
  set_has_get_cluster_config();
  if (get_cluster_config_ == NULL) get_cluster_config_ = new ::pdpb::GetClusterConfigRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.get_cluster_config)
  return get_cluster_config_;
}
inline ::pdpb::GetClusterConfigRequest* Request::release_get_cluster_config() {
  clear_has_get_cluster_config();
  ::pdpb::GetClusterConfigRequest* temp = get_cluster_config_;
  get_cluster_config_ = NULL;
  return temp;
}
inline void Request::set_allocated_get_cluster_config(::pdpb::GetClusterConfigRequest* get_cluster_config) {
  delete get_cluster_config_;
  get_cluster_config_ = get_cluster_config;
  if (get_cluster_config) {
    set_has_get_cluster_config();
  } else {
    clear_has_get_cluster_config();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.get_cluster_config)
}

// optional .pdpb.PutClusterConfigRequest put_cluster_config = 13;
inline bool Request::has_put_cluster_config() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Request::set_has_put_cluster_config() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Request::clear_has_put_cluster_config() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Request::clear_put_cluster_config() {
  if (put_cluster_config_ != NULL) put_cluster_config_->::pdpb::PutClusterConfigRequest::Clear();
  clear_has_put_cluster_config();
}
inline const ::pdpb::PutClusterConfigRequest& Request::put_cluster_config() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.put_cluster_config)
  return put_cluster_config_ != NULL ? *put_cluster_config_ : *default_instance_->put_cluster_config_;
}
inline ::pdpb::PutClusterConfigRequest* Request::mutable_put_cluster_config() {
  set_has_put_cluster_config();
  if (put_cluster_config_ == NULL) put_cluster_config_ = new ::pdpb::PutClusterConfigRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.put_cluster_config)
  return put_cluster_config_;
}
inline ::pdpb::PutClusterConfigRequest* Request::release_put_cluster_config() {
  clear_has_put_cluster_config();
  ::pdpb::PutClusterConfigRequest* temp = put_cluster_config_;
  put_cluster_config_ = NULL;
  return temp;
}
inline void Request::set_allocated_put_cluster_config(::pdpb::PutClusterConfigRequest* put_cluster_config) {
  delete put_cluster_config_;
  put_cluster_config_ = put_cluster_config;
  if (put_cluster_config) {
    set_has_put_cluster_config();
  } else {
    clear_has_put_cluster_config();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.put_cluster_config)
}

// optional .pdpb.StoreHeartbeatRequest store_heartbeat = 14;
inline bool Request::has_store_heartbeat() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Request::set_has_store_heartbeat() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Request::clear_has_store_heartbeat() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Request::clear_store_heartbeat() {
  if (store_heartbeat_ != NULL) store_heartbeat_->::pdpb::StoreHeartbeatRequest::Clear();
  clear_has_store_heartbeat();
}
inline const ::pdpb::StoreHeartbeatRequest& Request::store_heartbeat() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.store_heartbeat)
  return store_heartbeat_ != NULL ? *store_heartbeat_ : *default_instance_->store_heartbeat_;
}
inline ::pdpb::StoreHeartbeatRequest* Request::mutable_store_heartbeat() {
  set_has_store_heartbeat();
  if (store_heartbeat_ == NULL) store_heartbeat_ = new ::pdpb::StoreHeartbeatRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.store_heartbeat)
  return store_heartbeat_;
}
inline ::pdpb::StoreHeartbeatRequest* Request::release_store_heartbeat() {
  clear_has_store_heartbeat();
  ::pdpb::StoreHeartbeatRequest* temp = store_heartbeat_;
  store_heartbeat_ = NULL;
  return temp;
}
inline void Request::set_allocated_store_heartbeat(::pdpb::StoreHeartbeatRequest* store_heartbeat) {
  delete store_heartbeat_;
  store_heartbeat_ = store_heartbeat;
  if (store_heartbeat) {
    set_has_store_heartbeat();
  } else {
    clear_has_store_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.store_heartbeat)
}

// optional .pdpb.ReportSplitRequest report_split = 15;
inline bool Request::has_report_split() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Request::set_has_report_split() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Request::clear_has_report_split() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Request::clear_report_split() {
  if (report_split_ != NULL) report_split_->::pdpb::ReportSplitRequest::Clear();
  clear_has_report_split();
}
inline const ::pdpb::ReportSplitRequest& Request::report_split() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.report_split)
  return report_split_ != NULL ? *report_split_ : *default_instance_->report_split_;
}
inline ::pdpb::ReportSplitRequest* Request::mutable_report_split() {
  set_has_report_split();
  if (report_split_ == NULL) report_split_ = new ::pdpb::ReportSplitRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.report_split)
  return report_split_;
}
inline ::pdpb::ReportSplitRequest* Request::release_report_split() {
  clear_has_report_split();
  ::pdpb::ReportSplitRequest* temp = report_split_;
  report_split_ = NULL;
  return temp;
}
inline void Request::set_allocated_report_split(::pdpb::ReportSplitRequest* report_split) {
  delete report_split_;
  report_split_ = report_split;
  if (report_split) {
    set_has_report_split();
  } else {
    clear_has_report_split();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.report_split)
}

// optional .pdpb.GetRegionByIDRequest get_region_by_id = 16;
inline bool Request::has_get_region_by_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Request::set_has_get_region_by_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Request::clear_has_get_region_by_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Request::clear_get_region_by_id() {
  if (get_region_by_id_ != NULL) get_region_by_id_->::pdpb::GetRegionByIDRequest::Clear();
  clear_has_get_region_by_id();
}
inline const ::pdpb::GetRegionByIDRequest& Request::get_region_by_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.get_region_by_id)
  return get_region_by_id_ != NULL ? *get_region_by_id_ : *default_instance_->get_region_by_id_;
}
inline ::pdpb::GetRegionByIDRequest* Request::mutable_get_region_by_id() {
  set_has_get_region_by_id();
  if (get_region_by_id_ == NULL) get_region_by_id_ = new ::pdpb::GetRegionByIDRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.get_region_by_id)
  return get_region_by_id_;
}
inline ::pdpb::GetRegionByIDRequest* Request::release_get_region_by_id() {
  clear_has_get_region_by_id();
  ::pdpb::GetRegionByIDRequest* temp = get_region_by_id_;
  get_region_by_id_ = NULL;
  return temp;
}
inline void Request::set_allocated_get_region_by_id(::pdpb::GetRegionByIDRequest* get_region_by_id) {
  delete get_region_by_id_;
  get_region_by_id_ = get_region_by_id;
  if (get_region_by_id) {
    set_has_get_region_by_id();
  } else {
    clear_has_get_region_by_id();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.get_region_by_id)
}

// optional .pdpb.GetPDMembersRequest get_pd_members = 17;
inline bool Request::has_get_pd_members() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Request::set_has_get_pd_members() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Request::clear_has_get_pd_members() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Request::clear_get_pd_members() {
  if (get_pd_members_ != NULL) get_pd_members_->::pdpb::GetPDMembersRequest::Clear();
  clear_has_get_pd_members();
}
inline const ::pdpb::GetPDMembersRequest& Request::get_pd_members() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.get_pd_members)
  return get_pd_members_ != NULL ? *get_pd_members_ : *default_instance_->get_pd_members_;
}
inline ::pdpb::GetPDMembersRequest* Request::mutable_get_pd_members() {
  set_has_get_pd_members();
  if (get_pd_members_ == NULL) get_pd_members_ = new ::pdpb::GetPDMembersRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.get_pd_members)
  return get_pd_members_;
}
inline ::pdpb::GetPDMembersRequest* Request::release_get_pd_members() {
  clear_has_get_pd_members();
  ::pdpb::GetPDMembersRequest* temp = get_pd_members_;
  get_pd_members_ = NULL;
  return temp;
}
inline void Request::set_allocated_get_pd_members(::pdpb::GetPDMembersRequest* get_pd_members) {
  delete get_pd_members_;
  get_pd_members_ = get_pd_members;
  if (get_pd_members) {
    set_has_get_pd_members();
  } else {
    clear_has_get_pd_members();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.get_pd_members)
}

// optional .pdpb.AllocVolumeIdRequest alloc_volume_id = 18;
inline bool Request::has_alloc_volume_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Request::set_has_alloc_volume_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Request::clear_has_alloc_volume_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Request::clear_alloc_volume_id() {
  if (alloc_volume_id_ != NULL) alloc_volume_id_->::pdpb::AllocVolumeIdRequest::Clear();
  clear_has_alloc_volume_id();
}
inline const ::pdpb::AllocVolumeIdRequest& Request::alloc_volume_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Request.alloc_volume_id)
  return alloc_volume_id_ != NULL ? *alloc_volume_id_ : *default_instance_->alloc_volume_id_;
}
inline ::pdpb::AllocVolumeIdRequest* Request::mutable_alloc_volume_id() {
  set_has_alloc_volume_id();
  if (alloc_volume_id_ == NULL) alloc_volume_id_ = new ::pdpb::AllocVolumeIdRequest;
  // @@protoc_insertion_point(field_mutable:pdpb.Request.alloc_volume_id)
  return alloc_volume_id_;
}
inline ::pdpb::AllocVolumeIdRequest* Request::release_alloc_volume_id() {
  clear_has_alloc_volume_id();
  ::pdpb::AllocVolumeIdRequest* temp = alloc_volume_id_;
  alloc_volume_id_ = NULL;
  return temp;
}
inline void Request::set_allocated_alloc_volume_id(::pdpb::AllocVolumeIdRequest* alloc_volume_id) {
  delete alloc_volume_id_;
  alloc_volume_id_ = alloc_volume_id;
  if (alloc_volume_id) {
    set_has_alloc_volume_id();
  } else {
    clear_has_alloc_volume_id();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Request.alloc_volume_id)
}

// -------------------------------------------------------------------

// Response

// optional .pdpb.ResponseHeader header = 1;
inline bool Response::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_header() {
  if (header_ != NULL) header_->::pdpb::ResponseHeader::Clear();
  clear_has_header();
}
inline const ::pdpb::ResponseHeader& Response::header() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::pdpb::ResponseHeader* Response::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::pdpb::ResponseHeader;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.header)
  return header_;
}
inline ::pdpb::ResponseHeader* Response::release_header() {
  clear_has_header();
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Response::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.header)
}

// optional .pdpb.CommandType cmd_type = 2;
inline bool Response::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::pdpb::CommandType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.cmd_type)
  return static_cast< ::pdpb::CommandType >(cmd_type_);
}
inline void Response::set_cmd_type(::pdpb::CommandType value) {
  assert(::pdpb::CommandType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Response.cmd_type)
}

// optional .pdpb.TsoResponse tso = 3;
inline bool Response::has_tso() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_tso() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_tso() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_tso() {
  if (tso_ != NULL) tso_->::pdpb::TsoResponse::Clear();
  clear_has_tso();
}
inline const ::pdpb::TsoResponse& Response::tso() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.tso)
  return tso_ != NULL ? *tso_ : *default_instance_->tso_;
}
inline ::pdpb::TsoResponse* Response::mutable_tso() {
  set_has_tso();
  if (tso_ == NULL) tso_ = new ::pdpb::TsoResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.tso)
  return tso_;
}
inline ::pdpb::TsoResponse* Response::release_tso() {
  clear_has_tso();
  ::pdpb::TsoResponse* temp = tso_;
  tso_ = NULL;
  return temp;
}
inline void Response::set_allocated_tso(::pdpb::TsoResponse* tso) {
  delete tso_;
  tso_ = tso;
  if (tso) {
    set_has_tso();
  } else {
    clear_has_tso();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.tso)
}

// optional .pdpb.BootstrapResponse bootstrap = 4;
inline bool Response::has_bootstrap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_bootstrap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_bootstrap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_bootstrap() {
  if (bootstrap_ != NULL) bootstrap_->::pdpb::BootstrapResponse::Clear();
  clear_has_bootstrap();
}
inline const ::pdpb::BootstrapResponse& Response::bootstrap() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.bootstrap)
  return bootstrap_ != NULL ? *bootstrap_ : *default_instance_->bootstrap_;
}
inline ::pdpb::BootstrapResponse* Response::mutable_bootstrap() {
  set_has_bootstrap();
  if (bootstrap_ == NULL) bootstrap_ = new ::pdpb::BootstrapResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.bootstrap)
  return bootstrap_;
}
inline ::pdpb::BootstrapResponse* Response::release_bootstrap() {
  clear_has_bootstrap();
  ::pdpb::BootstrapResponse* temp = bootstrap_;
  bootstrap_ = NULL;
  return temp;
}
inline void Response::set_allocated_bootstrap(::pdpb::BootstrapResponse* bootstrap) {
  delete bootstrap_;
  bootstrap_ = bootstrap;
  if (bootstrap) {
    set_has_bootstrap();
  } else {
    clear_has_bootstrap();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.bootstrap)
}

// optional .pdpb.IsBootstrappedResponse is_bootstrapped = 5;
inline bool Response::has_is_bootstrapped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_is_bootstrapped() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_is_bootstrapped() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_is_bootstrapped() {
  if (is_bootstrapped_ != NULL) is_bootstrapped_->::pdpb::IsBootstrappedResponse::Clear();
  clear_has_is_bootstrapped();
}
inline const ::pdpb::IsBootstrappedResponse& Response::is_bootstrapped() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.is_bootstrapped)
  return is_bootstrapped_ != NULL ? *is_bootstrapped_ : *default_instance_->is_bootstrapped_;
}
inline ::pdpb::IsBootstrappedResponse* Response::mutable_is_bootstrapped() {
  set_has_is_bootstrapped();
  if (is_bootstrapped_ == NULL) is_bootstrapped_ = new ::pdpb::IsBootstrappedResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.is_bootstrapped)
  return is_bootstrapped_;
}
inline ::pdpb::IsBootstrappedResponse* Response::release_is_bootstrapped() {
  clear_has_is_bootstrapped();
  ::pdpb::IsBootstrappedResponse* temp = is_bootstrapped_;
  is_bootstrapped_ = NULL;
  return temp;
}
inline void Response::set_allocated_is_bootstrapped(::pdpb::IsBootstrappedResponse* is_bootstrapped) {
  delete is_bootstrapped_;
  is_bootstrapped_ = is_bootstrapped;
  if (is_bootstrapped) {
    set_has_is_bootstrapped();
  } else {
    clear_has_is_bootstrapped();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.is_bootstrapped)
}

// optional .pdpb.AllocIdResponse alloc_id = 6;
inline bool Response::has_alloc_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_alloc_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_alloc_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_alloc_id() {
  if (alloc_id_ != NULL) alloc_id_->::pdpb::AllocIdResponse::Clear();
  clear_has_alloc_id();
}
inline const ::pdpb::AllocIdResponse& Response::alloc_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.alloc_id)
  return alloc_id_ != NULL ? *alloc_id_ : *default_instance_->alloc_id_;
}
inline ::pdpb::AllocIdResponse* Response::mutable_alloc_id() {
  set_has_alloc_id();
  if (alloc_id_ == NULL) alloc_id_ = new ::pdpb::AllocIdResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.alloc_id)
  return alloc_id_;
}
inline ::pdpb::AllocIdResponse* Response::release_alloc_id() {
  clear_has_alloc_id();
  ::pdpb::AllocIdResponse* temp = alloc_id_;
  alloc_id_ = NULL;
  return temp;
}
inline void Response::set_allocated_alloc_id(::pdpb::AllocIdResponse* alloc_id) {
  delete alloc_id_;
  alloc_id_ = alloc_id;
  if (alloc_id) {
    set_has_alloc_id();
  } else {
    clear_has_alloc_id();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.alloc_id)
}

// optional .pdpb.GetStoreResponse get_store = 7;
inline bool Response::has_get_store() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Response::set_has_get_store() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Response::clear_has_get_store() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Response::clear_get_store() {
  if (get_store_ != NULL) get_store_->::pdpb::GetStoreResponse::Clear();
  clear_has_get_store();
}
inline const ::pdpb::GetStoreResponse& Response::get_store() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.get_store)
  return get_store_ != NULL ? *get_store_ : *default_instance_->get_store_;
}
inline ::pdpb::GetStoreResponse* Response::mutable_get_store() {
  set_has_get_store();
  if (get_store_ == NULL) get_store_ = new ::pdpb::GetStoreResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.get_store)
  return get_store_;
}
inline ::pdpb::GetStoreResponse* Response::release_get_store() {
  clear_has_get_store();
  ::pdpb::GetStoreResponse* temp = get_store_;
  get_store_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_store(::pdpb::GetStoreResponse* get_store) {
  delete get_store_;
  get_store_ = get_store;
  if (get_store) {
    set_has_get_store();
  } else {
    clear_has_get_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.get_store)
}

// optional .pdpb.PutStoreResponse put_store = 8;
inline bool Response::has_put_store() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Response::set_has_put_store() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Response::clear_has_put_store() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Response::clear_put_store() {
  if (put_store_ != NULL) put_store_->::pdpb::PutStoreResponse::Clear();
  clear_has_put_store();
}
inline const ::pdpb::PutStoreResponse& Response::put_store() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.put_store)
  return put_store_ != NULL ? *put_store_ : *default_instance_->put_store_;
}
inline ::pdpb::PutStoreResponse* Response::mutable_put_store() {
  set_has_put_store();
  if (put_store_ == NULL) put_store_ = new ::pdpb::PutStoreResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.put_store)
  return put_store_;
}
inline ::pdpb::PutStoreResponse* Response::release_put_store() {
  clear_has_put_store();
  ::pdpb::PutStoreResponse* temp = put_store_;
  put_store_ = NULL;
  return temp;
}
inline void Response::set_allocated_put_store(::pdpb::PutStoreResponse* put_store) {
  delete put_store_;
  put_store_ = put_store;
  if (put_store) {
    set_has_put_store();
  } else {
    clear_has_put_store();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.put_store)
}

// optional .pdpb.AskSplitResponse ask_split = 9;
inline bool Response::has_ask_split() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Response::set_has_ask_split() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Response::clear_has_ask_split() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Response::clear_ask_split() {
  if (ask_split_ != NULL) ask_split_->::pdpb::AskSplitResponse::Clear();
  clear_has_ask_split();
}
inline const ::pdpb::AskSplitResponse& Response::ask_split() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.ask_split)
  return ask_split_ != NULL ? *ask_split_ : *default_instance_->ask_split_;
}
inline ::pdpb::AskSplitResponse* Response::mutable_ask_split() {
  set_has_ask_split();
  if (ask_split_ == NULL) ask_split_ = new ::pdpb::AskSplitResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.ask_split)
  return ask_split_;
}
inline ::pdpb::AskSplitResponse* Response::release_ask_split() {
  clear_has_ask_split();
  ::pdpb::AskSplitResponse* temp = ask_split_;
  ask_split_ = NULL;
  return temp;
}
inline void Response::set_allocated_ask_split(::pdpb::AskSplitResponse* ask_split) {
  delete ask_split_;
  ask_split_ = ask_split;
  if (ask_split) {
    set_has_ask_split();
  } else {
    clear_has_ask_split();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.ask_split)
}

// optional .pdpb.GetRegionResponse get_region = 10;
inline bool Response::has_get_region() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Response::set_has_get_region() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Response::clear_has_get_region() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Response::clear_get_region() {
  if (get_region_ != NULL) get_region_->::pdpb::GetRegionResponse::Clear();
  clear_has_get_region();
}
inline const ::pdpb::GetRegionResponse& Response::get_region() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.get_region)
  return get_region_ != NULL ? *get_region_ : *default_instance_->get_region_;
}
inline ::pdpb::GetRegionResponse* Response::mutable_get_region() {
  set_has_get_region();
  if (get_region_ == NULL) get_region_ = new ::pdpb::GetRegionResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.get_region)
  return get_region_;
}
inline ::pdpb::GetRegionResponse* Response::release_get_region() {
  clear_has_get_region();
  ::pdpb::GetRegionResponse* temp = get_region_;
  get_region_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_region(::pdpb::GetRegionResponse* get_region) {
  delete get_region_;
  get_region_ = get_region;
  if (get_region) {
    set_has_get_region();
  } else {
    clear_has_get_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.get_region)
}

// optional .pdpb.RegionHeartbeatResponse region_heartbeat = 11;
inline bool Response::has_region_heartbeat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Response::set_has_region_heartbeat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Response::clear_has_region_heartbeat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Response::clear_region_heartbeat() {
  if (region_heartbeat_ != NULL) region_heartbeat_->::pdpb::RegionHeartbeatResponse::Clear();
  clear_has_region_heartbeat();
}
inline const ::pdpb::RegionHeartbeatResponse& Response::region_heartbeat() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.region_heartbeat)
  return region_heartbeat_ != NULL ? *region_heartbeat_ : *default_instance_->region_heartbeat_;
}
inline ::pdpb::RegionHeartbeatResponse* Response::mutable_region_heartbeat() {
  set_has_region_heartbeat();
  if (region_heartbeat_ == NULL) region_heartbeat_ = new ::pdpb::RegionHeartbeatResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.region_heartbeat)
  return region_heartbeat_;
}
inline ::pdpb::RegionHeartbeatResponse* Response::release_region_heartbeat() {
  clear_has_region_heartbeat();
  ::pdpb::RegionHeartbeatResponse* temp = region_heartbeat_;
  region_heartbeat_ = NULL;
  return temp;
}
inline void Response::set_allocated_region_heartbeat(::pdpb::RegionHeartbeatResponse* region_heartbeat) {
  delete region_heartbeat_;
  region_heartbeat_ = region_heartbeat;
  if (region_heartbeat) {
    set_has_region_heartbeat();
  } else {
    clear_has_region_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.region_heartbeat)
}

// optional .pdpb.GetClusterConfigResponse get_cluster_config = 12;
inline bool Response::has_get_cluster_config() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Response::set_has_get_cluster_config() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Response::clear_has_get_cluster_config() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Response::clear_get_cluster_config() {
  if (get_cluster_config_ != NULL) get_cluster_config_->::pdpb::GetClusterConfigResponse::Clear();
  clear_has_get_cluster_config();
}
inline const ::pdpb::GetClusterConfigResponse& Response::get_cluster_config() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.get_cluster_config)
  return get_cluster_config_ != NULL ? *get_cluster_config_ : *default_instance_->get_cluster_config_;
}
inline ::pdpb::GetClusterConfigResponse* Response::mutable_get_cluster_config() {
  set_has_get_cluster_config();
  if (get_cluster_config_ == NULL) get_cluster_config_ = new ::pdpb::GetClusterConfigResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.get_cluster_config)
  return get_cluster_config_;
}
inline ::pdpb::GetClusterConfigResponse* Response::release_get_cluster_config() {
  clear_has_get_cluster_config();
  ::pdpb::GetClusterConfigResponse* temp = get_cluster_config_;
  get_cluster_config_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_cluster_config(::pdpb::GetClusterConfigResponse* get_cluster_config) {
  delete get_cluster_config_;
  get_cluster_config_ = get_cluster_config;
  if (get_cluster_config) {
    set_has_get_cluster_config();
  } else {
    clear_has_get_cluster_config();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.get_cluster_config)
}

// optional .pdpb.PutClusterConfigResponse put_cluster_config = 13;
inline bool Response::has_put_cluster_config() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Response::set_has_put_cluster_config() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Response::clear_has_put_cluster_config() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Response::clear_put_cluster_config() {
  if (put_cluster_config_ != NULL) put_cluster_config_->::pdpb::PutClusterConfigResponse::Clear();
  clear_has_put_cluster_config();
}
inline const ::pdpb::PutClusterConfigResponse& Response::put_cluster_config() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.put_cluster_config)
  return put_cluster_config_ != NULL ? *put_cluster_config_ : *default_instance_->put_cluster_config_;
}
inline ::pdpb::PutClusterConfigResponse* Response::mutable_put_cluster_config() {
  set_has_put_cluster_config();
  if (put_cluster_config_ == NULL) put_cluster_config_ = new ::pdpb::PutClusterConfigResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.put_cluster_config)
  return put_cluster_config_;
}
inline ::pdpb::PutClusterConfigResponse* Response::release_put_cluster_config() {
  clear_has_put_cluster_config();
  ::pdpb::PutClusterConfigResponse* temp = put_cluster_config_;
  put_cluster_config_ = NULL;
  return temp;
}
inline void Response::set_allocated_put_cluster_config(::pdpb::PutClusterConfigResponse* put_cluster_config) {
  delete put_cluster_config_;
  put_cluster_config_ = put_cluster_config;
  if (put_cluster_config) {
    set_has_put_cluster_config();
  } else {
    clear_has_put_cluster_config();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.put_cluster_config)
}

// optional .pdpb.StoreHeartbeatResponse store_heartbeat = 14;
inline bool Response::has_store_heartbeat() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Response::set_has_store_heartbeat() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Response::clear_has_store_heartbeat() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Response::clear_store_heartbeat() {
  if (store_heartbeat_ != NULL) store_heartbeat_->::pdpb::StoreHeartbeatResponse::Clear();
  clear_has_store_heartbeat();
}
inline const ::pdpb::StoreHeartbeatResponse& Response::store_heartbeat() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.store_heartbeat)
  return store_heartbeat_ != NULL ? *store_heartbeat_ : *default_instance_->store_heartbeat_;
}
inline ::pdpb::StoreHeartbeatResponse* Response::mutable_store_heartbeat() {
  set_has_store_heartbeat();
  if (store_heartbeat_ == NULL) store_heartbeat_ = new ::pdpb::StoreHeartbeatResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.store_heartbeat)
  return store_heartbeat_;
}
inline ::pdpb::StoreHeartbeatResponse* Response::release_store_heartbeat() {
  clear_has_store_heartbeat();
  ::pdpb::StoreHeartbeatResponse* temp = store_heartbeat_;
  store_heartbeat_ = NULL;
  return temp;
}
inline void Response::set_allocated_store_heartbeat(::pdpb::StoreHeartbeatResponse* store_heartbeat) {
  delete store_heartbeat_;
  store_heartbeat_ = store_heartbeat;
  if (store_heartbeat) {
    set_has_store_heartbeat();
  } else {
    clear_has_store_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.store_heartbeat)
}

// optional .pdpb.ReportSplitResponse report_split = 15;
inline bool Response::has_report_split() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Response::set_has_report_split() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Response::clear_has_report_split() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Response::clear_report_split() {
  if (report_split_ != NULL) report_split_->::pdpb::ReportSplitResponse::Clear();
  clear_has_report_split();
}
inline const ::pdpb::ReportSplitResponse& Response::report_split() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.report_split)
  return report_split_ != NULL ? *report_split_ : *default_instance_->report_split_;
}
inline ::pdpb::ReportSplitResponse* Response::mutable_report_split() {
  set_has_report_split();
  if (report_split_ == NULL) report_split_ = new ::pdpb::ReportSplitResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.report_split)
  return report_split_;
}
inline ::pdpb::ReportSplitResponse* Response::release_report_split() {
  clear_has_report_split();
  ::pdpb::ReportSplitResponse* temp = report_split_;
  report_split_ = NULL;
  return temp;
}
inline void Response::set_allocated_report_split(::pdpb::ReportSplitResponse* report_split) {
  delete report_split_;
  report_split_ = report_split;
  if (report_split) {
    set_has_report_split();
  } else {
    clear_has_report_split();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.report_split)
}

// optional .pdpb.GetRegionResponse get_region_by_id = 16;
inline bool Response::has_get_region_by_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Response::set_has_get_region_by_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Response::clear_has_get_region_by_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Response::clear_get_region_by_id() {
  if (get_region_by_id_ != NULL) get_region_by_id_->::pdpb::GetRegionResponse::Clear();
  clear_has_get_region_by_id();
}
inline const ::pdpb::GetRegionResponse& Response::get_region_by_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.get_region_by_id)
  return get_region_by_id_ != NULL ? *get_region_by_id_ : *default_instance_->get_region_by_id_;
}
inline ::pdpb::GetRegionResponse* Response::mutable_get_region_by_id() {
  set_has_get_region_by_id();
  if (get_region_by_id_ == NULL) get_region_by_id_ = new ::pdpb::GetRegionResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.get_region_by_id)
  return get_region_by_id_;
}
inline ::pdpb::GetRegionResponse* Response::release_get_region_by_id() {
  clear_has_get_region_by_id();
  ::pdpb::GetRegionResponse* temp = get_region_by_id_;
  get_region_by_id_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_region_by_id(::pdpb::GetRegionResponse* get_region_by_id) {
  delete get_region_by_id_;
  get_region_by_id_ = get_region_by_id;
  if (get_region_by_id) {
    set_has_get_region_by_id();
  } else {
    clear_has_get_region_by_id();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.get_region_by_id)
}

// optional .pdpb.GetPDMembersResponse get_pd_members = 17;
inline bool Response::has_get_pd_members() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Response::set_has_get_pd_members() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Response::clear_has_get_pd_members() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Response::clear_get_pd_members() {
  if (get_pd_members_ != NULL) get_pd_members_->::pdpb::GetPDMembersResponse::Clear();
  clear_has_get_pd_members();
}
inline const ::pdpb::GetPDMembersResponse& Response::get_pd_members() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.get_pd_members)
  return get_pd_members_ != NULL ? *get_pd_members_ : *default_instance_->get_pd_members_;
}
inline ::pdpb::GetPDMembersResponse* Response::mutable_get_pd_members() {
  set_has_get_pd_members();
  if (get_pd_members_ == NULL) get_pd_members_ = new ::pdpb::GetPDMembersResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.get_pd_members)
  return get_pd_members_;
}
inline ::pdpb::GetPDMembersResponse* Response::release_get_pd_members() {
  clear_has_get_pd_members();
  ::pdpb::GetPDMembersResponse* temp = get_pd_members_;
  get_pd_members_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_pd_members(::pdpb::GetPDMembersResponse* get_pd_members) {
  delete get_pd_members_;
  get_pd_members_ = get_pd_members;
  if (get_pd_members) {
    set_has_get_pd_members();
  } else {
    clear_has_get_pd_members();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.get_pd_members)
}

// optional .pdpb.AllocVolumeIdResponse alloc_volume_id = 18;
inline bool Response::has_alloc_volume_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Response::set_has_alloc_volume_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Response::clear_has_alloc_volume_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Response::clear_alloc_volume_id() {
  if (alloc_volume_id_ != NULL) alloc_volume_id_->::pdpb::AllocVolumeIdResponse::Clear();
  clear_has_alloc_volume_id();
}
inline const ::pdpb::AllocVolumeIdResponse& Response::alloc_volume_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Response.alloc_volume_id)
  return alloc_volume_id_ != NULL ? *alloc_volume_id_ : *default_instance_->alloc_volume_id_;
}
inline ::pdpb::AllocVolumeIdResponse* Response::mutable_alloc_volume_id() {
  set_has_alloc_volume_id();
  if (alloc_volume_id_ == NULL) alloc_volume_id_ = new ::pdpb::AllocVolumeIdResponse;
  // @@protoc_insertion_point(field_mutable:pdpb.Response.alloc_volume_id)
  return alloc_volume_id_;
}
inline ::pdpb::AllocVolumeIdResponse* Response::release_alloc_volume_id() {
  clear_has_alloc_volume_id();
  ::pdpb::AllocVolumeIdResponse* temp = alloc_volume_id_;
  alloc_volume_id_ = NULL;
  return temp;
}
inline void Response::set_allocated_alloc_volume_id(::pdpb::AllocVolumeIdResponse* alloc_volume_id) {
  delete alloc_volume_id_;
  alloc_volume_id_ = alloc_volume_id;
  if (alloc_volume_id) {
    set_has_alloc_volume_id();
  } else {
    clear_has_alloc_volume_id();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Response.alloc_volume_id)
}

// -------------------------------------------------------------------

// BootstrappedError

// -------------------------------------------------------------------

// StoreIsTombstoneError

// -------------------------------------------------------------------

// Error

// optional string message = 1;
inline bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:pdpb.Error.message)
  return *message_;
}
inline void Error::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pdpb.Error.message)
}
inline void Error::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.Error.message)
}
inline ::std::string* Error::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.Error.message)
  return message_;
}
inline ::std::string* Error::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Error.message)
}

// optional .pdpb.BootstrappedError bootstrapped = 2;
inline bool Error::has_bootstrapped() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_bootstrapped() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_bootstrapped() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_bootstrapped() {
  if (bootstrapped_ != NULL) bootstrapped_->::pdpb::BootstrappedError::Clear();
  clear_has_bootstrapped();
}
inline const ::pdpb::BootstrappedError& Error::bootstrapped() const {
  // @@protoc_insertion_point(field_get:pdpb.Error.bootstrapped)
  return bootstrapped_ != NULL ? *bootstrapped_ : *default_instance_->bootstrapped_;
}
inline ::pdpb::BootstrappedError* Error::mutable_bootstrapped() {
  set_has_bootstrapped();
  if (bootstrapped_ == NULL) bootstrapped_ = new ::pdpb::BootstrappedError;
  // @@protoc_insertion_point(field_mutable:pdpb.Error.bootstrapped)
  return bootstrapped_;
}
inline ::pdpb::BootstrappedError* Error::release_bootstrapped() {
  clear_has_bootstrapped();
  ::pdpb::BootstrappedError* temp = bootstrapped_;
  bootstrapped_ = NULL;
  return temp;
}
inline void Error::set_allocated_bootstrapped(::pdpb::BootstrappedError* bootstrapped) {
  delete bootstrapped_;
  bootstrapped_ = bootstrapped;
  if (bootstrapped) {
    set_has_bootstrapped();
  } else {
    clear_has_bootstrapped();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Error.bootstrapped)
}

// optional .pdpb.StoreIsTombstoneError is_tombstone = 3;
inline bool Error::has_is_tombstone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_is_tombstone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_is_tombstone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_is_tombstone() {
  if (is_tombstone_ != NULL) is_tombstone_->::pdpb::StoreIsTombstoneError::Clear();
  clear_has_is_tombstone();
}
inline const ::pdpb::StoreIsTombstoneError& Error::is_tombstone() const {
  // @@protoc_insertion_point(field_get:pdpb.Error.is_tombstone)
  return is_tombstone_ != NULL ? *is_tombstone_ : *default_instance_->is_tombstone_;
}
inline ::pdpb::StoreIsTombstoneError* Error::mutable_is_tombstone() {
  set_has_is_tombstone();
  if (is_tombstone_ == NULL) is_tombstone_ = new ::pdpb::StoreIsTombstoneError;
  // @@protoc_insertion_point(field_mutable:pdpb.Error.is_tombstone)
  return is_tombstone_;
}
inline ::pdpb::StoreIsTombstoneError* Error::release_is_tombstone() {
  clear_has_is_tombstone();
  ::pdpb::StoreIsTombstoneError* temp = is_tombstone_;
  is_tombstone_ = NULL;
  return temp;
}
inline void Error::set_allocated_is_tombstone(::pdpb::StoreIsTombstoneError* is_tombstone) {
  delete is_tombstone_;
  is_tombstone_ = is_tombstone;
  if (is_tombstone) {
    set_has_is_tombstone();
  } else {
    clear_has_is_tombstone();
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Error.is_tombstone)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pdpb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pdpb::CommandType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pdpb::CommandType>() {
  return ::pdpb::CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pdpb_2eproto__INCLUDED
