// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_serverpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_serverpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_serverpb {

namespace {

const ::google::protobuf::Descriptor* RaftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftTruncatedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftTruncatedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIdent_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftLocalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftApplyState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftApplyState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLocalState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PeerState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5fserverpb_2eproto() {
  protobuf_AddDesc_raft_5fserverpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_serverpb.proto");
  GOOGLE_CHECK(file != NULL);
  RaftMessage_descriptor_ = file->message_type(0);
  static const int RaftMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, from_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, to_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, is_tombstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, end_key_),
  };
  RaftMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftMessage_descriptor_,
      RaftMessage::default_instance_,
      RaftMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftMessage));
  RaftTruncatedState_descriptor_ = file->message_type(1);
  static const int RaftTruncatedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, term_),
  };
  RaftTruncatedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftTruncatedState_descriptor_,
      RaftTruncatedState::default_instance_,
      RaftTruncatedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftTruncatedState));
  KeyValue_descriptor_ = file->message_type(2);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  RaftSnapshotData_descriptor_ = file->message_type(3);
  static const int RaftSnapshotData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, data_),
  };
  RaftSnapshotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftSnapshotData_descriptor_,
      RaftSnapshotData::default_instance_,
      RaftSnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftSnapshotData));
  StoreIdent_descriptor_ = file->message_type(4);
  static const int StoreIdent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, store_id_),
  };
  StoreIdent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreIdent_descriptor_,
      StoreIdent::default_instance_,
      StoreIdent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreIdent));
  RaftLocalState_descriptor_ = file->message_type(5);
  static const int RaftLocalState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, hard_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, last_index_),
  };
  RaftLocalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftLocalState_descriptor_,
      RaftLocalState::default_instance_,
      RaftLocalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftLocalState));
  RaftApplyState_descriptor_ = file->message_type(6);
  static const int RaftApplyState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, applied_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, truncated_state_),
  };
  RaftApplyState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftApplyState_descriptor_,
      RaftApplyState::default_instance_,
      RaftApplyState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftApplyState));
  RegionLocalState_descriptor_ = file->message_type(7);
  static const int RegionLocalState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, region_),
  };
  RegionLocalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLocalState_descriptor_,
      RegionLocalState::default_instance_,
      RegionLocalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLocalState));
  PeerState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5fserverpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftMessage_descriptor_, &RaftMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftTruncatedState_descriptor_, &RaftTruncatedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftSnapshotData_descriptor_, &RaftSnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreIdent_descriptor_, &StoreIdent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftLocalState_descriptor_, &RaftLocalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftApplyState_descriptor_, &RaftApplyState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLocalState_descriptor_, &RegionLocalState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fserverpb_2eproto() {
  delete RaftMessage::default_instance_;
  delete RaftMessage_reflection_;
  delete RaftTruncatedState::default_instance_;
  delete RaftTruncatedState_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete RaftSnapshotData::default_instance_;
  delete RaftSnapshotData_reflection_;
  delete StoreIdent::default_instance_;
  delete StoreIdent_reflection_;
  delete RaftLocalState::default_instance_;
  delete RaftLocalState_reflection_;
  delete RaftApplyState::default_instance_;
  delete RaftApplyState_reflection_;
  delete RegionLocalState::default_instance_;
  delete RegionLocalState_reflection_;
}

void protobuf_AddDesc_raft_5fserverpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023raft_serverpb.proto\022\rraft_serverpb\032\rer"
    "aftpb.proto\032\014metapb.proto\"\350\001\n\013RaftMessag"
    "e\022\021\n\tregion_id\030\001 \001(\004\022\037\n\tfrom_peer\030\002 \001(\0132"
    "\014.metapb.Peer\022\035\n\007to_peer\030\003 \001(\0132\014.metapb."
    "Peer\022!\n\007message\030\004 \001(\0132\020.eraftpb.Message\022"
    ")\n\014region_epoch\030\005 \001(\0132\023.metapb.RegionEpo"
    "ch\022\024\n\014is_tombstone\030\006 \001(\010\022\021\n\tstart_key\030\007 "
    "\001(\014\022\017\n\007end_key\030\010 \001(\014\"1\n\022RaftTruncatedSta"
    "te\022\r\n\005index\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\"&\n\010KeyVa"
    "lue\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"l\n\020RaftS"
    "napshotData\022\036\n\006region\030\001 \001(\0132\016.metapb.Reg"
    "ion\022\021\n\tfile_size\030\002 \001(\004\022%\n\004data\030\003 \003(\0132\027.r"
    "aft_serverpb.KeyValue\"2\n\nStoreIdent\022\022\n\nc"
    "luster_id\030\001 \001(\004\022\020\n\010store_id\030\002 \001(\004\"L\n\016Raf"
    "tLocalState\022&\n\nhard_state\030\001 \001(\0132\022.eraftp"
    "b.HardState\022\022\n\nlast_index\030\002 \001(\004\"c\n\016RaftA"
    "pplyState\022\025\n\rapplied_index\030\001 \001(\004\022:\n\017trun"
    "cated_state\030\002 \001(\0132!.raft_serverpb.RaftTr"
    "uncatedState\"[\n\020RegionLocalState\022\'\n\005stat"
    "e\030\001 \001(\0162\030.raft_serverpb.PeerState\022\036\n\006reg"
    "ion\030\002 \001(\0132\016.metapb.Region*4\n\tPeerState\022\n"
    "\n\006Normal\020\000\022\014\n\010Applying\020\001\022\r\n\tTombstone\020\002", 879);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_serverpb.proto", &protobuf_RegisterTypes);
  RaftMessage::default_instance_ = new RaftMessage();
  RaftTruncatedState::default_instance_ = new RaftTruncatedState();
  KeyValue::default_instance_ = new KeyValue();
  RaftSnapshotData::default_instance_ = new RaftSnapshotData();
  StoreIdent::default_instance_ = new StoreIdent();
  RaftLocalState::default_instance_ = new RaftLocalState();
  RaftApplyState::default_instance_ = new RaftApplyState();
  RegionLocalState::default_instance_ = new RegionLocalState();
  RaftMessage::default_instance_->InitAsDefaultInstance();
  RaftTruncatedState::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData::default_instance_->InitAsDefaultInstance();
  StoreIdent::default_instance_->InitAsDefaultInstance();
  RaftLocalState::default_instance_->InitAsDefaultInstance();
  RaftApplyState::default_instance_->InitAsDefaultInstance();
  RegionLocalState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fserverpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fserverpb_2eproto {
  StaticDescriptorInitializer_raft_5fserverpb_2eproto() {
    protobuf_AddDesc_raft_5fserverpb_2eproto();
  }
} static_descriptor_initializer_raft_5fserverpb_2eproto_;
const ::google::protobuf::EnumDescriptor* PeerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerState_descriptor_;
}
bool PeerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RaftMessage::kRegionIdFieldNumber;
const int RaftMessage::kFromPeerFieldNumber;
const int RaftMessage::kToPeerFieldNumber;
const int RaftMessage::kMessageFieldNumber;
const int RaftMessage::kRegionEpochFieldNumber;
const int RaftMessage::kIsTombstoneFieldNumber;
const int RaftMessage::kStartKeyFieldNumber;
const int RaftMessage::kEndKeyFieldNumber;
#endif  // !_MSC_VER

RaftMessage::RaftMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftMessage)
}

void RaftMessage::InitAsDefaultInstance() {
  from_peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
  to_peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
  message_ = const_cast< ::eraftpb::Message*>(&::eraftpb::Message::default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(&::metapb::RegionEpoch::default_instance());
}

RaftMessage::RaftMessage(const RaftMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftMessage)
}

void RaftMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  from_peer_ = NULL;
  to_peer_ = NULL;
  message_ = NULL;
  region_epoch_ = NULL;
  is_tombstone_ = false;
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessage::~RaftMessage() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftMessage)
  SharedDtor();
}

void RaftMessage::SharedDtor() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (this != default_instance_) {
    delete from_peer_;
    delete to_peer_;
    delete message_;
    delete region_epoch_;
  }
}

void RaftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessage_descriptor_;
}

const RaftMessage& RaftMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

RaftMessage* RaftMessage::default_instance_ = NULL;

RaftMessage* RaftMessage::New() const {
  return new RaftMessage;
}

void RaftMessage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_peer()) {
      if (from_peer_ != NULL) from_peer_->::metapb::Peer::Clear();
    }
    if (has_to_peer()) {
      if (to_peer_ != NULL) to_peer_->::metapb::Peer::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::eraftpb::Message::Clear();
    }
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
    is_tombstone_ = false;
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_peer;
        break;
      }

      // optional .metapb.Peer from_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_from_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_peer;
        break;
      }

      // optional .metapb.Peer to_peer = 3;
      case 3: {
        if (tag == 26) {
         parse_to_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional .eraftpb.Message message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_tombstone;
        break;
      }

      // optional bool is_tombstone = 6;
      case 6: {
        if (tag == 48) {
         parse_is_tombstone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tombstone_)));
          set_has_is_tombstone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 7;
      case 7: {
        if (tag == 58) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 8;
      case 8: {
        if (tag == 66) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftMessage)
  return false;
#undef DO_
}

void RaftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftMessage)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer from_peer = 2;
  if (has_from_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->from_peer(), output);
  }

  // optional .metapb.Peer to_peer = 3;
  if (has_to_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->to_peer(), output);
  }

  // optional .eraftpb.Message message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->message(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->region_epoch(), output);
  }

  // optional bool is_tombstone = 6;
  if (has_is_tombstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tombstone(), output);
  }

  // optional bytes start_key = 7;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->start_key(), output);
  }

  // optional bytes end_key = 8;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->end_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftMessage)
}

::google::protobuf::uint8* RaftMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftMessage)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer from_peer = 2;
  if (has_from_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->from_peer(), target);
  }

  // optional .metapb.Peer to_peer = 3;
  if (has_to_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->to_peer(), target);
  }

  // optional .eraftpb.Message message = 4;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->message(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->region_epoch(), target);
  }

  // optional bool is_tombstone = 6;
  if (has_is_tombstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tombstone(), target);
  }

  // optional bytes start_key = 7;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->start_key(), target);
  }

  // optional bytes end_key = 8;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->end_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftMessage)
  return target;
}

int RaftMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.Peer from_peer = 2;
    if (has_from_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_peer());
    }

    // optional .metapb.Peer to_peer = 3;
    if (has_to_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_peer());
    }

    // optional .eraftpb.Message message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional .metapb.RegionEpoch region_epoch = 5;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_epoch());
    }

    // optional bool is_tombstone = 6;
    if (has_is_tombstone()) {
      total_size += 1 + 1;
    }

    // optional bytes start_key = 7;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 8;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessage::MergeFrom(const RaftMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_from_peer()) {
      mutable_from_peer()->::metapb::Peer::MergeFrom(from.from_peer());
    }
    if (from.has_to_peer()) {
      mutable_to_peer()->::metapb::Peer::MergeFrom(from.to_peer());
    }
    if (from.has_message()) {
      mutable_message()->::eraftpb::Message::MergeFrom(from.message());
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
    if (from.has_is_tombstone()) {
      set_is_tombstone(from.is_tombstone());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessage::CopyFrom(const RaftMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessage::IsInitialized() const {

  return true;
}

void RaftMessage::Swap(RaftMessage* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(from_peer_, other->from_peer_);
    std::swap(to_peer_, other->to_peer_);
    std::swap(message_, other->message_);
    std::swap(region_epoch_, other->region_epoch_);
    std::swap(is_tombstone_, other->is_tombstone_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessage_descriptor_;
  metadata.reflection = RaftMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftTruncatedState::kIndexFieldNumber;
const int RaftTruncatedState::kTermFieldNumber;
#endif  // !_MSC_VER

RaftTruncatedState::RaftTruncatedState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftTruncatedState)
}

void RaftTruncatedState::InitAsDefaultInstance() {
}

RaftTruncatedState::RaftTruncatedState(const RaftTruncatedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftTruncatedState)
}

void RaftTruncatedState::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftTruncatedState::~RaftTruncatedState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftTruncatedState)
  SharedDtor();
}

void RaftTruncatedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftTruncatedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftTruncatedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftTruncatedState_descriptor_;
}

const RaftTruncatedState& RaftTruncatedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

RaftTruncatedState* RaftTruncatedState::default_instance_ = NULL;

RaftTruncatedState* RaftTruncatedState::New() const {
  return new RaftTruncatedState;
}

void RaftTruncatedState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaftTruncatedState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, term_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftTruncatedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftTruncatedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftTruncatedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftTruncatedState)
  return false;
#undef DO_
}

void RaftTruncatedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftTruncatedState)
}

::google::protobuf::uint8* RaftTruncatedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftTruncatedState)
  return target;
}

int RaftTruncatedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftTruncatedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftTruncatedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftTruncatedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftTruncatedState::MergeFrom(const RaftTruncatedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftTruncatedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftTruncatedState::CopyFrom(const RaftTruncatedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftTruncatedState::IsInitialized() const {

  return true;
}

void RaftTruncatedState::Swap(RaftTruncatedState* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftTruncatedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftTruncatedState_descriptor_;
  metadata.reflection = RaftTruncatedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.KeyValue)
}

void KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:raft_serverpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftSnapshotData::kRegionFieldNumber;
const int RaftSnapshotData::kFileSizeFieldNumber;
const int RaftSnapshotData::kDataFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData::RaftSnapshotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftSnapshotData)
}

void RaftSnapshotData::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

RaftSnapshotData::RaftSnapshotData(const RaftSnapshotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftSnapshotData)
}

void RaftSnapshotData::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  file_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData::~RaftSnapshotData() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftSnapshotData)
  SharedDtor();
}

void RaftSnapshotData::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void RaftSnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_descriptor_;
}

const RaftSnapshotData& RaftSnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

RaftSnapshotData* RaftSnapshotData::default_instance_ = NULL;

RaftSnapshotData* RaftSnapshotData::New() const {
  return new RaftSnapshotData;
}

void RaftSnapshotData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
    file_size_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftSnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftSnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 2;
      case 2: {
        if (tag == 16) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .raft_serverpb.KeyValue data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftSnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftSnapshotData)
  return false;
#undef DO_
}

void RaftSnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftSnapshotData)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional uint64 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_size(), output);
  }

  // repeated .raft_serverpb.KeyValue data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftSnapshotData)
}

::google::protobuf::uint8* RaftSnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftSnapshotData)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional uint64 file_size = 2;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_size(), target);
  }

  // repeated .raft_serverpb.KeyValue data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftSnapshotData)
  return target;
}

int RaftSnapshotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional uint64 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

  }
  // repeated .raft_serverpb.KeyValue data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftSnapshotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftSnapshotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData::MergeFrom(const RaftSnapshotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftSnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData::CopyFrom(const RaftSnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData::IsInitialized() const {

  return true;
}

void RaftSnapshotData::Swap(RaftSnapshotData* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(file_size_, other->file_size_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftSnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_descriptor_;
  metadata.reflection = RaftSnapshotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !_MSC_VER

StoreIdent::StoreIdent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.StoreIdent)
}

void StoreIdent::InitAsDefaultInstance() {
}

StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  _cached_size_ = 0;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  store_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:raft_serverpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIdent_descriptor_;
}

const StoreIdent& StoreIdent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

StoreIdent* StoreIdent::default_instance_ = NULL;

StoreIdent* StoreIdent::New() const {
  return new StoreIdent;
}

void StoreIdent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreIdent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cluster_id_, store_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cluster_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
          set_has_cluster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.StoreIdent)
  // optional uint64 cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.StoreIdent)
}

::google::protobuf::uint8* StoreIdent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.StoreIdent)
  // optional uint64 cluster_id = 1;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.StoreIdent)
  return target;
}

int StoreIdent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cluster_id = 1;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_id());
    }

    // optional uint64 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreIdent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreIdent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreIdent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {

  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other != this) {
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreIdent_descriptor_;
  metadata.reflection = StoreIdent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftLocalState::kHardStateFieldNumber;
const int RaftLocalState::kLastIndexFieldNumber;
#endif  // !_MSC_VER

RaftLocalState::RaftLocalState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftLocalState)
}

void RaftLocalState::InitAsDefaultInstance() {
  hard_state_ = const_cast< ::eraftpb::HardState*>(&::eraftpb::HardState::default_instance());
}

RaftLocalState::RaftLocalState(const RaftLocalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftLocalState)
}

void RaftLocalState::SharedCtor() {
  _cached_size_ = 0;
  hard_state_ = NULL;
  last_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftLocalState::~RaftLocalState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftLocalState)
  SharedDtor();
}

void RaftLocalState::SharedDtor() {
  if (this != default_instance_) {
    delete hard_state_;
  }
}

void RaftLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftLocalState_descriptor_;
}

const RaftLocalState& RaftLocalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

RaftLocalState* RaftLocalState::default_instance_ = NULL;

RaftLocalState* RaftLocalState::New() const {
  return new RaftLocalState;
}

void RaftLocalState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_hard_state()) {
      if (hard_state_ != NULL) hard_state_->::eraftpb::HardState::Clear();
    }
    last_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.HardState hard_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_index;
        break;
      }

      // optional uint64 last_index = 2;
      case 2: {
        if (tag == 16) {
         parse_last_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_index_)));
          set_has_last_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftLocalState)
  return false;
#undef DO_
}

void RaftLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftLocalState)
  // optional .eraftpb.HardState hard_state = 1;
  if (has_hard_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hard_state(), output);
  }

  // optional uint64 last_index = 2;
  if (has_last_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftLocalState)
}

::google::protobuf::uint8* RaftLocalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftLocalState)
  // optional .eraftpb.HardState hard_state = 1;
  if (has_hard_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hard_state(), target);
  }

  // optional uint64 last_index = 2;
  if (has_last_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftLocalState)
  return target;
}

int RaftLocalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eraftpb.HardState hard_state = 1;
    if (has_hard_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hard_state());
    }

    // optional uint64 last_index = 2;
    if (has_last_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftLocalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftLocalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftLocalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftLocalState::MergeFrom(const RaftLocalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hard_state()) {
      mutable_hard_state()->::eraftpb::HardState::MergeFrom(from.hard_state());
    }
    if (from.has_last_index()) {
      set_last_index(from.last_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftLocalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftLocalState::CopyFrom(const RaftLocalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftLocalState::IsInitialized() const {

  return true;
}

void RaftLocalState::Swap(RaftLocalState* other) {
  if (other != this) {
    std::swap(hard_state_, other->hard_state_);
    std::swap(last_index_, other->last_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftLocalState_descriptor_;
  metadata.reflection = RaftLocalState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftApplyState::kAppliedIndexFieldNumber;
const int RaftApplyState::kTruncatedStateFieldNumber;
#endif  // !_MSC_VER

RaftApplyState::RaftApplyState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftApplyState)
}

void RaftApplyState::InitAsDefaultInstance() {
  truncated_state_ = const_cast< ::raft_serverpb::RaftTruncatedState*>(&::raft_serverpb::RaftTruncatedState::default_instance());
}

RaftApplyState::RaftApplyState(const RaftApplyState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftApplyState)
}

void RaftApplyState::SharedCtor() {
  _cached_size_ = 0;
  applied_index_ = GOOGLE_ULONGLONG(0);
  truncated_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftApplyState::~RaftApplyState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftApplyState)
  SharedDtor();
}

void RaftApplyState::SharedDtor() {
  if (this != default_instance_) {
    delete truncated_state_;
  }
}

void RaftApplyState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftApplyState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftApplyState_descriptor_;
}

const RaftApplyState& RaftApplyState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

RaftApplyState* RaftApplyState::default_instance_ = NULL;

RaftApplyState* RaftApplyState::New() const {
  return new RaftApplyState;
}

void RaftApplyState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    applied_index_ = GOOGLE_ULONGLONG(0);
    if (has_truncated_state()) {
      if (truncated_state_ != NULL) truncated_state_->::raft_serverpb::RaftTruncatedState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftApplyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftApplyState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 applied_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applied_index_)));
          set_has_applied_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_truncated_state;
        break;
      }

      // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
      case 2: {
        if (tag == 18) {
         parse_truncated_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncated_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftApplyState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftApplyState)
  return false;
#undef DO_
}

void RaftApplyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftApplyState)
  // optional uint64 applied_index = 1;
  if (has_applied_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->applied_index(), output);
  }

  // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
  if (has_truncated_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->truncated_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftApplyState)
}

::google::protobuf::uint8* RaftApplyState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftApplyState)
  // optional uint64 applied_index = 1;
  if (has_applied_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->applied_index(), target);
  }

  // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
  if (has_truncated_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->truncated_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftApplyState)
  return target;
}

int RaftApplyState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 applied_index = 1;
    if (has_applied_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applied_index());
    }

    // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
    if (has_truncated_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truncated_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftApplyState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftApplyState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftApplyState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftApplyState::MergeFrom(const RaftApplyState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applied_index()) {
      set_applied_index(from.applied_index());
    }
    if (from.has_truncated_state()) {
      mutable_truncated_state()->::raft_serverpb::RaftTruncatedState::MergeFrom(from.truncated_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftApplyState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftApplyState::CopyFrom(const RaftApplyState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftApplyState::IsInitialized() const {

  return true;
}

void RaftApplyState::Swap(RaftApplyState* other) {
  if (other != this) {
    std::swap(applied_index_, other->applied_index_);
    std::swap(truncated_state_, other->truncated_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftApplyState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftApplyState_descriptor_;
  metadata.reflection = RaftApplyState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionLocalState::kStateFieldNumber;
const int RegionLocalState::kRegionFieldNumber;
#endif  // !_MSC_VER

RegionLocalState::RegionLocalState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RegionLocalState)
}

void RegionLocalState::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

RegionLocalState::RegionLocalState(const RegionLocalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RegionLocalState)
}

void RegionLocalState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLocalState::~RegionLocalState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RegionLocalState)
  SharedDtor();
}

void RegionLocalState::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void RegionLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLocalState_descriptor_;
}

const RegionLocalState& RegionLocalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fserverpb_2eproto();
  return *default_instance_;
}

RegionLocalState* RegionLocalState::default_instance_ = NULL;

RegionLocalState* RegionLocalState::New() const {
  return new RegionLocalState;
}

void RegionLocalState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RegionLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_serverpb.PeerState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_serverpb::PeerState_IsValid(value)) {
            set_state(static_cast< ::raft_serverpb::PeerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RegionLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RegionLocalState)
  return false;
#undef DO_
}

void RegionLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RegionLocalState)
  // optional .raft_serverpb.PeerState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .metapb.Region region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_serverpb.RegionLocalState)
}

::google::protobuf::uint8* RegionLocalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RegionLocalState)
  // optional .raft_serverpb.PeerState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .metapb.Region region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RegionLocalState)
  return target;
}

int RegionLocalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_serverpb.PeerState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .metapb.Region region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLocalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLocalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLocalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLocalState::MergeFrom(const RegionLocalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLocalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLocalState::CopyFrom(const RegionLocalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLocalState::IsInitialized() const {

  return true;
}

void RegionLocalState::Swap(RegionLocalState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLocalState_descriptor_;
  metadata.reflection = RegionLocalState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_serverpb

// @@protoc_insertion_point(global_scope)
