// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errorpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace errorpb {

namespace {

const ::google::protobuf::Descriptor* NotLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreNotMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreNotMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionNotFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionNotFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyNotInRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyNotInRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaleEpoch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaleEpoch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerIsBusy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerIsBusy_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaleCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftEntryTooLarge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftEntryTooLarge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_errorpb_2eproto() {
  protobuf_AddDesc_errorpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "errorpb.proto");
  GOOGLE_CHECK(file != NULL);
  NotLeader_descriptor_ = file->message_type(0);
  static const int NotLeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, leader_),
  };
  NotLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotLeader_descriptor_,
      NotLeader::default_instance_,
      NotLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotLeader));
  StoreNotMatch_descriptor_ = file->message_type(1);
  static const int StoreNotMatch_offsets_[1] = {
  };
  StoreNotMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreNotMatch_descriptor_,
      StoreNotMatch::default_instance_,
      StoreNotMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreNotMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreNotMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreNotMatch));
  RegionNotFound_descriptor_ = file->message_type(2);
  static const int RegionNotFound_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionNotFound, region_id_),
  };
  RegionNotFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionNotFound_descriptor_,
      RegionNotFound::default_instance_,
      RegionNotFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionNotFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionNotFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionNotFound));
  KeyNotInRegion_descriptor_ = file->message_type(3);
  static const int KeyNotInRegion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, end_key_),
  };
  KeyNotInRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyNotInRegion_descriptor_,
      KeyNotInRegion::default_instance_,
      KeyNotInRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyNotInRegion));
  StaleEpoch_descriptor_ = file->message_type(4);
  static const int StaleEpoch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, new_regions_),
  };
  StaleEpoch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaleEpoch_descriptor_,
      StaleEpoch::default_instance_,
      StaleEpoch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaleEpoch));
  ServerIsBusy_descriptor_ = file->message_type(5);
  static const int ServerIsBusy_offsets_[1] = {
  };
  ServerIsBusy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerIsBusy_descriptor_,
      ServerIsBusy::default_instance_,
      ServerIsBusy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerIsBusy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerIsBusy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerIsBusy));
  StaleCommand_descriptor_ = file->message_type(6);
  static const int StaleCommand_offsets_[1] = {
  };
  StaleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaleCommand_descriptor_,
      StaleCommand::default_instance_,
      StaleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaleCommand));
  RaftEntryTooLarge_descriptor_ = file->message_type(7);
  static const int RaftEntryTooLarge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, entry_size_),
  };
  RaftEntryTooLarge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftEntryTooLarge_descriptor_,
      RaftEntryTooLarge::default_instance_,
      RaftEntryTooLarge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftEntryTooLarge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftEntryTooLarge));
  Error_descriptor_ = file->message_type(8);
  static const int Error_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, not_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, region_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, key_not_in_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, server_is_busy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, store_not_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, raft_entry_too_large_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_errorpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotLeader_descriptor_, &NotLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreNotMatch_descriptor_, &StoreNotMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionNotFound_descriptor_, &RegionNotFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyNotInRegion_descriptor_, &KeyNotInRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaleEpoch_descriptor_, &StaleEpoch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerIsBusy_descriptor_, &ServerIsBusy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaleCommand_descriptor_, &StaleCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftEntryTooLarge_descriptor_, &RaftEntryTooLarge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_errorpb_2eproto() {
  delete NotLeader::default_instance_;
  delete NotLeader_reflection_;
  delete StoreNotMatch::default_instance_;
  delete StoreNotMatch_reflection_;
  delete RegionNotFound::default_instance_;
  delete RegionNotFound_reflection_;
  delete KeyNotInRegion::default_instance_;
  delete KeyNotInRegion_reflection_;
  delete StaleEpoch::default_instance_;
  delete StaleEpoch_reflection_;
  delete ServerIsBusy::default_instance_;
  delete ServerIsBusy_reflection_;
  delete StaleCommand::default_instance_;
  delete StaleCommand_reflection_;
  delete RaftEntryTooLarge::default_instance_;
  delete RaftEntryTooLarge_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_errorpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rerrorpb.proto\022\007errorpb\032\014metapb.proto\"<"
    "\n\tNotLeader\022\021\n\tregion_id\030\001 \001(\004\022\034\n\006leader"
    "\030\002 \001(\0132\014.metapb.Peer\"\017\n\rStoreNotMatch\"#\n"
    "\016RegionNotFound\022\021\n\tregion_id\030\001 \001(\004\"T\n\016Ke"
    "yNotInRegion\022\013\n\003key\030\001 \001(\014\022\021\n\tregion_id\030\002"
    " \001(\004\022\021\n\tstart_key\030\003 \001(\014\022\017\n\007end_key\030\004 \001(\014"
    "\"1\n\nStaleEpoch\022#\n\013new_regions\030\001 \003(\0132\016.me"
    "tapb.Region\"\016\n\014ServerIsBusy\"\016\n\014StaleComm"
    "and\":\n\021RaftEntryTooLarge\022\021\n\tregion_id\030\001 "
    "\001(\004\022\022\n\nentry_size\030\002 \001(\004\"\231\003\n\005Error\022\017\n\007mes"
    "sage\030\001 \001(\t\022&\n\nnot_leader\030\002 \001(\0132\022.errorpb"
    ".NotLeader\0221\n\020region_not_found\030\003 \001(\0132\027.e"
    "rrorpb.RegionNotFound\0222\n\021key_not_in_regi"
    "on\030\004 \001(\0132\027.errorpb.KeyNotInRegion\022(\n\013sta"
    "le_epoch\030\005 \001(\0132\023.errorpb.StaleEpoch\022-\n\016s"
    "erver_is_busy\030\006 \001(\0132\025.errorpb.ServerIsBu"
    "sy\022,\n\rstale_command\030\007 \001(\0132\025.errorpb.Stal"
    "eCommand\022/\n\017store_not_match\030\010 \001(\0132\026.erro"
    "rpb.StoreNotMatch\0228\n\024raft_entry_too_larg"
    "e\030\t \001(\0132\032.errorpb.RaftEntryTooLarge", 795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errorpb.proto", &protobuf_RegisterTypes);
  NotLeader::default_instance_ = new NotLeader();
  StoreNotMatch::default_instance_ = new StoreNotMatch();
  RegionNotFound::default_instance_ = new RegionNotFound();
  KeyNotInRegion::default_instance_ = new KeyNotInRegion();
  StaleEpoch::default_instance_ = new StaleEpoch();
  ServerIsBusy::default_instance_ = new ServerIsBusy();
  StaleCommand::default_instance_ = new StaleCommand();
  RaftEntryTooLarge::default_instance_ = new RaftEntryTooLarge();
  Error::default_instance_ = new Error();
  NotLeader::default_instance_->InitAsDefaultInstance();
  StoreNotMatch::default_instance_->InitAsDefaultInstance();
  RegionNotFound::default_instance_->InitAsDefaultInstance();
  KeyNotInRegion::default_instance_->InitAsDefaultInstance();
  StaleEpoch::default_instance_->InitAsDefaultInstance();
  ServerIsBusy::default_instance_->InitAsDefaultInstance();
  StaleCommand::default_instance_->InitAsDefaultInstance();
  RaftEntryTooLarge::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_errorpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_errorpb_2eproto {
  StaticDescriptorInitializer_errorpb_2eproto() {
    protobuf_AddDesc_errorpb_2eproto();
  }
} static_descriptor_initializer_errorpb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotLeader::kRegionIdFieldNumber;
const int NotLeader::kLeaderFieldNumber;
#endif  // !_MSC_VER

NotLeader::NotLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.NotLeader)
}

void NotLeader::InitAsDefaultInstance() {
  leader_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

NotLeader::NotLeader(const NotLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.NotLeader)
}

void NotLeader::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotLeader::~NotLeader() {
  // @@protoc_insertion_point(destructor:errorpb.NotLeader)
  SharedDtor();
}

void NotLeader::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
  }
}

void NotLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotLeader_descriptor_;
}

const NotLeader& NotLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

NotLeader* NotLeader::default_instance_ = NULL;

NotLeader* NotLeader::New() const {
  return new NotLeader;
}

void NotLeader::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_leader()) {
      if (leader_ != NULL) leader_->::metapb::Peer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.NotLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.NotLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.NotLeader)
  return false;
#undef DO_
}

void NotLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.NotLeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.NotLeader)
}

::google::protobuf::uint8* NotLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.NotLeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.NotLeader)
  return target;
}

int NotLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.Peer leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotLeader::MergeFrom(const NotLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotLeader::CopyFrom(const NotLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotLeader::IsInitialized() const {

  return true;
}

void NotLeader::Swap(NotLeader* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotLeader_descriptor_;
  metadata.reflection = NotLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StoreNotMatch::StoreNotMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StoreNotMatch)
}

void StoreNotMatch::InitAsDefaultInstance() {
}

StoreNotMatch::StoreNotMatch(const StoreNotMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.StoreNotMatch)
}

void StoreNotMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreNotMatch::~StoreNotMatch() {
  // @@protoc_insertion_point(destructor:errorpb.StoreNotMatch)
  SharedDtor();
}

void StoreNotMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreNotMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreNotMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreNotMatch_descriptor_;
}

const StoreNotMatch& StoreNotMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

StoreNotMatch* StoreNotMatch::default_instance_ = NULL;

StoreNotMatch* StoreNotMatch::New() const {
  return new StoreNotMatch;
}

void StoreNotMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreNotMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StoreNotMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StoreNotMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StoreNotMatch)
  return false;
#undef DO_
}

void StoreNotMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StoreNotMatch)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StoreNotMatch)
}

::google::protobuf::uint8* StoreNotMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StoreNotMatch)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StoreNotMatch)
  return target;
}

int StoreNotMatch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreNotMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreNotMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreNotMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreNotMatch::MergeFrom(const StoreNotMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreNotMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreNotMatch::CopyFrom(const StoreNotMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreNotMatch::IsInitialized() const {

  return true;
}

void StoreNotMatch::Swap(StoreNotMatch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreNotMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreNotMatch_descriptor_;
  metadata.reflection = StoreNotMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionNotFound::kRegionIdFieldNumber;
#endif  // !_MSC_VER

RegionNotFound::RegionNotFound()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.RegionNotFound)
}

void RegionNotFound::InitAsDefaultInstance() {
}

RegionNotFound::RegionNotFound(const RegionNotFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.RegionNotFound)
}

void RegionNotFound::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionNotFound::~RegionNotFound() {
  // @@protoc_insertion_point(destructor:errorpb.RegionNotFound)
  SharedDtor();
}

void RegionNotFound::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionNotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionNotFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionNotFound_descriptor_;
}

const RegionNotFound& RegionNotFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

RegionNotFound* RegionNotFound::default_instance_ = NULL;

RegionNotFound* RegionNotFound::New() const {
  return new RegionNotFound;
}

void RegionNotFound::Clear() {
  region_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionNotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.RegionNotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.RegionNotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.RegionNotFound)
  return false;
#undef DO_
}

void RegionNotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.RegionNotFound)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.RegionNotFound)
}

::google::protobuf::uint8* RegionNotFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RegionNotFound)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RegionNotFound)
  return target;
}

int RegionNotFound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionNotFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionNotFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionNotFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionNotFound::MergeFrom(const RegionNotFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionNotFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionNotFound::CopyFrom(const RegionNotFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionNotFound::IsInitialized() const {

  return true;
}

void RegionNotFound::Swap(RegionNotFound* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionNotFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionNotFound_descriptor_;
  metadata.reflection = RegionNotFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyNotInRegion::kKeyFieldNumber;
const int KeyNotInRegion::kRegionIdFieldNumber;
const int KeyNotInRegion::kStartKeyFieldNumber;
const int KeyNotInRegion::kEndKeyFieldNumber;
#endif  // !_MSC_VER

KeyNotInRegion::KeyNotInRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.KeyNotInRegion)
}

void KeyNotInRegion::InitAsDefaultInstance() {
}

KeyNotInRegion::KeyNotInRegion(const KeyNotInRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.KeyNotInRegion)
}

void KeyNotInRegion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_id_ = GOOGLE_ULONGLONG(0);
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyNotInRegion::~KeyNotInRegion() {
  // @@protoc_insertion_point(destructor:errorpb.KeyNotInRegion)
  SharedDtor();
}

void KeyNotInRegion::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (this != default_instance_) {
  }
}

void KeyNotInRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyNotInRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyNotInRegion_descriptor_;
}

const KeyNotInRegion& KeyNotInRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

KeyNotInRegion* KeyNotInRegion::default_instance_ = NULL;

KeyNotInRegion* KeyNotInRegion::New() const {
  return new KeyNotInRegion;
}

void KeyNotInRegion::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyNotInRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.KeyNotInRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional uint64 region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 3;
      case 3: {
        if (tag == 26) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 4;
      case 4: {
        if (tag == 34) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.KeyNotInRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.KeyNotInRegion)
  return false;
#undef DO_
}

void KeyNotInRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.KeyNotInRegion)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 region_id = 2;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // optional bytes start_key = 3;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_key(), output);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.KeyNotInRegion)
}

::google::protobuf::uint8* KeyNotInRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.KeyNotInRegion)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional uint64 region_id = 2;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // optional bytes start_key = 3;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_key(), target);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.KeyNotInRegion)
  return target;
}

int KeyNotInRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional bytes start_key = 3;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 4;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyNotInRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyNotInRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyNotInRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyNotInRegion::MergeFrom(const KeyNotInRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyNotInRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyNotInRegion::CopyFrom(const KeyNotInRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyNotInRegion::IsInitialized() const {

  return true;
}

void KeyNotInRegion::Swap(KeyNotInRegion* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(region_id_, other->region_id_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyNotInRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyNotInRegion_descriptor_;
  metadata.reflection = KeyNotInRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaleEpoch::kNewRegionsFieldNumber;
#endif  // !_MSC_VER

StaleEpoch::StaleEpoch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleEpoch)
}

void StaleEpoch::InitAsDefaultInstance() {
}

StaleEpoch::StaleEpoch(const StaleEpoch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleEpoch)
}

void StaleEpoch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaleEpoch::~StaleEpoch() {
  // @@protoc_insertion_point(destructor:errorpb.StaleEpoch)
  SharedDtor();
}

void StaleEpoch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaleEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleEpoch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaleEpoch_descriptor_;
}

const StaleEpoch& StaleEpoch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

StaleEpoch* StaleEpoch::default_instance_ = NULL;

StaleEpoch* StaleEpoch::New() const {
  return new StaleEpoch;
}

void StaleEpoch::Clear() {
  new_regions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaleEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metapb.Region new_regions = 1;
      case 1: {
        if (tag == 10) {
         parse_new_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_new_regions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleEpoch)
  return false;
#undef DO_
}

void StaleEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleEpoch)
  // repeated .metapb.Region new_regions = 1;
  for (int i = 0; i < this->new_regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_regions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleEpoch)
}

::google::protobuf::uint8* StaleEpoch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleEpoch)
  // repeated .metapb.Region new_regions = 1;
  for (int i = 0; i < this->new_regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_regions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleEpoch)
  return target;
}

int StaleEpoch::ByteSize() const {
  int total_size = 0;

  // repeated .metapb.Region new_regions = 1;
  total_size += 1 * this->new_regions_size();
  for (int i = 0; i < this->new_regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_regions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleEpoch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaleEpoch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaleEpoch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaleEpoch::MergeFrom(const StaleEpoch& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_regions_.MergeFrom(from.new_regions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaleEpoch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleEpoch::CopyFrom(const StaleEpoch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleEpoch::IsInitialized() const {

  return true;
}

void StaleEpoch::Swap(StaleEpoch* other) {
  if (other != this) {
    new_regions_.Swap(&other->new_regions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaleEpoch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaleEpoch_descriptor_;
  metadata.reflection = StaleEpoch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerIsBusy::ServerIsBusy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.ServerIsBusy)
}

void ServerIsBusy::InitAsDefaultInstance() {
}

ServerIsBusy::ServerIsBusy(const ServerIsBusy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.ServerIsBusy)
}

void ServerIsBusy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerIsBusy::~ServerIsBusy() {
  // @@protoc_insertion_point(destructor:errorpb.ServerIsBusy)
  SharedDtor();
}

void ServerIsBusy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerIsBusy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerIsBusy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerIsBusy_descriptor_;
}

const ServerIsBusy& ServerIsBusy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

ServerIsBusy* ServerIsBusy::default_instance_ = NULL;

ServerIsBusy* ServerIsBusy::New() const {
  return new ServerIsBusy;
}

void ServerIsBusy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerIsBusy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.ServerIsBusy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.ServerIsBusy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.ServerIsBusy)
  return false;
#undef DO_
}

void ServerIsBusy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.ServerIsBusy)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.ServerIsBusy)
}

::google::protobuf::uint8* ServerIsBusy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.ServerIsBusy)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.ServerIsBusy)
  return target;
}

int ServerIsBusy::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerIsBusy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerIsBusy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerIsBusy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerIsBusy::MergeFrom(const ServerIsBusy& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerIsBusy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerIsBusy::CopyFrom(const ServerIsBusy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerIsBusy::IsInitialized() const {

  return true;
}

void ServerIsBusy::Swap(ServerIsBusy* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerIsBusy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerIsBusy_descriptor_;
  metadata.reflection = ServerIsBusy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StaleCommand::StaleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleCommand)
}

void StaleCommand::InitAsDefaultInstance() {
}

StaleCommand::StaleCommand(const StaleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleCommand)
}

void StaleCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaleCommand::~StaleCommand() {
  // @@protoc_insertion_point(destructor:errorpb.StaleCommand)
  SharedDtor();
}

void StaleCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaleCommand_descriptor_;
}

const StaleCommand& StaleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

StaleCommand* StaleCommand::default_instance_ = NULL;

StaleCommand* StaleCommand::New() const {
  return new StaleCommand;
}

void StaleCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleCommand)
  return false;
#undef DO_
}

void StaleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleCommand)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleCommand)
}

::google::protobuf::uint8* StaleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleCommand)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleCommand)
  return target;
}

int StaleCommand::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaleCommand::MergeFrom(const StaleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleCommand::CopyFrom(const StaleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleCommand::IsInitialized() const {

  return true;
}

void StaleCommand::Swap(StaleCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaleCommand_descriptor_;
  metadata.reflection = StaleCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftEntryTooLarge::kRegionIdFieldNumber;
const int RaftEntryTooLarge::kEntrySizeFieldNumber;
#endif  // !_MSC_VER

RaftEntryTooLarge::RaftEntryTooLarge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.RaftEntryTooLarge)
}

void RaftEntryTooLarge::InitAsDefaultInstance() {
}

RaftEntryTooLarge::RaftEntryTooLarge(const RaftEntryTooLarge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.RaftEntryTooLarge)
}

void RaftEntryTooLarge::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  entry_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftEntryTooLarge::~RaftEntryTooLarge() {
  // @@protoc_insertion_point(destructor:errorpb.RaftEntryTooLarge)
  SharedDtor();
}

void RaftEntryTooLarge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftEntryTooLarge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftEntryTooLarge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftEntryTooLarge_descriptor_;
}

const RaftEntryTooLarge& RaftEntryTooLarge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

RaftEntryTooLarge* RaftEntryTooLarge::default_instance_ = NULL;

RaftEntryTooLarge* RaftEntryTooLarge::New() const {
  return new RaftEntryTooLarge;
}

void RaftEntryTooLarge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaftEntryTooLarge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(region_id_, entry_size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftEntryTooLarge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.RaftEntryTooLarge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entry_size;
        break;
      }

      // optional uint64 entry_size = 2;
      case 2: {
        if (tag == 16) {
         parse_entry_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_size_)));
          set_has_entry_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.RaftEntryTooLarge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.RaftEntryTooLarge)
  return false;
#undef DO_
}

void RaftEntryTooLarge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.RaftEntryTooLarge)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional uint64 entry_size = 2;
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entry_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.RaftEntryTooLarge)
}

::google::protobuf::uint8* RaftEntryTooLarge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RaftEntryTooLarge)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional uint64 entry_size = 2;
  if (has_entry_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entry_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RaftEntryTooLarge)
  return target;
}

int RaftEntryTooLarge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional uint64 entry_size = 2;
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entry_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftEntryTooLarge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftEntryTooLarge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftEntryTooLarge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftEntryTooLarge::MergeFrom(const RaftEntryTooLarge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_entry_size()) {
      set_entry_size(from.entry_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftEntryTooLarge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftEntryTooLarge::CopyFrom(const RaftEntryTooLarge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftEntryTooLarge::IsInitialized() const {

  return true;
}

void RaftEntryTooLarge::Swap(RaftEntryTooLarge* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(entry_size_, other->entry_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftEntryTooLarge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftEntryTooLarge_descriptor_;
  metadata.reflection = RaftEntryTooLarge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kMessageFieldNumber;
const int Error::kNotLeaderFieldNumber;
const int Error::kRegionNotFoundFieldNumber;
const int Error::kKeyNotInRegionFieldNumber;
const int Error::kStaleEpochFieldNumber;
const int Error::kServerIsBusyFieldNumber;
const int Error::kStaleCommandFieldNumber;
const int Error::kStoreNotMatchFieldNumber;
const int Error::kRaftEntryTooLargeFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.Error)
}

void Error::InitAsDefaultInstance() {
  not_leader_ = const_cast< ::errorpb::NotLeader*>(&::errorpb::NotLeader::default_instance());
  region_not_found_ = const_cast< ::errorpb::RegionNotFound*>(&::errorpb::RegionNotFound::default_instance());
  key_not_in_region_ = const_cast< ::errorpb::KeyNotInRegion*>(&::errorpb::KeyNotInRegion::default_instance());
  stale_epoch_ = const_cast< ::errorpb::StaleEpoch*>(&::errorpb::StaleEpoch::default_instance());
  server_is_busy_ = const_cast< ::errorpb::ServerIsBusy*>(&::errorpb::ServerIsBusy::default_instance());
  stale_command_ = const_cast< ::errorpb::StaleCommand*>(&::errorpb::StaleCommand::default_instance());
  store_not_match_ = const_cast< ::errorpb::StoreNotMatch*>(&::errorpb::StoreNotMatch::default_instance());
  raft_entry_too_large_ = const_cast< ::errorpb::RaftEntryTooLarge*>(&::errorpb::RaftEntryTooLarge::default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:errorpb.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  not_leader_ = NULL;
  region_not_found_ = NULL;
  key_not_in_region_ = NULL;
  stale_epoch_ = NULL;
  server_is_busy_ = NULL;
  stale_command_ = NULL;
  store_not_match_ = NULL;
  raft_entry_too_large_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:errorpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete not_leader_;
    delete region_not_found_;
    delete key_not_in_region_;
    delete stale_epoch_;
    delete server_is_busy_;
    delete stale_command_;
    delete store_not_match_;
    delete raft_entry_too_large_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_errorpb_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_not_leader()) {
      if (not_leader_ != NULL) not_leader_->::errorpb::NotLeader::Clear();
    }
    if (has_region_not_found()) {
      if (region_not_found_ != NULL) region_not_found_->::errorpb::RegionNotFound::Clear();
    }
    if (has_key_not_in_region()) {
      if (key_not_in_region_ != NULL) key_not_in_region_->::errorpb::KeyNotInRegion::Clear();
    }
    if (has_stale_epoch()) {
      if (stale_epoch_ != NULL) stale_epoch_->::errorpb::StaleEpoch::Clear();
    }
    if (has_server_is_busy()) {
      if (server_is_busy_ != NULL) server_is_busy_->::errorpb::ServerIsBusy::Clear();
    }
    if (has_stale_command()) {
      if (stale_command_ != NULL) stale_command_->::errorpb::StaleCommand::Clear();
    }
    if (has_store_not_match()) {
      if (store_not_match_ != NULL) store_not_match_->::errorpb::StoreNotMatch::Clear();
    }
  }
  if (has_raft_entry_too_large()) {
    if (raft_entry_too_large_ != NULL) raft_entry_too_large_->::errorpb::RaftEntryTooLarge::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_not_leader;
        break;
      }

      // optional .errorpb.NotLeader not_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_not_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_not_found;
        break;
      }

      // optional .errorpb.RegionNotFound region_not_found = 3;
      case 3: {
        if (tag == 26) {
         parse_region_not_found:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_not_found()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key_not_in_region;
        break;
      }

      // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
      case 4: {
        if (tag == 34) {
         parse_key_not_in_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_not_in_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stale_epoch;
        break;
      }

      // optional .errorpb.StaleEpoch stale_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_stale_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server_is_busy;
        break;
      }

      // optional .errorpb.ServerIsBusy server_is_busy = 6;
      case 6: {
        if (tag == 50) {
         parse_server_is_busy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_is_busy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stale_command;
        break;
      }

      // optional .errorpb.StaleCommand stale_command = 7;
      case 7: {
        if (tag == 58) {
         parse_stale_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_store_not_match;
        break;
      }

      // optional .errorpb.StoreNotMatch store_not_match = 8;
      case 8: {
        if (tag == 66) {
         parse_store_not_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_not_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_raft_entry_too_large;
        break;
      }

      // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
      case 9: {
        if (tag == 74) {
         parse_raft_entry_too_large:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft_entry_too_large()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .errorpb.NotLeader not_leader = 2;
  if (has_not_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->not_leader(), output);
  }

  // optional .errorpb.RegionNotFound region_not_found = 3;
  if (has_region_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region_not_found(), output);
  }

  // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
  if (has_key_not_in_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->key_not_in_region(), output);
  }

  // optional .errorpb.StaleEpoch stale_epoch = 5;
  if (has_stale_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stale_epoch(), output);
  }

  // optional .errorpb.ServerIsBusy server_is_busy = 6;
  if (has_server_is_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->server_is_busy(), output);
  }

  // optional .errorpb.StaleCommand stale_command = 7;
  if (has_stale_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stale_command(), output);
  }

  // optional .errorpb.StoreNotMatch store_not_match = 8;
  if (has_store_not_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->store_not_match(), output);
  }

  // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
  if (has_raft_entry_too_large()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->raft_entry_too_large(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional .errorpb.NotLeader not_leader = 2;
  if (has_not_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->not_leader(), target);
  }

  // optional .errorpb.RegionNotFound region_not_found = 3;
  if (has_region_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region_not_found(), target);
  }

  // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
  if (has_key_not_in_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->key_not_in_region(), target);
  }

  // optional .errorpb.StaleEpoch stale_epoch = 5;
  if (has_stale_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stale_epoch(), target);
  }

  // optional .errorpb.ServerIsBusy server_is_busy = 6;
  if (has_server_is_busy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->server_is_busy(), target);
  }

  // optional .errorpb.StaleCommand stale_command = 7;
  if (has_stale_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stale_command(), target);
  }

  // optional .errorpb.StoreNotMatch store_not_match = 8;
  if (has_store_not_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->store_not_match(), target);
  }

  // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
  if (has_raft_entry_too_large()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->raft_entry_too_large(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .errorpb.NotLeader not_leader = 2;
    if (has_not_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->not_leader());
    }

    // optional .errorpb.RegionNotFound region_not_found = 3;
    if (has_region_not_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_not_found());
    }

    // optional .errorpb.KeyNotInRegion key_not_in_region = 4;
    if (has_key_not_in_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_not_in_region());
    }

    // optional .errorpb.StaleEpoch stale_epoch = 5;
    if (has_stale_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stale_epoch());
    }

    // optional .errorpb.ServerIsBusy server_is_busy = 6;
    if (has_server_is_busy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_is_busy());
    }

    // optional .errorpb.StaleCommand stale_command = 7;
    if (has_stale_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stale_command());
    }

    // optional .errorpb.StoreNotMatch store_not_match = 8;
    if (has_store_not_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_not_match());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
    if (has_raft_entry_too_large()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raft_entry_too_large());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_not_leader()) {
      mutable_not_leader()->::errorpb::NotLeader::MergeFrom(from.not_leader());
    }
    if (from.has_region_not_found()) {
      mutable_region_not_found()->::errorpb::RegionNotFound::MergeFrom(from.region_not_found());
    }
    if (from.has_key_not_in_region()) {
      mutable_key_not_in_region()->::errorpb::KeyNotInRegion::MergeFrom(from.key_not_in_region());
    }
    if (from.has_stale_epoch()) {
      mutable_stale_epoch()->::errorpb::StaleEpoch::MergeFrom(from.stale_epoch());
    }
    if (from.has_server_is_busy()) {
      mutable_server_is_busy()->::errorpb::ServerIsBusy::MergeFrom(from.server_is_busy());
    }
    if (from.has_stale_command()) {
      mutable_stale_command()->::errorpb::StaleCommand::MergeFrom(from.stale_command());
    }
    if (from.has_store_not_match()) {
      mutable_store_not_match()->::errorpb::StoreNotMatch::MergeFrom(from.store_not_match());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_raft_entry_too_large()) {
      mutable_raft_entry_too_large()->::errorpb::RaftEntryTooLarge::MergeFrom(from.raft_entry_too_large());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(not_leader_, other->not_leader_);
    std::swap(region_not_found_, other->region_not_found_);
    std::swap(key_not_in_region_, other->key_not_in_region_);
    std::swap(stale_epoch_, other->stale_epoch_);
    std::swap(server_is_busy_, other->server_is_busy_);
    std::swap(stale_command_, other->stale_command_);
    std::swap(store_not_match_, other->store_not_match_);
    std::swap(raft_entry_too_large_, other->raft_entry_too_large_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace errorpb

// @@protoc_insertion_point(global_scope)
