// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pdpb {

namespace {

const ::google::protobuf::Descriptor* Leader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Leader_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsBootstrappedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsBootstrappedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsBootstrappedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsBootstrappedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocVolumeIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocVolumeIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocVolumeIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocVolumeIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionByIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionByIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PDMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPDMembersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPDMembersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPDMembersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPDMembersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionHeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionHeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutClusterConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutClusterConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutClusterConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutClusterConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreHeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreHeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrappedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrappedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIsTombstoneError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIsTombstoneError_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pdpb_2eproto() {
  protobuf_AddDesc_pdpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pdpb.proto");
  GOOGLE_CHECK(file != NULL);
  Leader_descriptor_ = file->message_type(0);
  static const int Leader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, id_),
  };
  Leader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Leader_descriptor_,
      Leader::default_instance_,
      Leader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Leader));
  TsoRequest_descriptor_ = file->message_type(1);
  static const int TsoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoRequest, count_),
  };
  TsoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsoRequest_descriptor_,
      TsoRequest::default_instance_,
      TsoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsoRequest));
  Timestamp_descriptor_ = file->message_type(2);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, physical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, logical_),
  };
  Timestamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timestamp));
  TsoResponse_descriptor_ = file->message_type(3);
  static const int TsoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, timestamp_),
  };
  TsoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsoResponse_descriptor_,
      TsoResponse::default_instance_,
      TsoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsoResponse));
  BootstrapRequest_descriptor_ = file->message_type(4);
  static const int BootstrapRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, region_),
  };
  BootstrapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootstrapRequest_descriptor_,
      BootstrapRequest::default_instance_,
      BootstrapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootstrapRequest));
  BootstrapResponse_descriptor_ = file->message_type(5);
  static const int BootstrapResponse_offsets_[1] = {
  };
  BootstrapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootstrapResponse_descriptor_,
      BootstrapResponse::default_instance_,
      BootstrapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootstrapResponse));
  IsBootstrappedRequest_descriptor_ = file->message_type(6);
  static const int IsBootstrappedRequest_offsets_[1] = {
  };
  IsBootstrappedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsBootstrappedRequest_descriptor_,
      IsBootstrappedRequest::default_instance_,
      IsBootstrappedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsBootstrappedRequest));
  IsBootstrappedResponse_descriptor_ = file->message_type(7);
  static const int IsBootstrappedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedResponse, bootstrapped_),
  };
  IsBootstrappedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsBootstrappedResponse_descriptor_,
      IsBootstrappedResponse::default_instance_,
      IsBootstrappedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsBootstrappedResponse));
  AllocIdRequest_descriptor_ = file->message_type(8);
  static const int AllocIdRequest_offsets_[1] = {
  };
  AllocIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocIdRequest_descriptor_,
      AllocIdRequest::default_instance_,
      AllocIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocIdRequest));
  AllocIdResponse_descriptor_ = file->message_type(9);
  static const int AllocIdResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIdResponse, id_),
  };
  AllocIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocIdResponse_descriptor_,
      AllocIdResponse::default_instance_,
      AllocIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocIdResponse));
  AllocVolumeIdRequest_descriptor_ = file->message_type(10);
  static const int AllocVolumeIdRequest_offsets_[1] = {
  };
  AllocVolumeIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocVolumeIdRequest_descriptor_,
      AllocVolumeIdRequest::default_instance_,
      AllocVolumeIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocVolumeIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocVolumeIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocVolumeIdRequest));
  AllocVolumeIdResponse_descriptor_ = file->message_type(11);
  static const int AllocVolumeIdResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocVolumeIdResponse, id_),
  };
  AllocVolumeIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocVolumeIdResponse_descriptor_,
      AllocVolumeIdResponse::default_instance_,
      AllocVolumeIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocVolumeIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocVolumeIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocVolumeIdResponse));
  GetStoreRequest_descriptor_ = file->message_type(12);
  static const int GetStoreRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreRequest, store_id_),
  };
  GetStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreRequest_descriptor_,
      GetStoreRequest::default_instance_,
      GetStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreRequest));
  GetStoreResponse_descriptor_ = file->message_type(13);
  static const int GetStoreResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreResponse, store_),
  };
  GetStoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreResponse_descriptor_,
      GetStoreResponse::default_instance_,
      GetStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreResponse));
  GetRegionRequest_descriptor_ = file->message_type(14);
  static const int GetRegionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionRequest, region_key_),
  };
  GetRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegionRequest_descriptor_,
      GetRegionRequest::default_instance_,
      GetRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegionRequest));
  GetRegionResponse_descriptor_ = file->message_type(15);
  static const int GetRegionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, leader_),
  };
  GetRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegionResponse_descriptor_,
      GetRegionResponse::default_instance_,
      GetRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegionResponse));
  GetRegionByIDRequest_descriptor_ = file->message_type(16);
  static const int GetRegionByIDRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionByIDRequest, region_id_),
  };
  GetRegionByIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegionByIDRequest_descriptor_,
      GetRegionByIDRequest::default_instance_,
      GetRegionByIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionByIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionByIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegionByIDRequest));
  GetClusterConfigRequest_descriptor_ = file->message_type(17);
  static const int GetClusterConfigRequest_offsets_[1] = {
  };
  GetClusterConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterConfigRequest_descriptor_,
      GetClusterConfigRequest::default_instance_,
      GetClusterConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterConfigRequest));
  GetClusterConfigResponse_descriptor_ = file->message_type(18);
  static const int GetClusterConfigResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigResponse, cluster_),
  };
  GetClusterConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterConfigResponse_descriptor_,
      GetClusterConfigResponse::default_instance_,
      GetClusterConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterConfigResponse));
  PutStoreRequest_descriptor_ = file->message_type(19);
  static const int PutStoreRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreRequest, store_),
  };
  PutStoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutStoreRequest_descriptor_,
      PutStoreRequest::default_instance_,
      PutStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutStoreRequest));
  PutStoreResponse_descriptor_ = file->message_type(20);
  static const int PutStoreResponse_offsets_[1] = {
  };
  PutStoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutStoreResponse_descriptor_,
      PutStoreResponse::default_instance_,
      PutStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutStoreResponse));
  PDMember_descriptor_ = file->message_type(21);
  static const int PDMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDMember, client_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDMember, peer_urls_),
  };
  PDMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDMember_descriptor_,
      PDMember::default_instance_,
      PDMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDMember));
  GetPDMembersRequest_descriptor_ = file->message_type(22);
  static const int GetPDMembersRequest_offsets_[1] = {
  };
  GetPDMembersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPDMembersRequest_descriptor_,
      GetPDMembersRequest::default_instance_,
      GetPDMembersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPDMembersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPDMembersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPDMembersRequest));
  GetPDMembersResponse_descriptor_ = file->message_type(23);
  static const int GetPDMembersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPDMembersResponse, members_),
  };
  GetPDMembersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPDMembersResponse_descriptor_,
      GetPDMembersResponse::default_instance_,
      GetPDMembersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPDMembersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPDMembersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPDMembersResponse));
  PeerStats_descriptor_ = file->message_type(24);
  static const int PeerStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, down_seconds_),
  };
  PeerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerStats_descriptor_,
      PeerStats::default_instance_,
      PeerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerStats));
  RegionHeartbeatRequest_descriptor_ = file->message_type(25);
  static const int RegionHeartbeatRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, down_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, pending_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, bytes_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, bytes_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, keys_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, keys_read_),
  };
  RegionHeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionHeartbeatRequest_descriptor_,
      RegionHeartbeatRequest::default_instance_,
      RegionHeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionHeartbeatRequest));
  ChangePeer_descriptor_ = file->message_type(26);
  static const int ChangePeer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, peer_),
  };
  ChangePeer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePeer_descriptor_,
      ChangePeer::default_instance_,
      ChangePeer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePeer));
  TransferLeader_descriptor_ = file->message_type(27);
  static const int TransferLeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeader, peer_),
  };
  TransferLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeader_descriptor_,
      TransferLeader::default_instance_,
      TransferLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeader));
  RegionHeartbeatResponse_descriptor_ = file->message_type(28);
  static const int RegionHeartbeatResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, transfer_leader_),
  };
  RegionHeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionHeartbeatResponse_descriptor_,
      RegionHeartbeatResponse::default_instance_,
      RegionHeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionHeartbeatResponse));
  PutClusterConfigRequest_descriptor_ = file->message_type(29);
  static const int PutClusterConfigRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigRequest, cluster_),
  };
  PutClusterConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutClusterConfigRequest_descriptor_,
      PutClusterConfigRequest::default_instance_,
      PutClusterConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutClusterConfigRequest));
  PutClusterConfigResponse_descriptor_ = file->message_type(30);
  static const int PutClusterConfigResponse_offsets_[1] = {
  };
  PutClusterConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutClusterConfigResponse_descriptor_,
      PutClusterConfigResponse::default_instance_,
      PutClusterConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutClusterConfigResponse));
  AskSplitRequest_descriptor_ = file->message_type(31);
  static const int AskSplitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, region_),
  };
  AskSplitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSplitRequest_descriptor_,
      AskSplitRequest::default_instance_,
      AskSplitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSplitRequest));
  AskSplitResponse_descriptor_ = file->message_type(32);
  static const int AskSplitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_peer_ids_),
  };
  AskSplitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSplitResponse_descriptor_,
      AskSplitResponse::default_instance_,
      AskSplitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSplitResponse));
  StoreStats_descriptor_ = file->message_type(33);
  static const int StoreStats_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, region_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, sending_snap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, receiving_snap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, applying_snap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, is_busy_),
  };
  StoreStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreStats_descriptor_,
      StoreStats::default_instance_,
      StoreStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreStats));
  StoreHeartbeatRequest_descriptor_ = file->message_type(34);
  static const int StoreHeartbeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatRequest, stats_),
  };
  StoreHeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreHeartbeatRequest_descriptor_,
      StoreHeartbeatRequest::default_instance_,
      StoreHeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreHeartbeatRequest));
  StoreHeartbeatResponse_descriptor_ = file->message_type(35);
  static const int StoreHeartbeatResponse_offsets_[1] = {
  };
  StoreHeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreHeartbeatResponse_descriptor_,
      StoreHeartbeatResponse::default_instance_,
      StoreHeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreHeartbeatResponse));
  ReportSplitRequest_descriptor_ = file->message_type(36);
  static const int ReportSplitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, right_),
  };
  ReportSplitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSplitRequest_descriptor_,
      ReportSplitRequest::default_instance_,
      ReportSplitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSplitRequest));
  ReportSplitResponse_descriptor_ = file->message_type(37);
  static const int ReportSplitResponse_offsets_[1] = {
  };
  ReportSplitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSplitResponse_descriptor_,
      ReportSplitResponse::default_instance_,
      ReportSplitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSplitResponse));
  RequestHeader_descriptor_ = file->message_type(38);
  static const int RequestHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  };
  RequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHeader_descriptor_,
      RequestHeader::default_instance_,
      RequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHeader));
  ResponseHeader_descriptor_ = file->message_type(39);
  static const int ResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  };
  ResponseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseHeader_descriptor_,
      ResponseHeader::default_instance_,
      ResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseHeader));
  Request_descriptor_ = file->message_type(40);
  static const int Request_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, tso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, bootstrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, is_bootstrapped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, put_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ask_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, region_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_cluster_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, put_cluster_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, store_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, report_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_region_by_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_pd_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, alloc_volume_id_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(41);
  static const int Response_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, tso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, bootstrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, is_bootstrapped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, put_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, ask_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, region_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_cluster_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, put_cluster_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, store_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, report_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_region_by_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_pd_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, alloc_volume_id_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  BootstrappedError_descriptor_ = file->message_type(42);
  static const int BootstrappedError_offsets_[1] = {
  };
  BootstrappedError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BootstrappedError_descriptor_,
      BootstrappedError::default_instance_,
      BootstrappedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BootstrappedError));
  StoreIsTombstoneError_descriptor_ = file->message_type(43);
  static const int StoreIsTombstoneError_offsets_[1] = {
  };
  StoreIsTombstoneError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreIsTombstoneError_descriptor_,
      StoreIsTombstoneError::default_instance_,
      StoreIsTombstoneError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIsTombstoneError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIsTombstoneError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreIsTombstoneError));
  Error_descriptor_ = file->message_type(44);
  static const int Error_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, bootstrapped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, is_tombstone_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  CommandType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pdpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Leader_descriptor_, &Leader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsoRequest_descriptor_, &TsoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsoResponse_descriptor_, &TsoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootstrapRequest_descriptor_, &BootstrapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootstrapResponse_descriptor_, &BootstrapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsBootstrappedRequest_descriptor_, &IsBootstrappedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsBootstrappedResponse_descriptor_, &IsBootstrappedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocIdRequest_descriptor_, &AllocIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocIdResponse_descriptor_, &AllocIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocVolumeIdRequest_descriptor_, &AllocVolumeIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocVolumeIdResponse_descriptor_, &AllocVolumeIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreRequest_descriptor_, &GetStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreResponse_descriptor_, &GetStoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegionRequest_descriptor_, &GetRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegionResponse_descriptor_, &GetRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegionByIDRequest_descriptor_, &GetRegionByIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterConfigRequest_descriptor_, &GetClusterConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterConfigResponse_descriptor_, &GetClusterConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutStoreRequest_descriptor_, &PutStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutStoreResponse_descriptor_, &PutStoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDMember_descriptor_, &PDMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPDMembersRequest_descriptor_, &GetPDMembersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPDMembersResponse_descriptor_, &GetPDMembersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerStats_descriptor_, &PeerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionHeartbeatRequest_descriptor_, &RegionHeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePeer_descriptor_, &ChangePeer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeader_descriptor_, &TransferLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionHeartbeatResponse_descriptor_, &RegionHeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutClusterConfigRequest_descriptor_, &PutClusterConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutClusterConfigResponse_descriptor_, &PutClusterConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSplitRequest_descriptor_, &AskSplitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSplitResponse_descriptor_, &AskSplitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreStats_descriptor_, &StoreStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreHeartbeatRequest_descriptor_, &StoreHeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreHeartbeatResponse_descriptor_, &StoreHeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSplitRequest_descriptor_, &ReportSplitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSplitResponse_descriptor_, &ReportSplitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHeader_descriptor_, &RequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseHeader_descriptor_, &ResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BootstrappedError_descriptor_, &BootstrappedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreIsTombstoneError_descriptor_, &StoreIsTombstoneError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pdpb_2eproto() {
  delete Leader::default_instance_;
  delete Leader_reflection_;
  delete TsoRequest::default_instance_;
  delete TsoRequest_reflection_;
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete TsoResponse::default_instance_;
  delete TsoResponse_reflection_;
  delete BootstrapRequest::default_instance_;
  delete BootstrapRequest_reflection_;
  delete BootstrapResponse::default_instance_;
  delete BootstrapResponse_reflection_;
  delete IsBootstrappedRequest::default_instance_;
  delete IsBootstrappedRequest_reflection_;
  delete IsBootstrappedResponse::default_instance_;
  delete IsBootstrappedResponse_reflection_;
  delete AllocIdRequest::default_instance_;
  delete AllocIdRequest_reflection_;
  delete AllocIdResponse::default_instance_;
  delete AllocIdResponse_reflection_;
  delete AllocVolumeIdRequest::default_instance_;
  delete AllocVolumeIdRequest_reflection_;
  delete AllocVolumeIdResponse::default_instance_;
  delete AllocVolumeIdResponse_reflection_;
  delete GetStoreRequest::default_instance_;
  delete GetStoreRequest_reflection_;
  delete GetStoreResponse::default_instance_;
  delete GetStoreResponse_reflection_;
  delete GetRegionRequest::default_instance_;
  delete GetRegionRequest_reflection_;
  delete GetRegionResponse::default_instance_;
  delete GetRegionResponse_reflection_;
  delete GetRegionByIDRequest::default_instance_;
  delete GetRegionByIDRequest_reflection_;
  delete GetClusterConfigRequest::default_instance_;
  delete GetClusterConfigRequest_reflection_;
  delete GetClusterConfigResponse::default_instance_;
  delete GetClusterConfigResponse_reflection_;
  delete PutStoreRequest::default_instance_;
  delete PutStoreRequest_reflection_;
  delete PutStoreResponse::default_instance_;
  delete PutStoreResponse_reflection_;
  delete PDMember::default_instance_;
  delete PDMember_reflection_;
  delete GetPDMembersRequest::default_instance_;
  delete GetPDMembersRequest_reflection_;
  delete GetPDMembersResponse::default_instance_;
  delete GetPDMembersResponse_reflection_;
  delete PeerStats::default_instance_;
  delete PeerStats_reflection_;
  delete RegionHeartbeatRequest::default_instance_;
  delete RegionHeartbeatRequest_reflection_;
  delete ChangePeer::default_instance_;
  delete ChangePeer_reflection_;
  delete TransferLeader::default_instance_;
  delete TransferLeader_reflection_;
  delete RegionHeartbeatResponse::default_instance_;
  delete RegionHeartbeatResponse_reflection_;
  delete PutClusterConfigRequest::default_instance_;
  delete PutClusterConfigRequest_reflection_;
  delete PutClusterConfigResponse::default_instance_;
  delete PutClusterConfigResponse_reflection_;
  delete AskSplitRequest::default_instance_;
  delete AskSplitRequest_reflection_;
  delete AskSplitResponse::default_instance_;
  delete AskSplitResponse_reflection_;
  delete StoreStats::default_instance_;
  delete StoreStats_reflection_;
  delete StoreHeartbeatRequest::default_instance_;
  delete StoreHeartbeatRequest_reflection_;
  delete StoreHeartbeatResponse::default_instance_;
  delete StoreHeartbeatResponse_reflection_;
  delete ReportSplitRequest::default_instance_;
  delete ReportSplitRequest_reflection_;
  delete ReportSplitResponse::default_instance_;
  delete ReportSplitResponse_reflection_;
  delete RequestHeader::default_instance_;
  delete RequestHeader_reflection_;
  delete ResponseHeader::default_instance_;
  delete ResponseHeader_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete BootstrappedError::default_instance_;
  delete BootstrappedError_reflection_;
  delete StoreIsTombstoneError::default_instance_;
  delete StoreIsTombstoneError_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_pdpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npdpb.proto\022\004pdpb\032\014metapb.proto\032\reraftp"
    "b.proto\"\"\n\006Leader\022\014\n\004addr\030\001 \001(\t\022\n\n\002id\030\003 "
    "\001(\004\"\033\n\nTsoRequest\022\r\n\005count\030\001 \001(\r\".\n\tTime"
    "stamp\022\020\n\010physical\030\001 \001(\003\022\017\n\007logical\030\002 \001(\003"
    "\"@\n\013TsoResponse\022\r\n\005count\030\001 \001(\r\022\"\n\ttimest"
    "amp\030\002 \001(\0132\017.pdpb.Timestamp\"P\n\020BootstrapR"
    "equest\022\034\n\005store\030\001 \001(\0132\r.metapb.Store\022\036\n\006"
    "region\030\002 \001(\0132\016.metapb.Region\"\023\n\021Bootstra"
    "pResponse\"\027\n\025IsBootstrappedRequest\".\n\026Is"
    "BootstrappedResponse\022\024\n\014bootstrapped\030\001 \001"
    "(\010\"\020\n\016AllocIdRequest\"\035\n\017AllocIdResponse\022"
    "\n\n\002id\030\001 \001(\004\"\026\n\024AllocVolumeIdRequest\"#\n\025A"
    "llocVolumeIdResponse\022\n\n\002id\030\001 \001(\004\"#\n\017GetS"
    "toreRequest\022\020\n\010store_id\030\001 \001(\004\"0\n\020GetStor"
    "eResponse\022\034\n\005store\030\001 \001(\0132\r.metapb.Store\""
    "&\n\020GetRegionRequest\022\022\n\nregion_key\030\001 \001(\014\""
    "Q\n\021GetRegionResponse\022\036\n\006region\030\001 \001(\0132\016.m"
    "etapb.Region\022\034\n\006leader\030\002 \001(\0132\014.metapb.Pe"
    "er\")\n\024GetRegionByIDRequest\022\021\n\tregion_id\030"
    "\001 \001(\004\"\031\n\027GetClusterConfigRequest\"<\n\030GetC"
    "lusterConfigResponse\022 \n\007cluster\030\001 \001(\0132\017."
    "metapb.Cluster\"/\n\017PutStoreRequest\022\034\n\005sto"
    "re\030\001 \001(\0132\r.metapb.Store\"\022\n\020PutStoreRespo"
    "nse\"@\n\010PDMember\022\014\n\004name\030\001 \001(\t\022\023\n\013client_"
    "urls\030\002 \003(\t\022\021\n\tpeer_urls\030\003 \003(\t\"\025\n\023GetPDMe"
    "mbersRequest\"7\n\024GetPDMembersResponse\022\037\n\007"
    "members\030\001 \003(\0132\016.pdpb.PDMember\"=\n\tPeerSta"
    "ts\022\032\n\004peer\030\001 \001(\0132\014.metapb.Peer\022\024\n\014down_s"
    "econds\030\002 \001(\004\"\364\001\n\026RegionHeartbeatRequest\022"
    "\036\n\006region\030\001 \001(\0132\016.metapb.Region\022\034\n\006leade"
    "r\030\002 \001(\0132\014.metapb.Peer\022#\n\ndown_peers\030\003 \003("
    "\0132\017.pdpb.PeerStats\022#\n\rpending_peers\030\004 \003("
    "\0132\014.metapb.Peer\022\025\n\rbytes_written\030\005 \001(\004\022\022"
    "\n\nbytes_read\030\006 \001(\004\022\024\n\014keys_written\030\007 \001(\004"
    "\022\021\n\tkeys_read\030\010 \001(\004\"V\n\nChangePeer\022,\n\013cha"
    "nge_type\030\001 \001(\0162\027.eraftpb.ConfChangeType\022"
    "\032\n\004peer\030\002 \001(\0132\014.metapb.Peer\",\n\016TransferL"
    "eader\022\032\n\004peer\030\001 \001(\0132\014.metapb.Peer\"o\n\027Reg"
    "ionHeartbeatResponse\022%\n\013change_peer\030\001 \001("
    "\0132\020.pdpb.ChangePeer\022-\n\017transfer_leader\030\002"
    " \001(\0132\024.pdpb.TransferLeader\";\n\027PutCluster"
    "ConfigRequest\022 \n\007cluster\030\001 \001(\0132\017.metapb."
    "Cluster\"\032\n\030PutClusterConfigResponse\"1\n\017A"
    "skSplitRequest\022\036\n\006region\030\001 \001(\0132\016.metapb."
    "Region\"\?\n\020AskSplitResponse\022\025\n\rnew_region"
    "_id\030\001 \001(\004\022\024\n\014new_peer_ids\030\002 \003(\004\"\325\001\n\nStor"
    "eStats\022\020\n\010store_id\030\001 \001(\004\022\020\n\010capacity\030\002 \001"
    "(\004\022\021\n\tavailable\030\003 \001(\004\022\024\n\014region_count\030\004 "
    "\001(\r\022\032\n\022sending_snap_count\030\005 \001(\r\022\034\n\024recei"
    "ving_snap_count\030\006 \001(\r\022\022\n\nstart_time\030\007 \001("
    "\r\022\033\n\023applying_snap_count\030\010 \001(\r\022\017\n\007is_bus"
    "y\030\t \001(\010\"8\n\025StoreHeartbeatRequest\022\037\n\005stat"
    "s\030\001 \001(\0132\020.pdpb.StoreStats\"\030\n\026StoreHeartb"
    "eatResponse\"Q\n\022ReportSplitRequest\022\034\n\004lef"
    "t\030\001 \001(\0132\016.metapb.Region\022\035\n\005right\030\002 \001(\0132\016"
    ".metapb.Region\"\025\n\023ReportSplitResponse\"1\n"
    "\rRequestHeader\022\014\n\004uuid\030\001 \001(\014\022\022\n\ncluster_"
    "id\030\002 \001(\004\"N\n\016ResponseHeader\022\014\n\004uuid\030\001 \001(\014"
    "\022\022\n\ncluster_id\030\002 \001(\004\022\032\n\005error\030\003 \001(\0132\013.pd"
    "pb.Error\"\327\006\n\007Request\022#\n\006header\030\001 \001(\0132\023.p"
    "dpb.RequestHeader\022#\n\010cmd_type\030\002 \001(\0162\021.pd"
    "pb.CommandType\022\035\n\003tso\030\003 \001(\0132\020.pdpb.TsoRe"
    "quest\022)\n\tbootstrap\030\004 \001(\0132\026.pdpb.Bootstra"
    "pRequest\0224\n\017is_bootstrapped\030\005 \001(\0132\033.pdpb"
    ".IsBootstrappedRequest\022&\n\010alloc_id\030\006 \001(\013"
    "2\024.pdpb.AllocIdRequest\022(\n\tget_store\030\007 \001("
    "\0132\025.pdpb.GetStoreRequest\022(\n\tput_store\030\010 "
    "\001(\0132\025.pdpb.PutStoreRequest\022(\n\task_split\030"
    "\t \001(\0132\025.pdpb.AskSplitRequest\022*\n\nget_regi"
    "on\030\n \001(\0132\026.pdpb.GetRegionRequest\0226\n\020regi"
    "on_heartbeat\030\013 \001(\0132\034.pdpb.RegionHeartbea"
    "tRequest\0229\n\022get_cluster_config\030\014 \001(\0132\035.p"
    "dpb.GetClusterConfigRequest\0229\n\022put_clust"
    "er_config\030\r \001(\0132\035.pdpb.PutClusterConfigR"
    "equest\0224\n\017store_heartbeat\030\016 \001(\0132\033.pdpb.S"
    "toreHeartbeatRequest\022.\n\014report_split\030\017 \001"
    "(\0132\030.pdpb.ReportSplitRequest\0224\n\020get_regi"
    "on_by_id\030\020 \001(\0132\032.pdpb.GetRegionByIDReque"
    "st\0221\n\016get_pd_members\030\021 \001(\0132\031.pdpb.GetPDM"
    "embersRequest\0223\n\017alloc_volume_id\030\022 \001(\0132\032"
    ".pdpb.AllocVolumeIdRequest\"\345\006\n\010Response\022"
    "$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHeader\022#\n"
    "\010cmd_type\030\002 \001(\0162\021.pdpb.CommandType\022\036\n\003ts"
    "o\030\003 \001(\0132\021.pdpb.TsoResponse\022*\n\tbootstrap\030"
    "\004 \001(\0132\027.pdpb.BootstrapResponse\0225\n\017is_boo"
    "tstrapped\030\005 \001(\0132\034.pdpb.IsBootstrappedRes"
    "ponse\022\'\n\010alloc_id\030\006 \001(\0132\025.pdpb.AllocIdRe"
    "sponse\022)\n\tget_store\030\007 \001(\0132\026.pdpb.GetStor"
    "eResponse\022)\n\tput_store\030\010 \001(\0132\026.pdpb.PutS"
    "toreResponse\022)\n\task_split\030\t \001(\0132\026.pdpb.A"
    "skSplitResponse\022+\n\nget_region\030\n \001(\0132\027.pd"
    "pb.GetRegionResponse\0227\n\020region_heartbeat"
    "\030\013 \001(\0132\035.pdpb.RegionHeartbeatResponse\022:\n"
    "\022get_cluster_config\030\014 \001(\0132\036.pdpb.GetClus"
    "terConfigResponse\022:\n\022put_cluster_config\030"
    "\r \001(\0132\036.pdpb.PutClusterConfigResponse\0225\n"
    "\017store_heartbeat\030\016 \001(\0132\034.pdpb.StoreHeart"
    "beatResponse\022/\n\014report_split\030\017 \001(\0132\031.pdp"
    "b.ReportSplitResponse\0221\n\020get_region_by_i"
    "d\030\020 \001(\0132\027.pdpb.GetRegionResponse\0222\n\016get_"
    "pd_members\030\021 \001(\0132\032.pdpb.GetPDMembersResp"
    "onse\0224\n\017alloc_volume_id\030\022 \001(\0132\033.pdpb.All"
    "ocVolumeIdResponse\"\023\n\021BootstrappedError\""
    "\027\n\025StoreIsTombstoneError\"z\n\005Error\022\017\n\007mes"
    "sage\030\001 \001(\t\022-\n\014bootstrapped\030\002 \001(\0132\027.pdpb."
    "BootstrappedError\0221\n\014is_tombstone\030\003 \001(\0132"
    "\033.pdpb.StoreIsTombstoneError*\252\002\n\013Command"
    "Type\022\013\n\007Invalid\020\000\022\007\n\003Tso\020\001\022\r\n\tBootstrap\020"
    "\002\022\022\n\016IsBootstrapped\020\003\022\013\n\007AllocId\020\004\022\014\n\010Ge"
    "tStore\020\005\022\014\n\010PutStore\020\006\022\014\n\010AskSplit\020\007\022\r\n\t"
    "GetRegion\020\010\022\023\n\017RegionHeartbeat\020\t\022\024\n\020GetC"
    "lusterConfig\020\n\022\024\n\020PutClusterConfig\020\013\022\022\n\016"
    "StoreHeartbeat\020\014\022\017\n\013ReportSplit\020\r\022\021\n\rGet"
    "RegionByID\020\016\022\020\n\014GetPDMembers\020\017\022\021\n\rAllocV"
    "olumeId\020\020", 4569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pdpb.proto", &protobuf_RegisterTypes);
  Leader::default_instance_ = new Leader();
  TsoRequest::default_instance_ = new TsoRequest();
  Timestamp::default_instance_ = new Timestamp();
  TsoResponse::default_instance_ = new TsoResponse();
  BootstrapRequest::default_instance_ = new BootstrapRequest();
  BootstrapResponse::default_instance_ = new BootstrapResponse();
  IsBootstrappedRequest::default_instance_ = new IsBootstrappedRequest();
  IsBootstrappedResponse::default_instance_ = new IsBootstrappedResponse();
  AllocIdRequest::default_instance_ = new AllocIdRequest();
  AllocIdResponse::default_instance_ = new AllocIdResponse();
  AllocVolumeIdRequest::default_instance_ = new AllocVolumeIdRequest();
  AllocVolumeIdResponse::default_instance_ = new AllocVolumeIdResponse();
  GetStoreRequest::default_instance_ = new GetStoreRequest();
  GetStoreResponse::default_instance_ = new GetStoreResponse();
  GetRegionRequest::default_instance_ = new GetRegionRequest();
  GetRegionResponse::default_instance_ = new GetRegionResponse();
  GetRegionByIDRequest::default_instance_ = new GetRegionByIDRequest();
  GetClusterConfigRequest::default_instance_ = new GetClusterConfigRequest();
  GetClusterConfigResponse::default_instance_ = new GetClusterConfigResponse();
  PutStoreRequest::default_instance_ = new PutStoreRequest();
  PutStoreResponse::default_instance_ = new PutStoreResponse();
  PDMember::default_instance_ = new PDMember();
  GetPDMembersRequest::default_instance_ = new GetPDMembersRequest();
  GetPDMembersResponse::default_instance_ = new GetPDMembersResponse();
  PeerStats::default_instance_ = new PeerStats();
  RegionHeartbeatRequest::default_instance_ = new RegionHeartbeatRequest();
  ChangePeer::default_instance_ = new ChangePeer();
  TransferLeader::default_instance_ = new TransferLeader();
  RegionHeartbeatResponse::default_instance_ = new RegionHeartbeatResponse();
  PutClusterConfigRequest::default_instance_ = new PutClusterConfigRequest();
  PutClusterConfigResponse::default_instance_ = new PutClusterConfigResponse();
  AskSplitRequest::default_instance_ = new AskSplitRequest();
  AskSplitResponse::default_instance_ = new AskSplitResponse();
  StoreStats::default_instance_ = new StoreStats();
  StoreHeartbeatRequest::default_instance_ = new StoreHeartbeatRequest();
  StoreHeartbeatResponse::default_instance_ = new StoreHeartbeatResponse();
  ReportSplitRequest::default_instance_ = new ReportSplitRequest();
  ReportSplitResponse::default_instance_ = new ReportSplitResponse();
  RequestHeader::default_instance_ = new RequestHeader();
  ResponseHeader::default_instance_ = new ResponseHeader();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  BootstrappedError::default_instance_ = new BootstrappedError();
  StoreIsTombstoneError::default_instance_ = new StoreIsTombstoneError();
  Error::default_instance_ = new Error();
  Leader::default_instance_->InitAsDefaultInstance();
  TsoRequest::default_instance_->InitAsDefaultInstance();
  Timestamp::default_instance_->InitAsDefaultInstance();
  TsoResponse::default_instance_->InitAsDefaultInstance();
  BootstrapRequest::default_instance_->InitAsDefaultInstance();
  BootstrapResponse::default_instance_->InitAsDefaultInstance();
  IsBootstrappedRequest::default_instance_->InitAsDefaultInstance();
  IsBootstrappedResponse::default_instance_->InitAsDefaultInstance();
  AllocIdRequest::default_instance_->InitAsDefaultInstance();
  AllocIdResponse::default_instance_->InitAsDefaultInstance();
  AllocVolumeIdRequest::default_instance_->InitAsDefaultInstance();
  AllocVolumeIdResponse::default_instance_->InitAsDefaultInstance();
  GetStoreRequest::default_instance_->InitAsDefaultInstance();
  GetStoreResponse::default_instance_->InitAsDefaultInstance();
  GetRegionRequest::default_instance_->InitAsDefaultInstance();
  GetRegionResponse::default_instance_->InitAsDefaultInstance();
  GetRegionByIDRequest::default_instance_->InitAsDefaultInstance();
  GetClusterConfigRequest::default_instance_->InitAsDefaultInstance();
  GetClusterConfigResponse::default_instance_->InitAsDefaultInstance();
  PutStoreRequest::default_instance_->InitAsDefaultInstance();
  PutStoreResponse::default_instance_->InitAsDefaultInstance();
  PDMember::default_instance_->InitAsDefaultInstance();
  GetPDMembersRequest::default_instance_->InitAsDefaultInstance();
  GetPDMembersResponse::default_instance_->InitAsDefaultInstance();
  PeerStats::default_instance_->InitAsDefaultInstance();
  RegionHeartbeatRequest::default_instance_->InitAsDefaultInstance();
  ChangePeer::default_instance_->InitAsDefaultInstance();
  TransferLeader::default_instance_->InitAsDefaultInstance();
  RegionHeartbeatResponse::default_instance_->InitAsDefaultInstance();
  PutClusterConfigRequest::default_instance_->InitAsDefaultInstance();
  PutClusterConfigResponse::default_instance_->InitAsDefaultInstance();
  AskSplitRequest::default_instance_->InitAsDefaultInstance();
  AskSplitResponse::default_instance_->InitAsDefaultInstance();
  StoreStats::default_instance_->InitAsDefaultInstance();
  StoreHeartbeatRequest::default_instance_->InitAsDefaultInstance();
  StoreHeartbeatResponse::default_instance_->InitAsDefaultInstance();
  ReportSplitRequest::default_instance_->InitAsDefaultInstance();
  ReportSplitResponse::default_instance_->InitAsDefaultInstance();
  RequestHeader::default_instance_->InitAsDefaultInstance();
  ResponseHeader::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  BootstrappedError::default_instance_->InitAsDefaultInstance();
  StoreIsTombstoneError::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pdpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pdpb_2eproto {
  StaticDescriptorInitializer_pdpb_2eproto() {
    protobuf_AddDesc_pdpb_2eproto();
  }
} static_descriptor_initializer_pdpb_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Leader::kAddrFieldNumber;
const int Leader::kIdFieldNumber;
#endif  // !_MSC_VER

Leader::Leader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Leader)
}

void Leader::InitAsDefaultInstance() {
}

Leader::Leader(const Leader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Leader)
}

void Leader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Leader::~Leader() {
  // @@protoc_insertion_point(destructor:pdpb.Leader)
  SharedDtor();
}

void Leader::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

void Leader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Leader_descriptor_;
}

const Leader& Leader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

Leader* Leader::default_instance_ = NULL;

Leader* Leader::New() const {
  return new Leader;
}

void Leader::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addr_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Leader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Leader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Leader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Leader)
  return false;
#undef DO_
}

void Leader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Leader)
  // optional string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Leader)
}

::google::protobuf::uint8* Leader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Leader)
  // optional string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Leader)
  return target;
}

int Leader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Leader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Leader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Leader::MergeFrom(const Leader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Leader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leader::CopyFrom(const Leader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leader::IsInitialized() const {

  return true;
}

void Leader::Swap(Leader* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Leader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Leader_descriptor_;
  metadata.reflection = Leader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsoRequest::kCountFieldNumber;
#endif  // !_MSC_VER

TsoRequest::TsoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TsoRequest)
}

void TsoRequest::InitAsDefaultInstance() {
}

TsoRequest::TsoRequest(const TsoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TsoRequest)
}

void TsoRequest::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsoRequest::~TsoRequest() {
  // @@protoc_insertion_point(destructor:pdpb.TsoRequest)
  SharedDtor();
}

void TsoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsoRequest_descriptor_;
}

const TsoRequest& TsoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

TsoRequest* TsoRequest::default_instance_ = NULL;

TsoRequest* TsoRequest::New() const {
  return new TsoRequest;
}

void TsoRequest::Clear() {
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TsoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TsoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TsoRequest)
  return false;
#undef DO_
}

void TsoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TsoRequest)
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TsoRequest)
}

::google::protobuf::uint8* TsoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TsoRequest)
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TsoRequest)
  return target;
}

int TsoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsoRequest::MergeFrom(const TsoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoRequest::CopyFrom(const TsoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsoRequest::IsInitialized() const {

  return true;
}

void TsoRequest::Swap(TsoRequest* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsoRequest_descriptor_;
  metadata.reflection = TsoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Timestamp::kPhysicalFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !_MSC_VER

Timestamp::Timestamp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Timestamp)
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Timestamp)
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  physical_ = GOOGLE_LONGLONG(0);
  logical_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:pdpb.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New() const {
  return new Timestamp;
}

void Timestamp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Timestamp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(physical_, logical_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 physical = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &physical_)));
          set_has_physical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logical;
        break;
      }

      // optional int64 logical = 2;
      case 2: {
        if (tag == 16) {
         parse_logical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logical_)));
          set_has_logical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Timestamp)
  // optional int64 physical = 1;
  if (has_physical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->physical(), output);
  }

  // optional int64 logical = 2;
  if (has_logical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Timestamp)
}

::google::protobuf::uint8* Timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Timestamp)
  // optional int64 physical = 1;
  if (has_physical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->physical(), target);
  }

  // optional int64 logical = 2;
  if (has_logical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Timestamp)
  return target;
}

int Timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 physical = 1;
    if (has_physical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->physical());
    }

    // optional int64 logical = 2;
    if (has_logical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logical());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timestamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timestamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical()) {
      set_physical(from.physical());
    }
    if (from.has_logical()) {
      set_logical(from.logical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other != this) {
    std::swap(physical_, other->physical_);
    std::swap(logical_, other->logical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsoResponse::kCountFieldNumber;
const int TsoResponse::kTimestampFieldNumber;
#endif  // !_MSC_VER

TsoResponse::TsoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TsoResponse)
}

void TsoResponse::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::pdpb::Timestamp*>(&::pdpb::Timestamp::default_instance());
}

TsoResponse::TsoResponse(const TsoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TsoResponse)
}

void TsoResponse::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsoResponse::~TsoResponse() {
  // @@protoc_insertion_point(destructor:pdpb.TsoResponse)
  SharedDtor();
}

void TsoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void TsoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsoResponse_descriptor_;
}

const TsoResponse& TsoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

TsoResponse* TsoResponse::default_instance_ = NULL;

TsoResponse* TsoResponse::New() const {
  return new TsoResponse;
}

void TsoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    count_ = 0u;
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::pdpb::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TsoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .pdpb.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TsoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TsoResponse)
  return false;
#undef DO_
}

void TsoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TsoResponse)
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // optional .pdpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TsoResponse)
}

::google::protobuf::uint8* TsoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TsoResponse)
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // optional .pdpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TsoResponse)
  return target;
}

int TsoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .pdpb.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsoResponse::MergeFrom(const TsoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::pdpb::Timestamp::MergeFrom(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoResponse::CopyFrom(const TsoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsoResponse::IsInitialized() const {

  return true;
}

void TsoResponse::Swap(TsoResponse* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsoResponse_descriptor_;
  metadata.reflection = TsoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BootstrapRequest::kStoreFieldNumber;
const int BootstrapRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

BootstrapRequest::BootstrapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrapRequest)
}

void BootstrapRequest::InitAsDefaultInstance() {
  store_ = const_cast< ::metapb::Store*>(&::metapb::Store::default_instance());
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

BootstrapRequest::BootstrapRequest(const BootstrapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrapRequest)
}

void BootstrapRequest::SharedCtor() {
  _cached_size_ = 0;
  store_ = NULL;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootstrapRequest::~BootstrapRequest() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrapRequest)
  SharedDtor();
}

void BootstrapRequest::SharedDtor() {
  if (this != default_instance_) {
    delete store_;
    delete region_;
  }
}

void BootstrapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapRequest_descriptor_;
}

const BootstrapRequest& BootstrapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

BootstrapRequest* BootstrapRequest::default_instance_ = NULL;

BootstrapRequest* BootstrapRequest::New() const {
  return new BootstrapRequest;
}

void BootstrapRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_store()) {
      if (store_ != NULL) store_->::metapb::Store::Clear();
    }
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootstrapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Store store = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrapRequest)
  return false;
#undef DO_
}

void BootstrapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrapRequest)
  // optional .metapb.Store store = 1;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store(), output);
  }

  // optional .metapb.Region region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.BootstrapRequest)
}

::google::protobuf::uint8* BootstrapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrapRequest)
  // optional .metapb.Store store = 1;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store(), target);
  }

  // optional .metapb.Region region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrapRequest)
  return target;
}

int BootstrapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Store store = 1;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store());
    }

    // optional .metapb.Region region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootstrapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootstrapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootstrapRequest::MergeFrom(const BootstrapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store()) {
      mutable_store()->::metapb::Store::MergeFrom(from.store());
    }
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootstrapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapRequest::CopyFrom(const BootstrapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapRequest::IsInitialized() const {

  return true;
}

void BootstrapRequest::Swap(BootstrapRequest* other) {
  if (other != this) {
    std::swap(store_, other->store_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BootstrapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootstrapRequest_descriptor_;
  metadata.reflection = BootstrapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BootstrapResponse::BootstrapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrapResponse)
}

void BootstrapResponse::InitAsDefaultInstance() {
}

BootstrapResponse::BootstrapResponse(const BootstrapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrapResponse)
}

void BootstrapResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootstrapResponse::~BootstrapResponse() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrapResponse)
  SharedDtor();
}

void BootstrapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BootstrapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapResponse_descriptor_;
}

const BootstrapResponse& BootstrapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

BootstrapResponse* BootstrapResponse::default_instance_ = NULL;

BootstrapResponse* BootstrapResponse::New() const {
  return new BootstrapResponse;
}

void BootstrapResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootstrapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrapResponse)
  return false;
#undef DO_
}

void BootstrapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrapResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.BootstrapResponse)
}

::google::protobuf::uint8* BootstrapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrapResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrapResponse)
  return target;
}

int BootstrapResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootstrapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootstrapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootstrapResponse::MergeFrom(const BootstrapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootstrapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapResponse::CopyFrom(const BootstrapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapResponse::IsInitialized() const {

  return true;
}

void BootstrapResponse::Swap(BootstrapResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BootstrapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootstrapResponse_descriptor_;
  metadata.reflection = BootstrapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsBootstrappedRequest::IsBootstrappedRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.IsBootstrappedRequest)
}

void IsBootstrappedRequest::InitAsDefaultInstance() {
}

IsBootstrappedRequest::IsBootstrappedRequest(const IsBootstrappedRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.IsBootstrappedRequest)
}

void IsBootstrappedRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsBootstrappedRequest::~IsBootstrappedRequest() {
  // @@protoc_insertion_point(destructor:pdpb.IsBootstrappedRequest)
  SharedDtor();
}

void IsBootstrappedRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsBootstrappedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsBootstrappedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsBootstrappedRequest_descriptor_;
}

const IsBootstrappedRequest& IsBootstrappedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

IsBootstrappedRequest* IsBootstrappedRequest::default_instance_ = NULL;

IsBootstrappedRequest* IsBootstrappedRequest::New() const {
  return new IsBootstrappedRequest;
}

void IsBootstrappedRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsBootstrappedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.IsBootstrappedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.IsBootstrappedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.IsBootstrappedRequest)
  return false;
#undef DO_
}

void IsBootstrappedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.IsBootstrappedRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.IsBootstrappedRequest)
}

::google::protobuf::uint8* IsBootstrappedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.IsBootstrappedRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.IsBootstrappedRequest)
  return target;
}

int IsBootstrappedRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsBootstrappedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsBootstrappedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsBootstrappedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsBootstrappedRequest::MergeFrom(const IsBootstrappedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsBootstrappedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedRequest::CopyFrom(const IsBootstrappedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBootstrappedRequest::IsInitialized() const {

  return true;
}

void IsBootstrappedRequest::Swap(IsBootstrappedRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsBootstrappedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsBootstrappedRequest_descriptor_;
  metadata.reflection = IsBootstrappedRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsBootstrappedResponse::kBootstrappedFieldNumber;
#endif  // !_MSC_VER

IsBootstrappedResponse::IsBootstrappedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.IsBootstrappedResponse)
}

void IsBootstrappedResponse::InitAsDefaultInstance() {
}

IsBootstrappedResponse::IsBootstrappedResponse(const IsBootstrappedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.IsBootstrappedResponse)
}

void IsBootstrappedResponse::SharedCtor() {
  _cached_size_ = 0;
  bootstrapped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsBootstrappedResponse::~IsBootstrappedResponse() {
  // @@protoc_insertion_point(destructor:pdpb.IsBootstrappedResponse)
  SharedDtor();
}

void IsBootstrappedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsBootstrappedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsBootstrappedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsBootstrappedResponse_descriptor_;
}

const IsBootstrappedResponse& IsBootstrappedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

IsBootstrappedResponse* IsBootstrappedResponse::default_instance_ = NULL;

IsBootstrappedResponse* IsBootstrappedResponse::New() const {
  return new IsBootstrappedResponse;
}

void IsBootstrappedResponse::Clear() {
  bootstrapped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsBootstrappedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.IsBootstrappedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bootstrapped = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootstrapped_)));
          set_has_bootstrapped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.IsBootstrappedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.IsBootstrappedResponse)
  return false;
#undef DO_
}

void IsBootstrappedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.IsBootstrappedResponse)
  // optional bool bootstrapped = 1;
  if (has_bootstrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bootstrapped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.IsBootstrappedResponse)
}

::google::protobuf::uint8* IsBootstrappedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.IsBootstrappedResponse)
  // optional bool bootstrapped = 1;
  if (has_bootstrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bootstrapped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.IsBootstrappedResponse)
  return target;
}

int IsBootstrappedResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bootstrapped = 1;
    if (has_bootstrapped()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsBootstrappedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsBootstrappedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsBootstrappedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsBootstrappedResponse::MergeFrom(const IsBootstrappedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bootstrapped()) {
      set_bootstrapped(from.bootstrapped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsBootstrappedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedResponse::CopyFrom(const IsBootstrappedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBootstrappedResponse::IsInitialized() const {

  return true;
}

void IsBootstrappedResponse::Swap(IsBootstrappedResponse* other) {
  if (other != this) {
    std::swap(bootstrapped_, other->bootstrapped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsBootstrappedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsBootstrappedResponse_descriptor_;
  metadata.reflection = IsBootstrappedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllocIdRequest::AllocIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocIdRequest)
}

void AllocIdRequest::InitAsDefaultInstance() {
}

AllocIdRequest::AllocIdRequest(const AllocIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocIdRequest)
}

void AllocIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocIdRequest::~AllocIdRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AllocIdRequest)
  SharedDtor();
}

void AllocIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocIdRequest_descriptor_;
}

const AllocIdRequest& AllocIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

AllocIdRequest* AllocIdRequest::default_instance_ = NULL;

AllocIdRequest* AllocIdRequest::New() const {
  return new AllocIdRequest;
}

void AllocIdRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocIdRequest)
  return false;
#undef DO_
}

void AllocIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocIdRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AllocIdRequest)
}

::google::protobuf::uint8* AllocIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocIdRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocIdRequest)
  return target;
}

int AllocIdRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocIdRequest::MergeFrom(const AllocIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIdRequest::CopyFrom(const AllocIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocIdRequest::IsInitialized() const {

  return true;
}

void AllocIdRequest::Swap(AllocIdRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocIdRequest_descriptor_;
  metadata.reflection = AllocIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocIdResponse::kIdFieldNumber;
#endif  // !_MSC_VER

AllocIdResponse::AllocIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocIdResponse)
}

void AllocIdResponse::InitAsDefaultInstance() {
}

AllocIdResponse::AllocIdResponse(const AllocIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocIdResponse)
}

void AllocIdResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocIdResponse::~AllocIdResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AllocIdResponse)
  SharedDtor();
}

void AllocIdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocIdResponse_descriptor_;
}

const AllocIdResponse& AllocIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

AllocIdResponse* AllocIdResponse::default_instance_ = NULL;

AllocIdResponse* AllocIdResponse::New() const {
  return new AllocIdResponse;
}

void AllocIdResponse::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocIdResponse)
  return false;
#undef DO_
}

void AllocIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocIdResponse)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AllocIdResponse)
}

::google::protobuf::uint8* AllocIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocIdResponse)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocIdResponse)
  return target;
}

int AllocIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocIdResponse::MergeFrom(const AllocIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIdResponse::CopyFrom(const AllocIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocIdResponse::IsInitialized() const {

  return true;
}

void AllocIdResponse::Swap(AllocIdResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocIdResponse_descriptor_;
  metadata.reflection = AllocIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllocVolumeIdRequest::AllocVolumeIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocVolumeIdRequest)
}

void AllocVolumeIdRequest::InitAsDefaultInstance() {
}

AllocVolumeIdRequest::AllocVolumeIdRequest(const AllocVolumeIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocVolumeIdRequest)
}

void AllocVolumeIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocVolumeIdRequest::~AllocVolumeIdRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AllocVolumeIdRequest)
  SharedDtor();
}

void AllocVolumeIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocVolumeIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocVolumeIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocVolumeIdRequest_descriptor_;
}

const AllocVolumeIdRequest& AllocVolumeIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

AllocVolumeIdRequest* AllocVolumeIdRequest::default_instance_ = NULL;

AllocVolumeIdRequest* AllocVolumeIdRequest::New() const {
  return new AllocVolumeIdRequest;
}

void AllocVolumeIdRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocVolumeIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocVolumeIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocVolumeIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocVolumeIdRequest)
  return false;
#undef DO_
}

void AllocVolumeIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocVolumeIdRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AllocVolumeIdRequest)
}

::google::protobuf::uint8* AllocVolumeIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocVolumeIdRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocVolumeIdRequest)
  return target;
}

int AllocVolumeIdRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocVolumeIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocVolumeIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocVolumeIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocVolumeIdRequest::MergeFrom(const AllocVolumeIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocVolumeIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocVolumeIdRequest::CopyFrom(const AllocVolumeIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocVolumeIdRequest::IsInitialized() const {

  return true;
}

void AllocVolumeIdRequest::Swap(AllocVolumeIdRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocVolumeIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocVolumeIdRequest_descriptor_;
  metadata.reflection = AllocVolumeIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocVolumeIdResponse::kIdFieldNumber;
#endif  // !_MSC_VER

AllocVolumeIdResponse::AllocVolumeIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocVolumeIdResponse)
}

void AllocVolumeIdResponse::InitAsDefaultInstance() {
}

AllocVolumeIdResponse::AllocVolumeIdResponse(const AllocVolumeIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocVolumeIdResponse)
}

void AllocVolumeIdResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocVolumeIdResponse::~AllocVolumeIdResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AllocVolumeIdResponse)
  SharedDtor();
}

void AllocVolumeIdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllocVolumeIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocVolumeIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocVolumeIdResponse_descriptor_;
}

const AllocVolumeIdResponse& AllocVolumeIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

AllocVolumeIdResponse* AllocVolumeIdResponse::default_instance_ = NULL;

AllocVolumeIdResponse* AllocVolumeIdResponse::New() const {
  return new AllocVolumeIdResponse;
}

void AllocVolumeIdResponse::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocVolumeIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocVolumeIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocVolumeIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocVolumeIdResponse)
  return false;
#undef DO_
}

void AllocVolumeIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocVolumeIdResponse)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AllocVolumeIdResponse)
}

::google::protobuf::uint8* AllocVolumeIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocVolumeIdResponse)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocVolumeIdResponse)
  return target;
}

int AllocVolumeIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocVolumeIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocVolumeIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocVolumeIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocVolumeIdResponse::MergeFrom(const AllocVolumeIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocVolumeIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocVolumeIdResponse::CopyFrom(const AllocVolumeIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocVolumeIdResponse::IsInitialized() const {

  return true;
}

void AllocVolumeIdResponse::Swap(AllocVolumeIdResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocVolumeIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocVolumeIdResponse_descriptor_;
  metadata.reflection = AllocVolumeIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreRequest::kStoreIdFieldNumber;
#endif  // !_MSC_VER

GetStoreRequest::GetStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetStoreRequest)
}

void GetStoreRequest::InitAsDefaultInstance() {
}

GetStoreRequest::GetStoreRequest(const GetStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetStoreRequest)
}

void GetStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreRequest::~GetStoreRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetStoreRequest)
  SharedDtor();
}

void GetStoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreRequest_descriptor_;
}

const GetStoreRequest& GetStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetStoreRequest* GetStoreRequest::default_instance_ = NULL;

GetStoreRequest* GetStoreRequest::New() const {
  return new GetStoreRequest;
}

void GetStoreRequest::Clear() {
  store_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetStoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 store_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetStoreRequest)
  return false;
#undef DO_
}

void GetStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetStoreRequest)
  // optional uint64 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->store_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetStoreRequest)
}

::google::protobuf::uint8* GetStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetStoreRequest)
  // optional uint64 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->store_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetStoreRequest)
  return target;
}

int GetStoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreRequest::MergeFrom(const GetStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreRequest::CopyFrom(const GetStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreRequest::IsInitialized() const {

  return true;
}

void GetStoreRequest::Swap(GetStoreRequest* other) {
  if (other != this) {
    std::swap(store_id_, other->store_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreRequest_descriptor_;
  metadata.reflection = GetStoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreResponse::kStoreFieldNumber;
#endif  // !_MSC_VER

GetStoreResponse::GetStoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetStoreResponse)
}

void GetStoreResponse::InitAsDefaultInstance() {
  store_ = const_cast< ::metapb::Store*>(&::metapb::Store::default_instance());
}

GetStoreResponse::GetStoreResponse(const GetStoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetStoreResponse)
}

void GetStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  store_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreResponse::~GetStoreResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetStoreResponse)
  SharedDtor();
}

void GetStoreResponse::SharedDtor() {
  if (this != default_instance_) {
    delete store_;
  }
}

void GetStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreResponse_descriptor_;
}

const GetStoreResponse& GetStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetStoreResponse* GetStoreResponse::default_instance_ = NULL;

GetStoreResponse* GetStoreResponse::New() const {
  return new GetStoreResponse;
}

void GetStoreResponse::Clear() {
  if (has_store()) {
    if (store_ != NULL) store_->::metapb::Store::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetStoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Store store = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetStoreResponse)
  return false;
#undef DO_
}

void GetStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetStoreResponse)
  // optional .metapb.Store store = 1;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetStoreResponse)
}

::google::protobuf::uint8* GetStoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetStoreResponse)
  // optional .metapb.Store store = 1;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetStoreResponse)
  return target;
}

int GetStoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Store store = 1;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreResponse::MergeFrom(const GetStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store()) {
      mutable_store()->::metapb::Store::MergeFrom(from.store());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreResponse::CopyFrom(const GetStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreResponse::IsInitialized() const {

  return true;
}

void GetStoreResponse::Swap(GetStoreResponse* other) {
  if (other != this) {
    std::swap(store_, other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreResponse_descriptor_;
  metadata.reflection = GetStoreResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRegionRequest::kRegionKeyFieldNumber;
#endif  // !_MSC_VER

GetRegionRequest::GetRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionRequest)
}

void GetRegionRequest::InitAsDefaultInstance() {
}

GetRegionRequest::GetRegionRequest(const GetRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionRequest)
}

void GetRegionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  region_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegionRequest::~GetRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionRequest)
  SharedDtor();
}

void GetRegionRequest::SharedDtor() {
  if (region_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_key_;
  }
  if (this != default_instance_) {
  }
}

void GetRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionRequest_descriptor_;
}

const GetRegionRequest& GetRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetRegionRequest* GetRegionRequest::default_instance_ = NULL;

GetRegionRequest* GetRegionRequest::New() const {
  return new GetRegionRequest;
}

void GetRegionRequest::Clear() {
  if (has_region_key()) {
    if (region_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      region_key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes region_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionRequest)
  return false;
#undef DO_
}

void GetRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionRequest)
  // optional bytes region_key = 1;
  if (has_region_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->region_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionRequest)
}

::google::protobuf::uint8* GetRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionRequest)
  // optional bytes region_key = 1;
  if (has_region_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->region_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionRequest)
  return target;
}

int GetRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes region_key = 1;
    if (has_region_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegionRequest::MergeFrom(const GetRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_key()) {
      set_region_key(from.region_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionRequest::CopyFrom(const GetRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionRequest::IsInitialized() const {

  return true;
}

void GetRegionRequest::Swap(GetRegionRequest* other) {
  if (other != this) {
    std::swap(region_key_, other->region_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionRequest_descriptor_;
  metadata.reflection = GetRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRegionResponse::kRegionFieldNumber;
const int GetRegionResponse::kLeaderFieldNumber;
#endif  // !_MSC_VER

GetRegionResponse::GetRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionResponse)
}

void GetRegionResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
  leader_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

GetRegionResponse::GetRegionResponse(const GetRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionResponse)
}

void GetRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegionResponse::~GetRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionResponse)
  SharedDtor();
}

void GetRegionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete leader_;
  }
}

void GetRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionResponse_descriptor_;
}

const GetRegionResponse& GetRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetRegionResponse* GetRegionResponse::default_instance_ = NULL;

GetRegionResponse* GetRegionResponse::New() const {
  return new GetRegionResponse;
}

void GetRegionResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
    if (has_leader()) {
      if (leader_ != NULL) leader_->::metapb::Peer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionResponse)
  return false;
#undef DO_
}

void GetRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionResponse)
}

::google::protobuf::uint8* GetRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionResponse)
  return target;
}

int GetRegionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .metapb.Peer leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegionResponse::MergeFrom(const GetRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionResponse::CopyFrom(const GetRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionResponse::IsInitialized() const {

  return true;
}

void GetRegionResponse::Swap(GetRegionResponse* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionResponse_descriptor_;
  metadata.reflection = GetRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRegionByIDRequest::kRegionIdFieldNumber;
#endif  // !_MSC_VER

GetRegionByIDRequest::GetRegionByIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionByIDRequest)
}

void GetRegionByIDRequest::InitAsDefaultInstance() {
}

GetRegionByIDRequest::GetRegionByIDRequest(const GetRegionByIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionByIDRequest)
}

void GetRegionByIDRequest::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegionByIDRequest::~GetRegionByIDRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionByIDRequest)
  SharedDtor();
}

void GetRegionByIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRegionByIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionByIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionByIDRequest_descriptor_;
}

const GetRegionByIDRequest& GetRegionByIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetRegionByIDRequest* GetRegionByIDRequest::default_instance_ = NULL;

GetRegionByIDRequest* GetRegionByIDRequest::New() const {
  return new GetRegionByIDRequest;
}

void GetRegionByIDRequest::Clear() {
  region_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegionByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionByIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionByIDRequest)
  return false;
#undef DO_
}

void GetRegionByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionByIDRequest)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionByIDRequest)
}

::google::protobuf::uint8* GetRegionByIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionByIDRequest)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionByIDRequest)
  return target;
}

int GetRegionByIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegionByIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegionByIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegionByIDRequest::MergeFrom(const GetRegionByIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegionByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionByIDRequest::CopyFrom(const GetRegionByIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionByIDRequest::IsInitialized() const {

  return true;
}

void GetRegionByIDRequest::Swap(GetRegionByIDRequest* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegionByIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionByIDRequest_descriptor_;
  metadata.reflection = GetRegionByIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetClusterConfigRequest::GetClusterConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetClusterConfigRequest)
}

void GetClusterConfigRequest::InitAsDefaultInstance() {
}

GetClusterConfigRequest::GetClusterConfigRequest(const GetClusterConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetClusterConfigRequest)
}

void GetClusterConfigRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterConfigRequest::~GetClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetClusterConfigRequest)
  SharedDtor();
}

void GetClusterConfigRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetClusterConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterConfigRequest_descriptor_;
}

const GetClusterConfigRequest& GetClusterConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetClusterConfigRequest* GetClusterConfigRequest::default_instance_ = NULL;

GetClusterConfigRequest* GetClusterConfigRequest::New() const {
  return new GetClusterConfigRequest;
}

void GetClusterConfigRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetClusterConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetClusterConfigRequest)
  return false;
#undef DO_
}

void GetClusterConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetClusterConfigRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetClusterConfigRequest)
}

::google::protobuf::uint8* GetClusterConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetClusterConfigRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetClusterConfigRequest)
  return target;
}

int GetClusterConfigRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterConfigRequest::MergeFrom(const GetClusterConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigRequest::CopyFrom(const GetClusterConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterConfigRequest::IsInitialized() const {

  return true;
}

void GetClusterConfigRequest::Swap(GetClusterConfigRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterConfigRequest_descriptor_;
  metadata.reflection = GetClusterConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterConfigResponse::kClusterFieldNumber;
#endif  // !_MSC_VER

GetClusterConfigResponse::GetClusterConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetClusterConfigResponse)
}

void GetClusterConfigResponse::InitAsDefaultInstance() {
  cluster_ = const_cast< ::metapb::Cluster*>(&::metapb::Cluster::default_instance());
}

GetClusterConfigResponse::GetClusterConfigResponse(const GetClusterConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetClusterConfigResponse)
}

void GetClusterConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  cluster_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterConfigResponse::~GetClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetClusterConfigResponse)
  SharedDtor();
}

void GetClusterConfigResponse::SharedDtor() {
  if (this != default_instance_) {
    delete cluster_;
  }
}

void GetClusterConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterConfigResponse_descriptor_;
}

const GetClusterConfigResponse& GetClusterConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetClusterConfigResponse* GetClusterConfigResponse::default_instance_ = NULL;

GetClusterConfigResponse* GetClusterConfigResponse::New() const {
  return new GetClusterConfigResponse;
}

void GetClusterConfigResponse::Clear() {
  if (has_cluster()) {
    if (cluster_ != NULL) cluster_->::metapb::Cluster::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetClusterConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Cluster cluster = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetClusterConfigResponse)
  return false;
#undef DO_
}

void GetClusterConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetClusterConfigResponse)
  // optional .metapb.Cluster cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetClusterConfigResponse)
}

::google::protobuf::uint8* GetClusterConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetClusterConfigResponse)
  // optional .metapb.Cluster cluster = 1;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetClusterConfigResponse)
  return target;
}

int GetClusterConfigResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Cluster cluster = 1;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterConfigResponse::MergeFrom(const GetClusterConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster()) {
      mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigResponse::CopyFrom(const GetClusterConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterConfigResponse::IsInitialized() const {

  return true;
}

void GetClusterConfigResponse::Swap(GetClusterConfigResponse* other) {
  if (other != this) {
    std::swap(cluster_, other->cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterConfigResponse_descriptor_;
  metadata.reflection = GetClusterConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutStoreRequest::kStoreFieldNumber;
#endif  // !_MSC_VER

PutStoreRequest::PutStoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutStoreRequest)
}

void PutStoreRequest::InitAsDefaultInstance() {
  store_ = const_cast< ::metapb::Store*>(&::metapb::Store::default_instance());
}

PutStoreRequest::PutStoreRequest(const PutStoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutStoreRequest)
}

void PutStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  store_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutStoreRequest::~PutStoreRequest() {
  // @@protoc_insertion_point(destructor:pdpb.PutStoreRequest)
  SharedDtor();
}

void PutStoreRequest::SharedDtor() {
  if (this != default_instance_) {
    delete store_;
  }
}

void PutStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutStoreRequest_descriptor_;
}

const PutStoreRequest& PutStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

PutStoreRequest* PutStoreRequest::default_instance_ = NULL;

PutStoreRequest* PutStoreRequest::New() const {
  return new PutStoreRequest;
}

void PutStoreRequest::Clear() {
  if (has_store()) {
    if (store_ != NULL) store_->::metapb::Store::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutStoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Store store = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutStoreRequest)
  return false;
#undef DO_
}

void PutStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutStoreRequest)
  // optional .metapb.Store store = 1;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutStoreRequest)
}

::google::protobuf::uint8* PutStoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutStoreRequest)
  // optional .metapb.Store store = 1;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutStoreRequest)
  return target;
}

int PutStoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Store store = 1;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutStoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutStoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutStoreRequest::MergeFrom(const PutStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store()) {
      mutable_store()->::metapb::Store::MergeFrom(from.store());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreRequest::CopyFrom(const PutStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutStoreRequest::IsInitialized() const {

  return true;
}

void PutStoreRequest::Swap(PutStoreRequest* other) {
  if (other != this) {
    std::swap(store_, other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutStoreRequest_descriptor_;
  metadata.reflection = PutStoreRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PutStoreResponse::PutStoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutStoreResponse)
}

void PutStoreResponse::InitAsDefaultInstance() {
}

PutStoreResponse::PutStoreResponse(const PutStoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutStoreResponse)
}

void PutStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutStoreResponse::~PutStoreResponse() {
  // @@protoc_insertion_point(destructor:pdpb.PutStoreResponse)
  SharedDtor();
}

void PutStoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutStoreResponse_descriptor_;
}

const PutStoreResponse& PutStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

PutStoreResponse* PutStoreResponse::default_instance_ = NULL;

PutStoreResponse* PutStoreResponse::New() const {
  return new PutStoreResponse;
}

void PutStoreResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutStoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutStoreResponse)
  return false;
#undef DO_
}

void PutStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutStoreResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutStoreResponse)
}

::google::protobuf::uint8* PutStoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutStoreResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutStoreResponse)
  return target;
}

int PutStoreResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutStoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutStoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutStoreResponse::MergeFrom(const PutStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreResponse::CopyFrom(const PutStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutStoreResponse::IsInitialized() const {

  return true;
}

void PutStoreResponse::Swap(PutStoreResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutStoreResponse_descriptor_;
  metadata.reflection = PutStoreResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PDMember::kNameFieldNumber;
const int PDMember::kClientUrlsFieldNumber;
const int PDMember::kPeerUrlsFieldNumber;
#endif  // !_MSC_VER

PDMember::PDMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PDMember)
}

void PDMember::InitAsDefaultInstance() {
}

PDMember::PDMember(const PDMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PDMember)
}

void PDMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDMember::~PDMember() {
  // @@protoc_insertion_point(destructor:pdpb.PDMember)
  SharedDtor();
}

void PDMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PDMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDMember_descriptor_;
}

const PDMember& PDMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

PDMember* PDMember::default_instance_ = NULL;

PDMember* PDMember::New() const {
  return new PDMember;
}

void PDMember::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  client_urls_.Clear();
  peer_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PDMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_urls;
        break;
      }

      // repeated string client_urls = 2;
      case 2: {
        if (tag == 18) {
         parse_client_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_client_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_urls(this->client_urls_size() - 1).data(),
            this->client_urls(this->client_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_urls;
        if (input->ExpectTag(26)) goto parse_peer_urls;
        break;
      }

      // repeated string peer_urls = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peer_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_urls(this->peer_urls_size() - 1).data(),
            this->peer_urls(this->peer_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PDMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PDMember)
  return false;
#undef DO_
}

void PDMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PDMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string client_urls = 2;
  for (int i = 0; i < this->client_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->client_urls(i).data(), this->client_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "client_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_urls(i), output);
  }

  // repeated string peer_urls = 3;
  for (int i = 0; i < this->peer_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->peer_urls(i).data(), this->peer_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "peer_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_urls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PDMember)
}

::google::protobuf::uint8* PDMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PDMember)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string client_urls = 2;
  for (int i = 0; i < this->client_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_urls(i).data(), this->client_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->client_urls(i), target);
  }

  // repeated string peer_urls = 3;
  for (int i = 0; i < this->peer_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_urls(i).data(), this->peer_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peer_urls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PDMember)
  return target;
}

int PDMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string client_urls = 2;
  total_size += 1 * this->client_urls_size();
  for (int i = 0; i < this->client_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->client_urls(i));
  }

  // repeated string peer_urls = 3;
  total_size += 1 * this->peer_urls_size();
  for (int i = 0; i < this->peer_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peer_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDMember::MergeFrom(const PDMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_urls_.MergeFrom(from.client_urls_);
  peer_urls_.MergeFrom(from.peer_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDMember::CopyFrom(const PDMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDMember::IsInitialized() const {

  return true;
}

void PDMember::Swap(PDMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    client_urls_.Swap(&other->client_urls_);
    peer_urls_.Swap(&other->peer_urls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDMember_descriptor_;
  metadata.reflection = PDMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPDMembersRequest::GetPDMembersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetPDMembersRequest)
}

void GetPDMembersRequest::InitAsDefaultInstance() {
}

GetPDMembersRequest::GetPDMembersRequest(const GetPDMembersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetPDMembersRequest)
}

void GetPDMembersRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPDMembersRequest::~GetPDMembersRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetPDMembersRequest)
  SharedDtor();
}

void GetPDMembersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPDMembersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPDMembersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPDMembersRequest_descriptor_;
}

const GetPDMembersRequest& GetPDMembersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetPDMembersRequest* GetPDMembersRequest::default_instance_ = NULL;

GetPDMembersRequest* GetPDMembersRequest::New() const {
  return new GetPDMembersRequest;
}

void GetPDMembersRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPDMembersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetPDMembersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetPDMembersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetPDMembersRequest)
  return false;
#undef DO_
}

void GetPDMembersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetPDMembersRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetPDMembersRequest)
}

::google::protobuf::uint8* GetPDMembersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetPDMembersRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetPDMembersRequest)
  return target;
}

int GetPDMembersRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPDMembersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPDMembersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPDMembersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPDMembersRequest::MergeFrom(const GetPDMembersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPDMembersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPDMembersRequest::CopyFrom(const GetPDMembersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPDMembersRequest::IsInitialized() const {

  return true;
}

void GetPDMembersRequest::Swap(GetPDMembersRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPDMembersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPDMembersRequest_descriptor_;
  metadata.reflection = GetPDMembersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPDMembersResponse::kMembersFieldNumber;
#endif  // !_MSC_VER

GetPDMembersResponse::GetPDMembersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetPDMembersResponse)
}

void GetPDMembersResponse::InitAsDefaultInstance() {
}

GetPDMembersResponse::GetPDMembersResponse(const GetPDMembersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetPDMembersResponse)
}

void GetPDMembersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPDMembersResponse::~GetPDMembersResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetPDMembersResponse)
  SharedDtor();
}

void GetPDMembersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPDMembersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPDMembersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPDMembersResponse_descriptor_;
}

const GetPDMembersResponse& GetPDMembersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

GetPDMembersResponse* GetPDMembersResponse::default_instance_ = NULL;

GetPDMembersResponse* GetPDMembersResponse::New() const {
  return new GetPDMembersResponse;
}

void GetPDMembersResponse::Clear() {
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPDMembersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetPDMembersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pdpb.PDMember members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetPDMembersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetPDMembersResponse)
  return false;
#undef DO_
}

void GetPDMembersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetPDMembersResponse)
  // repeated .pdpb.PDMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetPDMembersResponse)
}

::google::protobuf::uint8* GetPDMembersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetPDMembersResponse)
  // repeated .pdpb.PDMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetPDMembersResponse)
  return target;
}

int GetPDMembersResponse::ByteSize() const {
  int total_size = 0;

  // repeated .pdpb.PDMember members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPDMembersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPDMembersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPDMembersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPDMembersResponse::MergeFrom(const GetPDMembersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPDMembersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPDMembersResponse::CopyFrom(const GetPDMembersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPDMembersResponse::IsInitialized() const {

  return true;
}

void GetPDMembersResponse::Swap(GetPDMembersResponse* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPDMembersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPDMembersResponse_descriptor_;
  metadata.reflection = GetPDMembersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerStats::kPeerFieldNumber;
const int PeerStats::kDownSecondsFieldNumber;
#endif  // !_MSC_VER

PeerStats::PeerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PeerStats)
}

void PeerStats::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

PeerStats::PeerStats(const PeerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PeerStats)
}

void PeerStats::SharedCtor() {
  _cached_size_ = 0;
  peer_ = NULL;
  down_seconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerStats::~PeerStats() {
  // @@protoc_insertion_point(destructor:pdpb.PeerStats)
  SharedDtor();
}

void PeerStats::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void PeerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerStats_descriptor_;
}

const PeerStats& PeerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

PeerStats* PeerStats::default_instance_ = NULL;

PeerStats* PeerStats::New() const {
  return new PeerStats;
}

void PeerStats::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
    down_seconds_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PeerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down_seconds;
        break;
      }

      // optional uint64 down_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_down_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &down_seconds_)));
          set_has_down_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PeerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PeerStats)
  return false;
#undef DO_
}

void PeerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PeerStats)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peer(), output);
  }

  // optional uint64 down_seconds = 2;
  if (has_down_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->down_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PeerStats)
}

::google::protobuf::uint8* PeerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PeerStats)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peer(), target);
  }

  // optional uint64 down_seconds = 2;
  if (has_down_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->down_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PeerStats)
  return target;
}

int PeerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Peer peer = 1;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

    // optional uint64 down_seconds = 2;
    if (has_down_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->down_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerStats::MergeFrom(const PeerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
    if (from.has_down_seconds()) {
      set_down_seconds(from.down_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerStats::CopyFrom(const PeerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerStats::IsInitialized() const {

  return true;
}

void PeerStats::Swap(PeerStats* other) {
  if (other != this) {
    std::swap(peer_, other->peer_);
    std::swap(down_seconds_, other->down_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerStats_descriptor_;
  metadata.reflection = PeerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionHeartbeatRequest::kRegionFieldNumber;
const int RegionHeartbeatRequest::kLeaderFieldNumber;
const int RegionHeartbeatRequest::kDownPeersFieldNumber;
const int RegionHeartbeatRequest::kPendingPeersFieldNumber;
const int RegionHeartbeatRequest::kBytesWrittenFieldNumber;
const int RegionHeartbeatRequest::kBytesReadFieldNumber;
const int RegionHeartbeatRequest::kKeysWrittenFieldNumber;
const int RegionHeartbeatRequest::kKeysReadFieldNumber;
#endif  // !_MSC_VER

RegionHeartbeatRequest::RegionHeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RegionHeartbeatRequest)
}

void RegionHeartbeatRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
  leader_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

RegionHeartbeatRequest::RegionHeartbeatRequest(const RegionHeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.RegionHeartbeatRequest)
}

void RegionHeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  leader_ = NULL;
  bytes_written_ = GOOGLE_ULONGLONG(0);
  bytes_read_ = GOOGLE_ULONGLONG(0);
  keys_written_ = GOOGLE_ULONGLONG(0);
  keys_read_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionHeartbeatRequest::~RegionHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:pdpb.RegionHeartbeatRequest)
  SharedDtor();
}

void RegionHeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete leader_;
  }
}

void RegionHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionHeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionHeartbeatRequest_descriptor_;
}

const RegionHeartbeatRequest& RegionHeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

RegionHeartbeatRequest* RegionHeartbeatRequest::default_instance_ = NULL;

RegionHeartbeatRequest* RegionHeartbeatRequest::New() const {
  return new RegionHeartbeatRequest;
}

void RegionHeartbeatRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegionHeartbeatRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(bytes_written_, keys_read_);
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
    if (has_leader()) {
      if (leader_ != NULL) leader_->::metapb::Peer::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  down_peers_.Clear();
  pending_peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RegionHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_down_peers;
        break;
      }

      // repeated .pdpb.PeerStats down_peers = 3;
      case 3: {
        if (tag == 26) {
         parse_down_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_down_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_down_peers;
        if (input->ExpectTag(34)) goto parse_pending_peers;
        break;
      }

      // repeated .metapb.Peer pending_peers = 4;
      case 4: {
        if (tag == 34) {
         parse_pending_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pending_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pending_peers;
        if (input->ExpectTag(40)) goto parse_bytes_written;
        break;
      }

      // optional uint64 bytes_written = 5;
      case 5: {
        if (tag == 40) {
         parse_bytes_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
          set_has_bytes_written();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bytes_read;
        break;
      }

      // optional uint64 bytes_read = 6;
      case 6: {
        if (tag == 48) {
         parse_bytes_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
          set_has_bytes_read();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_keys_written;
        break;
      }

      // optional uint64 keys_written = 7;
      case 7: {
        if (tag == 56) {
         parse_keys_written:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
          set_has_keys_written();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_keys_read;
        break;
      }

      // optional uint64 keys_read = 8;
      case 8: {
        if (tag == 64) {
         parse_keys_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
          set_has_keys_read();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RegionHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RegionHeartbeatRequest)
  return false;
#undef DO_
}

void RegionHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RegionHeartbeatRequest)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  // repeated .pdpb.PeerStats down_peers = 3;
  for (int i = 0; i < this->down_peers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->down_peers(i), output);
  }

  // repeated .metapb.Peer pending_peers = 4;
  for (int i = 0; i < this->pending_peers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pending_peers(i), output);
  }

  // optional uint64 bytes_written = 5;
  if (has_bytes_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_written(), output);
  }

  // optional uint64 bytes_read = 6;
  if (has_bytes_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_read(), output);
  }

  // optional uint64 keys_written = 7;
  if (has_keys_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->keys_written(), output);
  }

  // optional uint64 keys_read = 8;
  if (has_keys_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->keys_read(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.RegionHeartbeatRequest)
}

::google::protobuf::uint8* RegionHeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RegionHeartbeatRequest)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  // repeated .pdpb.PeerStats down_peers = 3;
  for (int i = 0; i < this->down_peers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->down_peers(i), target);
  }

  // repeated .metapb.Peer pending_peers = 4;
  for (int i = 0; i < this->pending_peers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pending_peers(i), target);
  }

  // optional uint64 bytes_written = 5;
  if (has_bytes_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_written(), target);
  }

  // optional uint64 bytes_read = 6;
  if (has_bytes_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_read(), target);
  }

  // optional uint64 keys_written = 7;
  if (has_keys_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->keys_written(), target);
  }

  // optional uint64 keys_read = 8;
  if (has_keys_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->keys_read(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RegionHeartbeatRequest)
  return target;
}

int RegionHeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .metapb.Peer leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

    // optional uint64 bytes_written = 5;
    if (has_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_written());
    }

    // optional uint64 bytes_read = 6;
    if (has_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_read());
    }

    // optional uint64 keys_written = 7;
    if (has_keys_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->keys_written());
    }

    // optional uint64 keys_read = 8;
    if (has_keys_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->keys_read());
    }

  }
  // repeated .pdpb.PeerStats down_peers = 3;
  total_size += 1 * this->down_peers_size();
  for (int i = 0; i < this->down_peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->down_peers(i));
  }

  // repeated .metapb.Peer pending_peers = 4;
  total_size += 1 * this->pending_peers_size();
  for (int i = 0; i < this->pending_peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pending_peers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionHeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionHeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionHeartbeatRequest::MergeFrom(const RegionHeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  down_peers_.MergeFrom(from.down_peers_);
  pending_peers_.MergeFrom(from.pending_peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
    if (from.has_bytes_written()) {
      set_bytes_written(from.bytes_written());
    }
    if (from.has_bytes_read()) {
      set_bytes_read(from.bytes_read());
    }
    if (from.has_keys_written()) {
      set_keys_written(from.keys_written());
    }
    if (from.has_keys_read()) {
      set_keys_read(from.keys_read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatRequest::CopyFrom(const RegionHeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionHeartbeatRequest::IsInitialized() const {

  return true;
}

void RegionHeartbeatRequest::Swap(RegionHeartbeatRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(leader_, other->leader_);
    down_peers_.Swap(&other->down_peers_);
    pending_peers_.Swap(&other->pending_peers_);
    std::swap(bytes_written_, other->bytes_written_);
    std::swap(bytes_read_, other->bytes_read_);
    std::swap(keys_written_, other->keys_written_);
    std::swap(keys_read_, other->keys_read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionHeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionHeartbeatRequest_descriptor_;
  metadata.reflection = RegionHeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePeer::kChangeTypeFieldNumber;
const int ChangePeer::kPeerFieldNumber;
#endif  // !_MSC_VER

ChangePeer::ChangePeer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ChangePeer)
}

void ChangePeer::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

ChangePeer::ChangePeer(const ChangePeer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ChangePeer)
}

void ChangePeer::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 0;
  peer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePeer::~ChangePeer() {
  // @@protoc_insertion_point(destructor:pdpb.ChangePeer)
  SharedDtor();
}

void ChangePeer::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void ChangePeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeer_descriptor_;
}

const ChangePeer& ChangePeer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

ChangePeer* ChangePeer::default_instance_ = NULL;

ChangePeer* ChangePeer::New() const {
  return new ChangePeer;
}

void ChangePeer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    change_type_ = 0;
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ChangePeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eraftpb::ConfChangeType_IsValid(value)) {
            set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ChangePeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ChangePeer)
  return false;
#undef DO_
}

void ChangePeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ChangePeer)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ChangePeer)
}

::google::protobuf::uint8* ChangePeer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ChangePeer)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ChangePeer)
  return target;
}

int ChangePeer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eraftpb.ConfChangeType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional .metapb.Peer peer = 2;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePeer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePeer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePeer::MergeFrom(const ChangePeer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePeer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeer::CopyFrom(const ChangePeer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeer::IsInitialized() const {

  return true;
}

void ChangePeer::Swap(ChangePeer* other) {
  if (other != this) {
    std::swap(change_type_, other->change_type_);
    std::swap(peer_, other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeer_descriptor_;
  metadata.reflection = ChangePeer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferLeader::kPeerFieldNumber;
#endif  // !_MSC_VER

TransferLeader::TransferLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TransferLeader)
}

void TransferLeader::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

TransferLeader::TransferLeader(const TransferLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TransferLeader)
}

void TransferLeader::SharedCtor() {
  _cached_size_ = 0;
  peer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeader::~TransferLeader() {
  // @@protoc_insertion_point(destructor:pdpb.TransferLeader)
  SharedDtor();
}

void TransferLeader::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void TransferLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeader_descriptor_;
}

const TransferLeader& TransferLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

TransferLeader* TransferLeader::default_instance_ = NULL;

TransferLeader* TransferLeader::New() const {
  return new TransferLeader;
}

void TransferLeader::Clear() {
  if (has_peer()) {
    if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TransferLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TransferLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TransferLeader)
  return false;
#undef DO_
}

void TransferLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TransferLeader)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TransferLeader)
}

::google::protobuf::uint8* TransferLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TransferLeader)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TransferLeader)
  return target;
}

int TransferLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Peer peer = 1;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeader::MergeFrom(const TransferLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeader::CopyFrom(const TransferLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeader::IsInitialized() const {

  return true;
}

void TransferLeader::Swap(TransferLeader* other) {
  if (other != this) {
    std::swap(peer_, other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeader_descriptor_;
  metadata.reflection = TransferLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionHeartbeatResponse::kChangePeerFieldNumber;
const int RegionHeartbeatResponse::kTransferLeaderFieldNumber;
#endif  // !_MSC_VER

RegionHeartbeatResponse::RegionHeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RegionHeartbeatResponse)
}

void RegionHeartbeatResponse::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::pdpb::ChangePeer*>(&::pdpb::ChangePeer::default_instance());
  transfer_leader_ = const_cast< ::pdpb::TransferLeader*>(&::pdpb::TransferLeader::default_instance());
}

RegionHeartbeatResponse::RegionHeartbeatResponse(const RegionHeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.RegionHeartbeatResponse)
}

void RegionHeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  change_peer_ = NULL;
  transfer_leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionHeartbeatResponse::~RegionHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:pdpb.RegionHeartbeatResponse)
  SharedDtor();
}

void RegionHeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
    delete change_peer_;
    delete transfer_leader_;
  }
}

void RegionHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionHeartbeatResponse_descriptor_;
}

const RegionHeartbeatResponse& RegionHeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

RegionHeartbeatResponse* RegionHeartbeatResponse::default_instance_ = NULL;

RegionHeartbeatResponse* RegionHeartbeatResponse::New() const {
  return new RegionHeartbeatResponse;
}

void RegionHeartbeatResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_change_peer()) {
      if (change_peer_ != NULL) change_peer_->::pdpb::ChangePeer::Clear();
    }
    if (has_transfer_leader()) {
      if (transfer_leader_ != NULL) transfer_leader_->::pdpb::TransferLeader::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RegionHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ChangePeer change_peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transfer_leader;
        break;
      }

      // optional .pdpb.TransferLeader transfer_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RegionHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RegionHeartbeatResponse)
  return false;
#undef DO_
}

void RegionHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RegionHeartbeatResponse)
  // optional .pdpb.ChangePeer change_peer = 1;
  if (has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->change_peer(), output);
  }

  // optional .pdpb.TransferLeader transfer_leader = 2;
  if (has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transfer_leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.RegionHeartbeatResponse)
}

::google::protobuf::uint8* RegionHeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RegionHeartbeatResponse)
  // optional .pdpb.ChangePeer change_peer = 1;
  if (has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->change_peer(), target);
  }

  // optional .pdpb.TransferLeader transfer_leader = 2;
  if (has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transfer_leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RegionHeartbeatResponse)
  return target;
}

int RegionHeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pdpb.ChangePeer change_peer = 1;
    if (has_change_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_peer());
    }

    // optional .pdpb.TransferLeader transfer_leader = 2;
    if (has_transfer_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transfer_leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionHeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionHeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionHeartbeatResponse::MergeFrom(const RegionHeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_peer()) {
      mutable_change_peer()->::pdpb::ChangePeer::MergeFrom(from.change_peer());
    }
    if (from.has_transfer_leader()) {
      mutable_transfer_leader()->::pdpb::TransferLeader::MergeFrom(from.transfer_leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatResponse::CopyFrom(const RegionHeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionHeartbeatResponse::IsInitialized() const {

  return true;
}

void RegionHeartbeatResponse::Swap(RegionHeartbeatResponse* other) {
  if (other != this) {
    std::swap(change_peer_, other->change_peer_);
    std::swap(transfer_leader_, other->transfer_leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionHeartbeatResponse_descriptor_;
  metadata.reflection = RegionHeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutClusterConfigRequest::kClusterFieldNumber;
#endif  // !_MSC_VER

PutClusterConfigRequest::PutClusterConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutClusterConfigRequest)
}

void PutClusterConfigRequest::InitAsDefaultInstance() {
  cluster_ = const_cast< ::metapb::Cluster*>(&::metapb::Cluster::default_instance());
}

PutClusterConfigRequest::PutClusterConfigRequest(const PutClusterConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutClusterConfigRequest)
}

void PutClusterConfigRequest::SharedCtor() {
  _cached_size_ = 0;
  cluster_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutClusterConfigRequest::~PutClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:pdpb.PutClusterConfigRequest)
  SharedDtor();
}

void PutClusterConfigRequest::SharedDtor() {
  if (this != default_instance_) {
    delete cluster_;
  }
}

void PutClusterConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutClusterConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutClusterConfigRequest_descriptor_;
}

const PutClusterConfigRequest& PutClusterConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

PutClusterConfigRequest* PutClusterConfigRequest::default_instance_ = NULL;

PutClusterConfigRequest* PutClusterConfigRequest::New() const {
  return new PutClusterConfigRequest;
}

void PutClusterConfigRequest::Clear() {
  if (has_cluster()) {
    if (cluster_ != NULL) cluster_->::metapb::Cluster::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutClusterConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutClusterConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Cluster cluster = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutClusterConfigRequest)
  return false;
#undef DO_
}

void PutClusterConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutClusterConfigRequest)
  // optional .metapb.Cluster cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutClusterConfigRequest)
}

::google::protobuf::uint8* PutClusterConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutClusterConfigRequest)
  // optional .metapb.Cluster cluster = 1;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutClusterConfigRequest)
  return target;
}

int PutClusterConfigRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Cluster cluster = 1;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutClusterConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutClusterConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutClusterConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutClusterConfigRequest::MergeFrom(const PutClusterConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster()) {
      mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutClusterConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigRequest::CopyFrom(const PutClusterConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutClusterConfigRequest::IsInitialized() const {

  return true;
}

void PutClusterConfigRequest::Swap(PutClusterConfigRequest* other) {
  if (other != this) {
    std::swap(cluster_, other->cluster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutClusterConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutClusterConfigRequest_descriptor_;
  metadata.reflection = PutClusterConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PutClusterConfigResponse::PutClusterConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutClusterConfigResponse)
}

void PutClusterConfigResponse::InitAsDefaultInstance() {
}

PutClusterConfigResponse::PutClusterConfigResponse(const PutClusterConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutClusterConfigResponse)
}

void PutClusterConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutClusterConfigResponse::~PutClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:pdpb.PutClusterConfigResponse)
  SharedDtor();
}

void PutClusterConfigResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutClusterConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutClusterConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutClusterConfigResponse_descriptor_;
}

const PutClusterConfigResponse& PutClusterConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

PutClusterConfigResponse* PutClusterConfigResponse::default_instance_ = NULL;

PutClusterConfigResponse* PutClusterConfigResponse::New() const {
  return new PutClusterConfigResponse;
}

void PutClusterConfigResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutClusterConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutClusterConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutClusterConfigResponse)
  return false;
#undef DO_
}

void PutClusterConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutClusterConfigResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutClusterConfigResponse)
}

::google::protobuf::uint8* PutClusterConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutClusterConfigResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutClusterConfigResponse)
  return target;
}

int PutClusterConfigResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutClusterConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutClusterConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutClusterConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutClusterConfigResponse::MergeFrom(const PutClusterConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutClusterConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigResponse::CopyFrom(const PutClusterConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutClusterConfigResponse::IsInitialized() const {

  return true;
}

void PutClusterConfigResponse::Swap(PutClusterConfigResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutClusterConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutClusterConfigResponse_descriptor_;
  metadata.reflection = PutClusterConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSplitRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

AskSplitRequest::AskSplitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskSplitRequest)
}

void AskSplitRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

AskSplitRequest::AskSplitRequest(const AskSplitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AskSplitRequest)
}

void AskSplitRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSplitRequest::~AskSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AskSplitRequest)
  SharedDtor();
}

void AskSplitRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void AskSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSplitRequest_descriptor_;
}

const AskSplitRequest& AskSplitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

AskSplitRequest* AskSplitRequest::default_instance_ = NULL;

AskSplitRequest* AskSplitRequest::New() const {
  return new AskSplitRequest;
}

void AskSplitRequest::Clear() {
  if (has_region()) {
    if (region_ != NULL) region_->::metapb::Region::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskSplitRequest)
  return false;
#undef DO_
}

void AskSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskSplitRequest)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AskSplitRequest)
}

::google::protobuf::uint8* AskSplitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskSplitRequest)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskSplitRequest)
  return target;
}

int AskSplitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSplitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSplitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSplitRequest::MergeFrom(const AskSplitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitRequest::CopyFrom(const AskSplitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitRequest::IsInitialized() const {

  return true;
}

void AskSplitRequest::Swap(AskSplitRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSplitRequest_descriptor_;
  metadata.reflection = AskSplitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSplitResponse::kNewRegionIdFieldNumber;
const int AskSplitResponse::kNewPeerIdsFieldNumber;
#endif  // !_MSC_VER

AskSplitResponse::AskSplitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskSplitResponse)
}

void AskSplitResponse::InitAsDefaultInstance() {
}

AskSplitResponse::AskSplitResponse(const AskSplitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AskSplitResponse)
}

void AskSplitResponse::SharedCtor() {
  _cached_size_ = 0;
  new_region_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSplitResponse::~AskSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AskSplitResponse)
  SharedDtor();
}

void AskSplitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSplitResponse_descriptor_;
}

const AskSplitResponse& AskSplitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

AskSplitResponse* AskSplitResponse::default_instance_ = NULL;

AskSplitResponse* AskSplitResponse::New() const {
  return new AskSplitResponse;
}

void AskSplitResponse::Clear() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
  new_peer_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
          set_has_new_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_new_peer_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_peer_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskSplitResponse)
  return false;
#undef DO_
}

void AskSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskSplitResponse)
  // optional uint64 new_region_id = 1;
  if (has_new_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 2;
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->new_peer_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AskSplitResponse)
}

::google::protobuf::uint8* AskSplitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskSplitResponse)
  // optional uint64 new_region_id = 1;
  if (has_new_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 2;
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->new_peer_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskSplitResponse)
  return target;
}

int AskSplitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 new_region_id = 1;
    if (has_new_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_region_id());
    }

  }
  // repeated uint64 new_peer_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->new_peer_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    total_size += 1 * this->new_peer_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSplitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSplitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSplitResponse::MergeFrom(const AskSplitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_region_id()) {
      set_new_region_id(from.new_region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitResponse::CopyFrom(const AskSplitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitResponse::IsInitialized() const {

  return true;
}

void AskSplitResponse::Swap(AskSplitResponse* other) {
  if (other != this) {
    std::swap(new_region_id_, other->new_region_id_);
    new_peer_ids_.Swap(&other->new_peer_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSplitResponse_descriptor_;
  metadata.reflection = AskSplitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreStats::kStoreIdFieldNumber;
const int StoreStats::kCapacityFieldNumber;
const int StoreStats::kAvailableFieldNumber;
const int StoreStats::kRegionCountFieldNumber;
const int StoreStats::kSendingSnapCountFieldNumber;
const int StoreStats::kReceivingSnapCountFieldNumber;
const int StoreStats::kStartTimeFieldNumber;
const int StoreStats::kApplyingSnapCountFieldNumber;
const int StoreStats::kIsBusyFieldNumber;
#endif  // !_MSC_VER

StoreStats::StoreStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreStats)
}

void StoreStats::InitAsDefaultInstance() {
}

StoreStats::StoreStats(const StoreStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreStats)
}

void StoreStats::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = GOOGLE_ULONGLONG(0);
  capacity_ = GOOGLE_ULONGLONG(0);
  available_ = GOOGLE_ULONGLONG(0);
  region_count_ = 0u;
  sending_snap_count_ = 0u;
  receiving_snap_count_ = 0u;
  start_time_ = 0u;
  applying_snap_count_ = 0u;
  is_busy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreStats::~StoreStats() {
  // @@protoc_insertion_point(destructor:pdpb.StoreStats)
  SharedDtor();
}

void StoreStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreStats_descriptor_;
}

const StoreStats& StoreStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

StoreStats* StoreStats::default_instance_ = NULL;

StoreStats* StoreStats::New() const {
  return new StoreStats;
}

void StoreStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(store_id_, applying_snap_count_);
  }
  is_busy_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 store_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }

      // optional uint64 capacity = 2;
      case 2: {
        if (tag == 16) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_available;
        break;
      }

      // optional uint64 available = 3;
      case 3: {
        if (tag == 24) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_region_count;
        break;
      }

      // optional uint32 region_count = 4;
      case 4: {
        if (tag == 32) {
         parse_region_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_count_)));
          set_has_region_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sending_snap_count;
        break;
      }

      // optional uint32 sending_snap_count = 5;
      case 5: {
        if (tag == 40) {
         parse_sending_snap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sending_snap_count_)));
          set_has_sending_snap_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_receiving_snap_count;
        break;
      }

      // optional uint32 receiving_snap_count = 6;
      case 6: {
        if (tag == 48) {
         parse_receiving_snap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiving_snap_count_)));
          set_has_receiving_snap_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 7;
      case 7: {
        if (tag == 56) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_applying_snap_count;
        break;
      }

      // optional uint32 applying_snap_count = 8;
      case 8: {
        if (tag == 64) {
         parse_applying_snap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applying_snap_count_)));
          set_has_applying_snap_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_busy;
        break;
      }

      // optional bool is_busy = 9;
      case 9: {
        if (tag == 72) {
         parse_is_busy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_busy_)));
          set_has_is_busy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreStats)
  return false;
#undef DO_
}

void StoreStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreStats)
  // optional uint64 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->store_id(), output);
  }

  // optional uint64 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->capacity(), output);
  }

  // optional uint64 available = 3;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->available(), output);
  }

  // optional uint32 region_count = 4;
  if (has_region_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region_count(), output);
  }

  // optional uint32 sending_snap_count = 5;
  if (has_sending_snap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sending_snap_count(), output);
  }

  // optional uint32 receiving_snap_count = 6;
  if (has_receiving_snap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->receiving_snap_count(), output);
  }

  // optional uint32 start_time = 7;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_time(), output);
  }

  // optional uint32 applying_snap_count = 8;
  if (has_applying_snap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->applying_snap_count(), output);
  }

  // optional bool is_busy = 9;
  if (has_is_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_busy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreStats)
}

::google::protobuf::uint8* StoreStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreStats)
  // optional uint64 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->store_id(), target);
  }

  // optional uint64 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->capacity(), target);
  }

  // optional uint64 available = 3;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->available(), target);
  }

  // optional uint32 region_count = 4;
  if (has_region_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region_count(), target);
  }

  // optional uint32 sending_snap_count = 5;
  if (has_sending_snap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sending_snap_count(), target);
  }

  // optional uint32 receiving_snap_count = 6;
  if (has_receiving_snap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiving_snap_count(), target);
  }

  // optional uint32 start_time = 7;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_time(), target);
  }

  // optional uint32 applying_snap_count = 8;
  if (has_applying_snap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->applying_snap_count(), target);
  }

  // optional bool is_busy = 9;
  if (has_is_busy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_busy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreStats)
  return target;
}

int StoreStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

    // optional uint64 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->capacity());
    }

    // optional uint64 available = 3;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available());
    }

    // optional uint32 region_count = 4;
    if (has_region_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_count());
    }

    // optional uint32 sending_snap_count = 5;
    if (has_sending_snap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sending_snap_count());
    }

    // optional uint32 receiving_snap_count = 6;
    if (has_receiving_snap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiving_snap_count());
    }

    // optional uint32 start_time = 7;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 applying_snap_count = 8;
    if (has_applying_snap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applying_snap_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_busy = 9;
    if (has_is_busy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreStats::MergeFrom(const StoreStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_region_count()) {
      set_region_count(from.region_count());
    }
    if (from.has_sending_snap_count()) {
      set_sending_snap_count(from.sending_snap_count());
    }
    if (from.has_receiving_snap_count()) {
      set_receiving_snap_count(from.receiving_snap_count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_applying_snap_count()) {
      set_applying_snap_count(from.applying_snap_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_busy()) {
      set_is_busy(from.is_busy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreStats::CopyFrom(const StoreStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreStats::IsInitialized() const {

  return true;
}

void StoreStats::Swap(StoreStats* other) {
  if (other != this) {
    std::swap(store_id_, other->store_id_);
    std::swap(capacity_, other->capacity_);
    std::swap(available_, other->available_);
    std::swap(region_count_, other->region_count_);
    std::swap(sending_snap_count_, other->sending_snap_count_);
    std::swap(receiving_snap_count_, other->receiving_snap_count_);
    std::swap(start_time_, other->start_time_);
    std::swap(applying_snap_count_, other->applying_snap_count_);
    std::swap(is_busy_, other->is_busy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreStats_descriptor_;
  metadata.reflection = StoreStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreHeartbeatRequest::kStatsFieldNumber;
#endif  // !_MSC_VER

StoreHeartbeatRequest::StoreHeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreHeartbeatRequest)
}

void StoreHeartbeatRequest::InitAsDefaultInstance() {
  stats_ = const_cast< ::pdpb::StoreStats*>(&::pdpb::StoreStats::default_instance());
}

StoreHeartbeatRequest::StoreHeartbeatRequest(const StoreHeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreHeartbeatRequest)
}

void StoreHeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreHeartbeatRequest::~StoreHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:pdpb.StoreHeartbeatRequest)
  SharedDtor();
}

void StoreHeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
  }
}

void StoreHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreHeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreHeartbeatRequest_descriptor_;
}

const StoreHeartbeatRequest& StoreHeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

StoreHeartbeatRequest* StoreHeartbeatRequest::default_instance_ = NULL;

StoreHeartbeatRequest* StoreHeartbeatRequest::New() const {
  return new StoreHeartbeatRequest;
}

void StoreHeartbeatRequest::Clear() {
  if (has_stats()) {
    if (stats_ != NULL) stats_->::pdpb::StoreStats::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.StoreStats stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreHeartbeatRequest)
  return false;
#undef DO_
}

void StoreHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreHeartbeatRequest)
  // optional .pdpb.StoreStats stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreHeartbeatRequest)
}

::google::protobuf::uint8* StoreHeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreHeartbeatRequest)
  // optional .pdpb.StoreStats stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreHeartbeatRequest)
  return target;
}

int StoreHeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pdpb.StoreStats stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreHeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreHeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreHeartbeatRequest::MergeFrom(const StoreHeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::pdpb::StoreStats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatRequest::CopyFrom(const StoreHeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatRequest::IsInitialized() const {

  return true;
}

void StoreHeartbeatRequest::Swap(StoreHeartbeatRequest* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreHeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreHeartbeatRequest_descriptor_;
  metadata.reflection = StoreHeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StoreHeartbeatResponse::StoreHeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreHeartbeatResponse)
}

void StoreHeartbeatResponse::InitAsDefaultInstance() {
}

StoreHeartbeatResponse::StoreHeartbeatResponse(const StoreHeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreHeartbeatResponse)
}

void StoreHeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreHeartbeatResponse::~StoreHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:pdpb.StoreHeartbeatResponse)
  SharedDtor();
}

void StoreHeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreHeartbeatResponse_descriptor_;
}

const StoreHeartbeatResponse& StoreHeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

StoreHeartbeatResponse* StoreHeartbeatResponse::default_instance_ = NULL;

StoreHeartbeatResponse* StoreHeartbeatResponse::New() const {
  return new StoreHeartbeatResponse;
}

void StoreHeartbeatResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreHeartbeatResponse)
  return false;
#undef DO_
}

void StoreHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreHeartbeatResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreHeartbeatResponse)
}

::google::protobuf::uint8* StoreHeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreHeartbeatResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreHeartbeatResponse)
  return target;
}

int StoreHeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreHeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreHeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreHeartbeatResponse::MergeFrom(const StoreHeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatResponse::CopyFrom(const StoreHeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatResponse::IsInitialized() const {

  return true;
}

void StoreHeartbeatResponse::Swap(StoreHeartbeatResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreHeartbeatResponse_descriptor_;
  metadata.reflection = StoreHeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSplitRequest::kLeftFieldNumber;
const int ReportSplitRequest::kRightFieldNumber;
#endif  // !_MSC_VER

ReportSplitRequest::ReportSplitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportSplitRequest)
}

void ReportSplitRequest::InitAsDefaultInstance() {
  left_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
  right_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

ReportSplitRequest::ReportSplitRequest(const ReportSplitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportSplitRequest)
}

void ReportSplitRequest::SharedCtor() {
  _cached_size_ = 0;
  left_ = NULL;
  right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSplitRequest::~ReportSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ReportSplitRequest)
  SharedDtor();
}

void ReportSplitRequest::SharedDtor() {
  if (this != default_instance_) {
    delete left_;
    delete right_;
  }
}

void ReportSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSplitRequest_descriptor_;
}

const ReportSplitRequest& ReportSplitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

ReportSplitRequest* ReportSplitRequest::default_instance_ = NULL;

ReportSplitRequest* ReportSplitRequest::New() const {
  return new ReportSplitRequest;
}

void ReportSplitRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_left()) {
      if (left_ != NULL) left_->::metapb::Region::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::metapb::Region::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional .metapb.Region right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportSplitRequest)
  return false;
#undef DO_
}

void ReportSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportSplitRequest)
  // optional .metapb.Region left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->left(), output);
  }

  // optional .metapb.Region right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ReportSplitRequest)
}

::google::protobuf::uint8* ReportSplitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportSplitRequest)
  // optional .metapb.Region left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->left(), target);
  }

  // optional .metapb.Region right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportSplitRequest)
  return target;
}

int ReportSplitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // optional .metapb.Region right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSplitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSplitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSplitRequest::MergeFrom(const ReportSplitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      mutable_left()->::metapb::Region::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::metapb::Region::MergeFrom(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitRequest::CopyFrom(const ReportSplitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitRequest::IsInitialized() const {

  return true;
}

void ReportSplitRequest::Swap(ReportSplitRequest* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSplitRequest_descriptor_;
  metadata.reflection = ReportSplitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReportSplitResponse::ReportSplitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportSplitResponse)
}

void ReportSplitResponse::InitAsDefaultInstance() {
}

ReportSplitResponse::ReportSplitResponse(const ReportSplitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportSplitResponse)
}

void ReportSplitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSplitResponse::~ReportSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ReportSplitResponse)
  SharedDtor();
}

void ReportSplitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSplitResponse_descriptor_;
}

const ReportSplitResponse& ReportSplitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

ReportSplitResponse* ReportSplitResponse::default_instance_ = NULL;

ReportSplitResponse* ReportSplitResponse::New() const {
  return new ReportSplitResponse;
}

void ReportSplitResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportSplitResponse)
  return false;
#undef DO_
}

void ReportSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportSplitResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ReportSplitResponse)
}

::google::protobuf::uint8* ReportSplitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportSplitResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportSplitResponse)
  return target;
}

int ReportSplitResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSplitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSplitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSplitResponse::MergeFrom(const ReportSplitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitResponse::CopyFrom(const ReportSplitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitResponse::IsInitialized() const {

  return true;
}

void ReportSplitResponse::Swap(ReportSplitResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSplitResponse_descriptor_;
  metadata.reflection = ReportSplitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHeader::kUuidFieldNumber;
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !_MSC_VER

RequestHeader::RequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RequestHeader)
}

void RequestHeader::InitAsDefaultInstance() {
}

RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:pdpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeader_descriptor_;
}

const RequestHeader& RequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

RequestHeader* RequestHeader::default_instance_ = NULL;

RequestHeader* RequestHeader::New() const {
  return new RequestHeader;
}

void RequestHeader::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    cluster_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cluster_id;
        break;
      }

      // optional uint64 cluster_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
          set_has_cluster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RequestHeader)
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  // optional uint64 cluster_id = 2;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cluster_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RequestHeader)
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional uint64 cluster_id = 2;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cluster_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RequestHeader)
  return target;
}

int RequestHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional uint64 cluster_id = 2;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {

  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeader_descriptor_;
  metadata.reflection = RequestHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseHeader::kUuidFieldNumber;
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !_MSC_VER

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ResponseHeader)
}

void ResponseHeader::InitAsDefaultInstance() {
  error_ = const_cast< ::pdpb::Error*>(&::pdpb::Error::default_instance());
}

ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_ = GOOGLE_ULONGLONG(0);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:pdpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHeader_descriptor_;
}

const ResponseHeader& ResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

ResponseHeader* ResponseHeader::default_instance_ = NULL;

ResponseHeader* ResponseHeader::New() const {
  return new ResponseHeader;
}

void ResponseHeader::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    cluster_id_ = GOOGLE_ULONGLONG(0);
    if (has_error()) {
      if (error_ != NULL) error_->::pdpb::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cluster_id;
        break;
      }

      // optional uint64 cluster_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
          set_has_cluster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .pdpb.Error error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ResponseHeader)
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  // optional uint64 cluster_id = 2;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cluster_id(), output);
  }

  // optional .pdpb.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ResponseHeader)
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional uint64 cluster_id = 2;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cluster_id(), target);
  }

  // optional .pdpb.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ResponseHeader)
  return target;
}

int ResponseHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional uint64 cluster_id = 2;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_id());
    }

    // optional .pdpb.Error error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
    if (from.has_error()) {
      mutable_error()->::pdpb::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {

  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHeader_descriptor_;
  metadata.reflection = ResponseHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kHeaderFieldNumber;
const int Request::kCmdTypeFieldNumber;
const int Request::kTsoFieldNumber;
const int Request::kBootstrapFieldNumber;
const int Request::kIsBootstrappedFieldNumber;
const int Request::kAllocIdFieldNumber;
const int Request::kGetStoreFieldNumber;
const int Request::kPutStoreFieldNumber;
const int Request::kAskSplitFieldNumber;
const int Request::kGetRegionFieldNumber;
const int Request::kRegionHeartbeatFieldNumber;
const int Request::kGetClusterConfigFieldNumber;
const int Request::kPutClusterConfigFieldNumber;
const int Request::kStoreHeartbeatFieldNumber;
const int Request::kReportSplitFieldNumber;
const int Request::kGetRegionByIdFieldNumber;
const int Request::kGetPdMembersFieldNumber;
const int Request::kAllocVolumeIdFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Request)
}

void Request::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(&::pdpb::RequestHeader::default_instance());
  tso_ = const_cast< ::pdpb::TsoRequest*>(&::pdpb::TsoRequest::default_instance());
  bootstrap_ = const_cast< ::pdpb::BootstrapRequest*>(&::pdpb::BootstrapRequest::default_instance());
  is_bootstrapped_ = const_cast< ::pdpb::IsBootstrappedRequest*>(&::pdpb::IsBootstrappedRequest::default_instance());
  alloc_id_ = const_cast< ::pdpb::AllocIdRequest*>(&::pdpb::AllocIdRequest::default_instance());
  get_store_ = const_cast< ::pdpb::GetStoreRequest*>(&::pdpb::GetStoreRequest::default_instance());
  put_store_ = const_cast< ::pdpb::PutStoreRequest*>(&::pdpb::PutStoreRequest::default_instance());
  ask_split_ = const_cast< ::pdpb::AskSplitRequest*>(&::pdpb::AskSplitRequest::default_instance());
  get_region_ = const_cast< ::pdpb::GetRegionRequest*>(&::pdpb::GetRegionRequest::default_instance());
  region_heartbeat_ = const_cast< ::pdpb::RegionHeartbeatRequest*>(&::pdpb::RegionHeartbeatRequest::default_instance());
  get_cluster_config_ = const_cast< ::pdpb::GetClusterConfigRequest*>(&::pdpb::GetClusterConfigRequest::default_instance());
  put_cluster_config_ = const_cast< ::pdpb::PutClusterConfigRequest*>(&::pdpb::PutClusterConfigRequest::default_instance());
  store_heartbeat_ = const_cast< ::pdpb::StoreHeartbeatRequest*>(&::pdpb::StoreHeartbeatRequest::default_instance());
  report_split_ = const_cast< ::pdpb::ReportSplitRequest*>(&::pdpb::ReportSplitRequest::default_instance());
  get_region_by_id_ = const_cast< ::pdpb::GetRegionByIDRequest*>(&::pdpb::GetRegionByIDRequest::default_instance());
  get_pd_members_ = const_cast< ::pdpb::GetPDMembersRequest*>(&::pdpb::GetPDMembersRequest::default_instance());
  alloc_volume_id_ = const_cast< ::pdpb::AllocVolumeIdRequest*>(&::pdpb::AllocVolumeIdRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cmd_type_ = 0;
  tso_ = NULL;
  bootstrap_ = NULL;
  is_bootstrapped_ = NULL;
  alloc_id_ = NULL;
  get_store_ = NULL;
  put_store_ = NULL;
  ask_split_ = NULL;
  get_region_ = NULL;
  region_heartbeat_ = NULL;
  get_cluster_config_ = NULL;
  put_cluster_config_ = NULL;
  store_heartbeat_ = NULL;
  report_split_ = NULL;
  get_region_by_id_ = NULL;
  get_pd_members_ = NULL;
  alloc_volume_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:pdpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete tso_;
    delete bootstrap_;
    delete is_bootstrapped_;
    delete alloc_id_;
    delete get_store_;
    delete put_store_;
    delete ask_split_;
    delete get_region_;
    delete region_heartbeat_;
    delete get_cluster_config_;
    delete put_cluster_config_;
    delete store_heartbeat_;
    delete report_split_;
    delete get_region_by_id_;
    delete get_pd_members_;
    delete alloc_volume_id_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_header()) {
      if (header_ != NULL) header_->::pdpb::RequestHeader::Clear();
    }
    cmd_type_ = 0;
    if (has_tso()) {
      if (tso_ != NULL) tso_->::pdpb::TsoRequest::Clear();
    }
    if (has_bootstrap()) {
      if (bootstrap_ != NULL) bootstrap_->::pdpb::BootstrapRequest::Clear();
    }
    if (has_is_bootstrapped()) {
      if (is_bootstrapped_ != NULL) is_bootstrapped_->::pdpb::IsBootstrappedRequest::Clear();
    }
    if (has_alloc_id()) {
      if (alloc_id_ != NULL) alloc_id_->::pdpb::AllocIdRequest::Clear();
    }
    if (has_get_store()) {
      if (get_store_ != NULL) get_store_->::pdpb::GetStoreRequest::Clear();
    }
    if (has_put_store()) {
      if (put_store_ != NULL) put_store_->::pdpb::PutStoreRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_ask_split()) {
      if (ask_split_ != NULL) ask_split_->::pdpb::AskSplitRequest::Clear();
    }
    if (has_get_region()) {
      if (get_region_ != NULL) get_region_->::pdpb::GetRegionRequest::Clear();
    }
    if (has_region_heartbeat()) {
      if (region_heartbeat_ != NULL) region_heartbeat_->::pdpb::RegionHeartbeatRequest::Clear();
    }
    if (has_get_cluster_config()) {
      if (get_cluster_config_ != NULL) get_cluster_config_->::pdpb::GetClusterConfigRequest::Clear();
    }
    if (has_put_cluster_config()) {
      if (put_cluster_config_ != NULL) put_cluster_config_->::pdpb::PutClusterConfigRequest::Clear();
    }
    if (has_store_heartbeat()) {
      if (store_heartbeat_ != NULL) store_heartbeat_->::pdpb::StoreHeartbeatRequest::Clear();
    }
    if (has_report_split()) {
      if (report_split_ != NULL) report_split_->::pdpb::ReportSplitRequest::Clear();
    }
    if (has_get_region_by_id()) {
      if (get_region_by_id_ != NULL) get_region_by_id_->::pdpb::GetRegionByIDRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_get_pd_members()) {
      if (get_pd_members_ != NULL) get_pd_members_->::pdpb::GetPDMembersRequest::Clear();
    }
    if (has_alloc_volume_id()) {
      if (alloc_volume_id_ != NULL) alloc_volume_id_->::pdpb::AllocVolumeIdRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // optional .pdpb.CommandType cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pdpb::CommandType_IsValid(value)) {
            set_cmd_type(static_cast< ::pdpb::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tso;
        break;
      }

      // optional .pdpb.TsoRequest tso = 3;
      case 3: {
        if (tag == 26) {
         parse_tso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tso()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bootstrap;
        break;
      }

      // optional .pdpb.BootstrapRequest bootstrap = 4;
      case 4: {
        if (tag == 34) {
         parse_bootstrap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bootstrap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_is_bootstrapped;
        break;
      }

      // optional .pdpb.IsBootstrappedRequest is_bootstrapped = 5;
      case 5: {
        if (tag == 42) {
         parse_is_bootstrapped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_bootstrapped()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_alloc_id;
        break;
      }

      // optional .pdpb.AllocIdRequest alloc_id = 6;
      case 6: {
        if (tag == 50) {
         parse_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alloc_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_get_store;
        break;
      }

      // optional .pdpb.GetStoreRequest get_store = 7;
      case 7: {
        if (tag == 58) {
         parse_get_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_put_store;
        break;
      }

      // optional .pdpb.PutStoreRequest put_store = 8;
      case 8: {
        if (tag == 66) {
         parse_put_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ask_split;
        break;
      }

      // optional .pdpb.AskSplitRequest ask_split = 9;
      case 9: {
        if (tag == 74) {
         parse_ask_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_get_region;
        break;
      }

      // optional .pdpb.GetRegionRequest get_region = 10;
      case 10: {
        if (tag == 82) {
         parse_get_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_region_heartbeat;
        break;
      }

      // optional .pdpb.RegionHeartbeatRequest region_heartbeat = 11;
      case 11: {
        if (tag == 90) {
         parse_region_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_get_cluster_config;
        break;
      }

      // optional .pdpb.GetClusterConfigRequest get_cluster_config = 12;
      case 12: {
        if (tag == 98) {
         parse_get_cluster_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_cluster_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_put_cluster_config;
        break;
      }

      // optional .pdpb.PutClusterConfigRequest put_cluster_config = 13;
      case 13: {
        if (tag == 106) {
         parse_put_cluster_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_cluster_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_store_heartbeat;
        break;
      }

      // optional .pdpb.StoreHeartbeatRequest store_heartbeat = 14;
      case 14: {
        if (tag == 114) {
         parse_store_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_report_split;
        break;
      }

      // optional .pdpb.ReportSplitRequest report_split = 15;
      case 15: {
        if (tag == 122) {
         parse_report_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_get_region_by_id;
        break;
      }

      // optional .pdpb.GetRegionByIDRequest get_region_by_id = 16;
      case 16: {
        if (tag == 130) {
         parse_get_region_by_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_region_by_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_get_pd_members;
        break;
      }

      // optional .pdpb.GetPDMembersRequest get_pd_members = 17;
      case 17: {
        if (tag == 138) {
         parse_get_pd_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_pd_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_alloc_volume_id;
        break;
      }

      // optional .pdpb.AllocVolumeIdRequest alloc_volume_id = 18;
      case 18: {
        if (tag == 146) {
         parse_alloc_volume_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alloc_volume_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Request)
  // optional .pdpb.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .pdpb.CommandType cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd_type(), output);
  }

  // optional .pdpb.TsoRequest tso = 3;
  if (has_tso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tso(), output);
  }

  // optional .pdpb.BootstrapRequest bootstrap = 4;
  if (has_bootstrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bootstrap(), output);
  }

  // optional .pdpb.IsBootstrappedRequest is_bootstrapped = 5;
  if (has_is_bootstrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->is_bootstrapped(), output);
  }

  // optional .pdpb.AllocIdRequest alloc_id = 6;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->alloc_id(), output);
  }

  // optional .pdpb.GetStoreRequest get_store = 7;
  if (has_get_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->get_store(), output);
  }

  // optional .pdpb.PutStoreRequest put_store = 8;
  if (has_put_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->put_store(), output);
  }

  // optional .pdpb.AskSplitRequest ask_split = 9;
  if (has_ask_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ask_split(), output);
  }

  // optional .pdpb.GetRegionRequest get_region = 10;
  if (has_get_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->get_region(), output);
  }

  // optional .pdpb.RegionHeartbeatRequest region_heartbeat = 11;
  if (has_region_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->region_heartbeat(), output);
  }

  // optional .pdpb.GetClusterConfigRequest get_cluster_config = 12;
  if (has_get_cluster_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->get_cluster_config(), output);
  }

  // optional .pdpb.PutClusterConfigRequest put_cluster_config = 13;
  if (has_put_cluster_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->put_cluster_config(), output);
  }

  // optional .pdpb.StoreHeartbeatRequest store_heartbeat = 14;
  if (has_store_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->store_heartbeat(), output);
  }

  // optional .pdpb.ReportSplitRequest report_split = 15;
  if (has_report_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->report_split(), output);
  }

  // optional .pdpb.GetRegionByIDRequest get_region_by_id = 16;
  if (has_get_region_by_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->get_region_by_id(), output);
  }

  // optional .pdpb.GetPDMembersRequest get_pd_members = 17;
  if (has_get_pd_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->get_pd_members(), output);
  }

  // optional .pdpb.AllocVolumeIdRequest alloc_volume_id = 18;
  if (has_alloc_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->alloc_volume_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Request)
  // optional .pdpb.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .pdpb.CommandType cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd_type(), target);
  }

  // optional .pdpb.TsoRequest tso = 3;
  if (has_tso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tso(), target);
  }

  // optional .pdpb.BootstrapRequest bootstrap = 4;
  if (has_bootstrap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bootstrap(), target);
  }

  // optional .pdpb.IsBootstrappedRequest is_bootstrapped = 5;
  if (has_is_bootstrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->is_bootstrapped(), target);
  }

  // optional .pdpb.AllocIdRequest alloc_id = 6;
  if (has_alloc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->alloc_id(), target);
  }

  // optional .pdpb.GetStoreRequest get_store = 7;
  if (has_get_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->get_store(), target);
  }

  // optional .pdpb.PutStoreRequest put_store = 8;
  if (has_put_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->put_store(), target);
  }

  // optional .pdpb.AskSplitRequest ask_split = 9;
  if (has_ask_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ask_split(), target);
  }

  // optional .pdpb.GetRegionRequest get_region = 10;
  if (has_get_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->get_region(), target);
  }

  // optional .pdpb.RegionHeartbeatRequest region_heartbeat = 11;
  if (has_region_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->region_heartbeat(), target);
  }

  // optional .pdpb.GetClusterConfigRequest get_cluster_config = 12;
  if (has_get_cluster_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->get_cluster_config(), target);
  }

  // optional .pdpb.PutClusterConfigRequest put_cluster_config = 13;
  if (has_put_cluster_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->put_cluster_config(), target);
  }

  // optional .pdpb.StoreHeartbeatRequest store_heartbeat = 14;
  if (has_store_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->store_heartbeat(), target);
  }

  // optional .pdpb.ReportSplitRequest report_split = 15;
  if (has_report_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->report_split(), target);
  }

  // optional .pdpb.GetRegionByIDRequest get_region_by_id = 16;
  if (has_get_region_by_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->get_region_by_id(), target);
  }

  // optional .pdpb.GetPDMembersRequest get_pd_members = 17;
  if (has_get_pd_members()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->get_pd_members(), target);
  }

  // optional .pdpb.AllocVolumeIdRequest alloc_volume_id = 18;
  if (has_alloc_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->alloc_volume_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pdpb.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .pdpb.CommandType cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .pdpb.TsoRequest tso = 3;
    if (has_tso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tso());
    }

    // optional .pdpb.BootstrapRequest bootstrap = 4;
    if (has_bootstrap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bootstrap());
    }

    // optional .pdpb.IsBootstrappedRequest is_bootstrapped = 5;
    if (has_is_bootstrapped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->is_bootstrapped());
    }

    // optional .pdpb.AllocIdRequest alloc_id = 6;
    if (has_alloc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alloc_id());
    }

    // optional .pdpb.GetStoreRequest get_store = 7;
    if (has_get_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_store());
    }

    // optional .pdpb.PutStoreRequest put_store = 8;
    if (has_put_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_store());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pdpb.AskSplitRequest ask_split = 9;
    if (has_ask_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_split());
    }

    // optional .pdpb.GetRegionRequest get_region = 10;
    if (has_get_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_region());
    }

    // optional .pdpb.RegionHeartbeatRequest region_heartbeat = 11;
    if (has_region_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_heartbeat());
    }

    // optional .pdpb.GetClusterConfigRequest get_cluster_config = 12;
    if (has_get_cluster_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_cluster_config());
    }

    // optional .pdpb.PutClusterConfigRequest put_cluster_config = 13;
    if (has_put_cluster_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_cluster_config());
    }

    // optional .pdpb.StoreHeartbeatRequest store_heartbeat = 14;
    if (has_store_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_heartbeat());
    }

    // optional .pdpb.ReportSplitRequest report_split = 15;
    if (has_report_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report_split());
    }

    // optional .pdpb.GetRegionByIDRequest get_region_by_id = 16;
    if (has_get_region_by_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_region_by_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pdpb.GetPDMembersRequest get_pd_members = 17;
    if (has_get_pd_members()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_pd_members());
    }

    // optional .pdpb.AllocVolumeIdRequest alloc_volume_id = 18;
    if (has_alloc_volume_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alloc_volume_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_tso()) {
      mutable_tso()->::pdpb::TsoRequest::MergeFrom(from.tso());
    }
    if (from.has_bootstrap()) {
      mutable_bootstrap()->::pdpb::BootstrapRequest::MergeFrom(from.bootstrap());
    }
    if (from.has_is_bootstrapped()) {
      mutable_is_bootstrapped()->::pdpb::IsBootstrappedRequest::MergeFrom(from.is_bootstrapped());
    }
    if (from.has_alloc_id()) {
      mutable_alloc_id()->::pdpb::AllocIdRequest::MergeFrom(from.alloc_id());
    }
    if (from.has_get_store()) {
      mutable_get_store()->::pdpb::GetStoreRequest::MergeFrom(from.get_store());
    }
    if (from.has_put_store()) {
      mutable_put_store()->::pdpb::PutStoreRequest::MergeFrom(from.put_store());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ask_split()) {
      mutable_ask_split()->::pdpb::AskSplitRequest::MergeFrom(from.ask_split());
    }
    if (from.has_get_region()) {
      mutable_get_region()->::pdpb::GetRegionRequest::MergeFrom(from.get_region());
    }
    if (from.has_region_heartbeat()) {
      mutable_region_heartbeat()->::pdpb::RegionHeartbeatRequest::MergeFrom(from.region_heartbeat());
    }
    if (from.has_get_cluster_config()) {
      mutable_get_cluster_config()->::pdpb::GetClusterConfigRequest::MergeFrom(from.get_cluster_config());
    }
    if (from.has_put_cluster_config()) {
      mutable_put_cluster_config()->::pdpb::PutClusterConfigRequest::MergeFrom(from.put_cluster_config());
    }
    if (from.has_store_heartbeat()) {
      mutable_store_heartbeat()->::pdpb::StoreHeartbeatRequest::MergeFrom(from.store_heartbeat());
    }
    if (from.has_report_split()) {
      mutable_report_split()->::pdpb::ReportSplitRequest::MergeFrom(from.report_split());
    }
    if (from.has_get_region_by_id()) {
      mutable_get_region_by_id()->::pdpb::GetRegionByIDRequest::MergeFrom(from.get_region_by_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_get_pd_members()) {
      mutable_get_pd_members()->::pdpb::GetPDMembersRequest::MergeFrom(from.get_pd_members());
    }
    if (from.has_alloc_volume_id()) {
      mutable_alloc_volume_id()->::pdpb::AllocVolumeIdRequest::MergeFrom(from.alloc_volume_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(tso_, other->tso_);
    std::swap(bootstrap_, other->bootstrap_);
    std::swap(is_bootstrapped_, other->is_bootstrapped_);
    std::swap(alloc_id_, other->alloc_id_);
    std::swap(get_store_, other->get_store_);
    std::swap(put_store_, other->put_store_);
    std::swap(ask_split_, other->ask_split_);
    std::swap(get_region_, other->get_region_);
    std::swap(region_heartbeat_, other->region_heartbeat_);
    std::swap(get_cluster_config_, other->get_cluster_config_);
    std::swap(put_cluster_config_, other->put_cluster_config_);
    std::swap(store_heartbeat_, other->store_heartbeat_);
    std::swap(report_split_, other->report_split_);
    std::swap(get_region_by_id_, other->get_region_by_id_);
    std::swap(get_pd_members_, other->get_pd_members_);
    std::swap(alloc_volume_id_, other->alloc_volume_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kHeaderFieldNumber;
const int Response::kCmdTypeFieldNumber;
const int Response::kTsoFieldNumber;
const int Response::kBootstrapFieldNumber;
const int Response::kIsBootstrappedFieldNumber;
const int Response::kAllocIdFieldNumber;
const int Response::kGetStoreFieldNumber;
const int Response::kPutStoreFieldNumber;
const int Response::kAskSplitFieldNumber;
const int Response::kGetRegionFieldNumber;
const int Response::kRegionHeartbeatFieldNumber;
const int Response::kGetClusterConfigFieldNumber;
const int Response::kPutClusterConfigFieldNumber;
const int Response::kStoreHeartbeatFieldNumber;
const int Response::kReportSplitFieldNumber;
const int Response::kGetRegionByIdFieldNumber;
const int Response::kGetPdMembersFieldNumber;
const int Response::kAllocVolumeIdFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Response)
}

void Response::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(&::pdpb::ResponseHeader::default_instance());
  tso_ = const_cast< ::pdpb::TsoResponse*>(&::pdpb::TsoResponse::default_instance());
  bootstrap_ = const_cast< ::pdpb::BootstrapResponse*>(&::pdpb::BootstrapResponse::default_instance());
  is_bootstrapped_ = const_cast< ::pdpb::IsBootstrappedResponse*>(&::pdpb::IsBootstrappedResponse::default_instance());
  alloc_id_ = const_cast< ::pdpb::AllocIdResponse*>(&::pdpb::AllocIdResponse::default_instance());
  get_store_ = const_cast< ::pdpb::GetStoreResponse*>(&::pdpb::GetStoreResponse::default_instance());
  put_store_ = const_cast< ::pdpb::PutStoreResponse*>(&::pdpb::PutStoreResponse::default_instance());
  ask_split_ = const_cast< ::pdpb::AskSplitResponse*>(&::pdpb::AskSplitResponse::default_instance());
  get_region_ = const_cast< ::pdpb::GetRegionResponse*>(&::pdpb::GetRegionResponse::default_instance());
  region_heartbeat_ = const_cast< ::pdpb::RegionHeartbeatResponse*>(&::pdpb::RegionHeartbeatResponse::default_instance());
  get_cluster_config_ = const_cast< ::pdpb::GetClusterConfigResponse*>(&::pdpb::GetClusterConfigResponse::default_instance());
  put_cluster_config_ = const_cast< ::pdpb::PutClusterConfigResponse*>(&::pdpb::PutClusterConfigResponse::default_instance());
  store_heartbeat_ = const_cast< ::pdpb::StoreHeartbeatResponse*>(&::pdpb::StoreHeartbeatResponse::default_instance());
  report_split_ = const_cast< ::pdpb::ReportSplitResponse*>(&::pdpb::ReportSplitResponse::default_instance());
  get_region_by_id_ = const_cast< ::pdpb::GetRegionResponse*>(&::pdpb::GetRegionResponse::default_instance());
  get_pd_members_ = const_cast< ::pdpb::GetPDMembersResponse*>(&::pdpb::GetPDMembersResponse::default_instance());
  alloc_volume_id_ = const_cast< ::pdpb::AllocVolumeIdResponse*>(&::pdpb::AllocVolumeIdResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cmd_type_ = 0;
  tso_ = NULL;
  bootstrap_ = NULL;
  is_bootstrapped_ = NULL;
  alloc_id_ = NULL;
  get_store_ = NULL;
  put_store_ = NULL;
  ask_split_ = NULL;
  get_region_ = NULL;
  region_heartbeat_ = NULL;
  get_cluster_config_ = NULL;
  put_cluster_config_ = NULL;
  store_heartbeat_ = NULL;
  report_split_ = NULL;
  get_region_by_id_ = NULL;
  get_pd_members_ = NULL;
  alloc_volume_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:pdpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete tso_;
    delete bootstrap_;
    delete is_bootstrapped_;
    delete alloc_id_;
    delete get_store_;
    delete put_store_;
    delete ask_split_;
    delete get_region_;
    delete region_heartbeat_;
    delete get_cluster_config_;
    delete put_cluster_config_;
    delete store_heartbeat_;
    delete report_split_;
    delete get_region_by_id_;
    delete get_pd_members_;
    delete alloc_volume_id_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_header()) {
      if (header_ != NULL) header_->::pdpb::ResponseHeader::Clear();
    }
    cmd_type_ = 0;
    if (has_tso()) {
      if (tso_ != NULL) tso_->::pdpb::TsoResponse::Clear();
    }
    if (has_bootstrap()) {
      if (bootstrap_ != NULL) bootstrap_->::pdpb::BootstrapResponse::Clear();
    }
    if (has_is_bootstrapped()) {
      if (is_bootstrapped_ != NULL) is_bootstrapped_->::pdpb::IsBootstrappedResponse::Clear();
    }
    if (has_alloc_id()) {
      if (alloc_id_ != NULL) alloc_id_->::pdpb::AllocIdResponse::Clear();
    }
    if (has_get_store()) {
      if (get_store_ != NULL) get_store_->::pdpb::GetStoreResponse::Clear();
    }
    if (has_put_store()) {
      if (put_store_ != NULL) put_store_->::pdpb::PutStoreResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_ask_split()) {
      if (ask_split_ != NULL) ask_split_->::pdpb::AskSplitResponse::Clear();
    }
    if (has_get_region()) {
      if (get_region_ != NULL) get_region_->::pdpb::GetRegionResponse::Clear();
    }
    if (has_region_heartbeat()) {
      if (region_heartbeat_ != NULL) region_heartbeat_->::pdpb::RegionHeartbeatResponse::Clear();
    }
    if (has_get_cluster_config()) {
      if (get_cluster_config_ != NULL) get_cluster_config_->::pdpb::GetClusterConfigResponse::Clear();
    }
    if (has_put_cluster_config()) {
      if (put_cluster_config_ != NULL) put_cluster_config_->::pdpb::PutClusterConfigResponse::Clear();
    }
    if (has_store_heartbeat()) {
      if (store_heartbeat_ != NULL) store_heartbeat_->::pdpb::StoreHeartbeatResponse::Clear();
    }
    if (has_report_split()) {
      if (report_split_ != NULL) report_split_->::pdpb::ReportSplitResponse::Clear();
    }
    if (has_get_region_by_id()) {
      if (get_region_by_id_ != NULL) get_region_by_id_->::pdpb::GetRegionResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_get_pd_members()) {
      if (get_pd_members_ != NULL) get_pd_members_->::pdpb::GetPDMembersResponse::Clear();
    }
    if (has_alloc_volume_id()) {
      if (alloc_volume_id_ != NULL) alloc_volume_id_->::pdpb::AllocVolumeIdResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // optional .pdpb.CommandType cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pdpb::CommandType_IsValid(value)) {
            set_cmd_type(static_cast< ::pdpb::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tso;
        break;
      }

      // optional .pdpb.TsoResponse tso = 3;
      case 3: {
        if (tag == 26) {
         parse_tso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tso()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bootstrap;
        break;
      }

      // optional .pdpb.BootstrapResponse bootstrap = 4;
      case 4: {
        if (tag == 34) {
         parse_bootstrap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bootstrap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_is_bootstrapped;
        break;
      }

      // optional .pdpb.IsBootstrappedResponse is_bootstrapped = 5;
      case 5: {
        if (tag == 42) {
         parse_is_bootstrapped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_bootstrapped()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_alloc_id;
        break;
      }

      // optional .pdpb.AllocIdResponse alloc_id = 6;
      case 6: {
        if (tag == 50) {
         parse_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alloc_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_get_store;
        break;
      }

      // optional .pdpb.GetStoreResponse get_store = 7;
      case 7: {
        if (tag == 58) {
         parse_get_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_put_store;
        break;
      }

      // optional .pdpb.PutStoreResponse put_store = 8;
      case 8: {
        if (tag == 66) {
         parse_put_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ask_split;
        break;
      }

      // optional .pdpb.AskSplitResponse ask_split = 9;
      case 9: {
        if (tag == 74) {
         parse_ask_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_get_region;
        break;
      }

      // optional .pdpb.GetRegionResponse get_region = 10;
      case 10: {
        if (tag == 82) {
         parse_get_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_region_heartbeat;
        break;
      }

      // optional .pdpb.RegionHeartbeatResponse region_heartbeat = 11;
      case 11: {
        if (tag == 90) {
         parse_region_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_get_cluster_config;
        break;
      }

      // optional .pdpb.GetClusterConfigResponse get_cluster_config = 12;
      case 12: {
        if (tag == 98) {
         parse_get_cluster_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_cluster_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_put_cluster_config;
        break;
      }

      // optional .pdpb.PutClusterConfigResponse put_cluster_config = 13;
      case 13: {
        if (tag == 106) {
         parse_put_cluster_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_cluster_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_store_heartbeat;
        break;
      }

      // optional .pdpb.StoreHeartbeatResponse store_heartbeat = 14;
      case 14: {
        if (tag == 114) {
         parse_store_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_report_split;
        break;
      }

      // optional .pdpb.ReportSplitResponse report_split = 15;
      case 15: {
        if (tag == 122) {
         parse_report_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_get_region_by_id;
        break;
      }

      // optional .pdpb.GetRegionResponse get_region_by_id = 16;
      case 16: {
        if (tag == 130) {
         parse_get_region_by_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_region_by_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_get_pd_members;
        break;
      }

      // optional .pdpb.GetPDMembersResponse get_pd_members = 17;
      case 17: {
        if (tag == 138) {
         parse_get_pd_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_pd_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_alloc_volume_id;
        break;
      }

      // optional .pdpb.AllocVolumeIdResponse alloc_volume_id = 18;
      case 18: {
        if (tag == 146) {
         parse_alloc_volume_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alloc_volume_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Response)
  // optional .pdpb.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .pdpb.CommandType cmd_type = 2;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd_type(), output);
  }

  // optional .pdpb.TsoResponse tso = 3;
  if (has_tso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tso(), output);
  }

  // optional .pdpb.BootstrapResponse bootstrap = 4;
  if (has_bootstrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bootstrap(), output);
  }

  // optional .pdpb.IsBootstrappedResponse is_bootstrapped = 5;
  if (has_is_bootstrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->is_bootstrapped(), output);
  }

  // optional .pdpb.AllocIdResponse alloc_id = 6;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->alloc_id(), output);
  }

  // optional .pdpb.GetStoreResponse get_store = 7;
  if (has_get_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->get_store(), output);
  }

  // optional .pdpb.PutStoreResponse put_store = 8;
  if (has_put_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->put_store(), output);
  }

  // optional .pdpb.AskSplitResponse ask_split = 9;
  if (has_ask_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ask_split(), output);
  }

  // optional .pdpb.GetRegionResponse get_region = 10;
  if (has_get_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->get_region(), output);
  }

  // optional .pdpb.RegionHeartbeatResponse region_heartbeat = 11;
  if (has_region_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->region_heartbeat(), output);
  }

  // optional .pdpb.GetClusterConfigResponse get_cluster_config = 12;
  if (has_get_cluster_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->get_cluster_config(), output);
  }

  // optional .pdpb.PutClusterConfigResponse put_cluster_config = 13;
  if (has_put_cluster_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->put_cluster_config(), output);
  }

  // optional .pdpb.StoreHeartbeatResponse store_heartbeat = 14;
  if (has_store_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->store_heartbeat(), output);
  }

  // optional .pdpb.ReportSplitResponse report_split = 15;
  if (has_report_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->report_split(), output);
  }

  // optional .pdpb.GetRegionResponse get_region_by_id = 16;
  if (has_get_region_by_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->get_region_by_id(), output);
  }

  // optional .pdpb.GetPDMembersResponse get_pd_members = 17;
  if (has_get_pd_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->get_pd_members(), output);
  }

  // optional .pdpb.AllocVolumeIdResponse alloc_volume_id = 18;
  if (has_alloc_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->alloc_volume_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Response)
  // optional .pdpb.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .pdpb.CommandType cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd_type(), target);
  }

  // optional .pdpb.TsoResponse tso = 3;
  if (has_tso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tso(), target);
  }

  // optional .pdpb.BootstrapResponse bootstrap = 4;
  if (has_bootstrap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bootstrap(), target);
  }

  // optional .pdpb.IsBootstrappedResponse is_bootstrapped = 5;
  if (has_is_bootstrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->is_bootstrapped(), target);
  }

  // optional .pdpb.AllocIdResponse alloc_id = 6;
  if (has_alloc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->alloc_id(), target);
  }

  // optional .pdpb.GetStoreResponse get_store = 7;
  if (has_get_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->get_store(), target);
  }

  // optional .pdpb.PutStoreResponse put_store = 8;
  if (has_put_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->put_store(), target);
  }

  // optional .pdpb.AskSplitResponse ask_split = 9;
  if (has_ask_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ask_split(), target);
  }

  // optional .pdpb.GetRegionResponse get_region = 10;
  if (has_get_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->get_region(), target);
  }

  // optional .pdpb.RegionHeartbeatResponse region_heartbeat = 11;
  if (has_region_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->region_heartbeat(), target);
  }

  // optional .pdpb.GetClusterConfigResponse get_cluster_config = 12;
  if (has_get_cluster_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->get_cluster_config(), target);
  }

  // optional .pdpb.PutClusterConfigResponse put_cluster_config = 13;
  if (has_put_cluster_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->put_cluster_config(), target);
  }

  // optional .pdpb.StoreHeartbeatResponse store_heartbeat = 14;
  if (has_store_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->store_heartbeat(), target);
  }

  // optional .pdpb.ReportSplitResponse report_split = 15;
  if (has_report_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->report_split(), target);
  }

  // optional .pdpb.GetRegionResponse get_region_by_id = 16;
  if (has_get_region_by_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->get_region_by_id(), target);
  }

  // optional .pdpb.GetPDMembersResponse get_pd_members = 17;
  if (has_get_pd_members()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->get_pd_members(), target);
  }

  // optional .pdpb.AllocVolumeIdResponse alloc_volume_id = 18;
  if (has_alloc_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->alloc_volume_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pdpb.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .pdpb.CommandType cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .pdpb.TsoResponse tso = 3;
    if (has_tso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tso());
    }

    // optional .pdpb.BootstrapResponse bootstrap = 4;
    if (has_bootstrap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bootstrap());
    }

    // optional .pdpb.IsBootstrappedResponse is_bootstrapped = 5;
    if (has_is_bootstrapped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->is_bootstrapped());
    }

    // optional .pdpb.AllocIdResponse alloc_id = 6;
    if (has_alloc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alloc_id());
    }

    // optional .pdpb.GetStoreResponse get_store = 7;
    if (has_get_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_store());
    }

    // optional .pdpb.PutStoreResponse put_store = 8;
    if (has_put_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_store());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pdpb.AskSplitResponse ask_split = 9;
    if (has_ask_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_split());
    }

    // optional .pdpb.GetRegionResponse get_region = 10;
    if (has_get_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_region());
    }

    // optional .pdpb.RegionHeartbeatResponse region_heartbeat = 11;
    if (has_region_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_heartbeat());
    }

    // optional .pdpb.GetClusterConfigResponse get_cluster_config = 12;
    if (has_get_cluster_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_cluster_config());
    }

    // optional .pdpb.PutClusterConfigResponse put_cluster_config = 13;
    if (has_put_cluster_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_cluster_config());
    }

    // optional .pdpb.StoreHeartbeatResponse store_heartbeat = 14;
    if (has_store_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_heartbeat());
    }

    // optional .pdpb.ReportSplitResponse report_split = 15;
    if (has_report_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report_split());
    }

    // optional .pdpb.GetRegionResponse get_region_by_id = 16;
    if (has_get_region_by_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_region_by_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pdpb.GetPDMembersResponse get_pd_members = 17;
    if (has_get_pd_members()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_pd_members());
    }

    // optional .pdpb.AllocVolumeIdResponse alloc_volume_id = 18;
    if (has_alloc_volume_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alloc_volume_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_tso()) {
      mutable_tso()->::pdpb::TsoResponse::MergeFrom(from.tso());
    }
    if (from.has_bootstrap()) {
      mutable_bootstrap()->::pdpb::BootstrapResponse::MergeFrom(from.bootstrap());
    }
    if (from.has_is_bootstrapped()) {
      mutable_is_bootstrapped()->::pdpb::IsBootstrappedResponse::MergeFrom(from.is_bootstrapped());
    }
    if (from.has_alloc_id()) {
      mutable_alloc_id()->::pdpb::AllocIdResponse::MergeFrom(from.alloc_id());
    }
    if (from.has_get_store()) {
      mutable_get_store()->::pdpb::GetStoreResponse::MergeFrom(from.get_store());
    }
    if (from.has_put_store()) {
      mutable_put_store()->::pdpb::PutStoreResponse::MergeFrom(from.put_store());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ask_split()) {
      mutable_ask_split()->::pdpb::AskSplitResponse::MergeFrom(from.ask_split());
    }
    if (from.has_get_region()) {
      mutable_get_region()->::pdpb::GetRegionResponse::MergeFrom(from.get_region());
    }
    if (from.has_region_heartbeat()) {
      mutable_region_heartbeat()->::pdpb::RegionHeartbeatResponse::MergeFrom(from.region_heartbeat());
    }
    if (from.has_get_cluster_config()) {
      mutable_get_cluster_config()->::pdpb::GetClusterConfigResponse::MergeFrom(from.get_cluster_config());
    }
    if (from.has_put_cluster_config()) {
      mutable_put_cluster_config()->::pdpb::PutClusterConfigResponse::MergeFrom(from.put_cluster_config());
    }
    if (from.has_store_heartbeat()) {
      mutable_store_heartbeat()->::pdpb::StoreHeartbeatResponse::MergeFrom(from.store_heartbeat());
    }
    if (from.has_report_split()) {
      mutable_report_split()->::pdpb::ReportSplitResponse::MergeFrom(from.report_split());
    }
    if (from.has_get_region_by_id()) {
      mutable_get_region_by_id()->::pdpb::GetRegionResponse::MergeFrom(from.get_region_by_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_get_pd_members()) {
      mutable_get_pd_members()->::pdpb::GetPDMembersResponse::MergeFrom(from.get_pd_members());
    }
    if (from.has_alloc_volume_id()) {
      mutable_alloc_volume_id()->::pdpb::AllocVolumeIdResponse::MergeFrom(from.alloc_volume_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(tso_, other->tso_);
    std::swap(bootstrap_, other->bootstrap_);
    std::swap(is_bootstrapped_, other->is_bootstrapped_);
    std::swap(alloc_id_, other->alloc_id_);
    std::swap(get_store_, other->get_store_);
    std::swap(put_store_, other->put_store_);
    std::swap(ask_split_, other->ask_split_);
    std::swap(get_region_, other->get_region_);
    std::swap(region_heartbeat_, other->region_heartbeat_);
    std::swap(get_cluster_config_, other->get_cluster_config_);
    std::swap(put_cluster_config_, other->put_cluster_config_);
    std::swap(store_heartbeat_, other->store_heartbeat_);
    std::swap(report_split_, other->report_split_);
    std::swap(get_region_by_id_, other->get_region_by_id_);
    std::swap(get_pd_members_, other->get_pd_members_);
    std::swap(alloc_volume_id_, other->alloc_volume_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BootstrappedError::BootstrappedError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrappedError)
}

void BootstrappedError::InitAsDefaultInstance() {
}

BootstrappedError::BootstrappedError(const BootstrappedError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrappedError)
}

void BootstrappedError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BootstrappedError::~BootstrappedError() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrappedError)
  SharedDtor();
}

void BootstrappedError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BootstrappedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrappedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrappedError_descriptor_;
}

const BootstrappedError& BootstrappedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

BootstrappedError* BootstrappedError::default_instance_ = NULL;

BootstrappedError* BootstrappedError::New() const {
  return new BootstrappedError;
}

void BootstrappedError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BootstrappedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrappedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrappedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrappedError)
  return false;
#undef DO_
}

void BootstrappedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrappedError)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.BootstrappedError)
}

::google::protobuf::uint8* BootstrappedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrappedError)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrappedError)
  return target;
}

int BootstrappedError::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrappedError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BootstrappedError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BootstrappedError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BootstrappedError::MergeFrom(const BootstrappedError& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BootstrappedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrappedError::CopyFrom(const BootstrappedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrappedError::IsInitialized() const {

  return true;
}

void BootstrappedError::Swap(BootstrappedError* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BootstrappedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootstrappedError_descriptor_;
  metadata.reflection = BootstrappedError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StoreIsTombstoneError::StoreIsTombstoneError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreIsTombstoneError)
}

void StoreIsTombstoneError::InitAsDefaultInstance() {
}

StoreIsTombstoneError::StoreIsTombstoneError(const StoreIsTombstoneError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreIsTombstoneError)
}

void StoreIsTombstoneError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIsTombstoneError::~StoreIsTombstoneError() {
  // @@protoc_insertion_point(destructor:pdpb.StoreIsTombstoneError)
  SharedDtor();
}

void StoreIsTombstoneError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreIsTombstoneError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreIsTombstoneError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIsTombstoneError_descriptor_;
}

const StoreIsTombstoneError& StoreIsTombstoneError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

StoreIsTombstoneError* StoreIsTombstoneError::default_instance_ = NULL;

StoreIsTombstoneError* StoreIsTombstoneError::New() const {
  return new StoreIsTombstoneError;
}

void StoreIsTombstoneError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreIsTombstoneError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreIsTombstoneError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreIsTombstoneError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreIsTombstoneError)
  return false;
#undef DO_
}

void StoreIsTombstoneError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreIsTombstoneError)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreIsTombstoneError)
}

::google::protobuf::uint8* StoreIsTombstoneError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreIsTombstoneError)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreIsTombstoneError)
  return target;
}

int StoreIsTombstoneError::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIsTombstoneError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreIsTombstoneError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreIsTombstoneError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreIsTombstoneError::MergeFrom(const StoreIsTombstoneError& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreIsTombstoneError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIsTombstoneError::CopyFrom(const StoreIsTombstoneError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIsTombstoneError::IsInitialized() const {

  return true;
}

void StoreIsTombstoneError::Swap(StoreIsTombstoneError* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreIsTombstoneError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreIsTombstoneError_descriptor_;
  metadata.reflection = StoreIsTombstoneError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kMessageFieldNumber;
const int Error::kBootstrappedFieldNumber;
const int Error::kIsTombstoneFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Error)
}

void Error::InitAsDefaultInstance() {
  bootstrapped_ = const_cast< ::pdpb::BootstrappedError*>(&::pdpb::BootstrappedError::default_instance());
  is_tombstone_ = const_cast< ::pdpb::StoreIsTombstoneError*>(&::pdpb::StoreIsTombstoneError::default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bootstrapped_ = NULL;
  is_tombstone_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:pdpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete bootstrapped_;
    delete is_tombstone_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdpb_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_bootstrapped()) {
      if (bootstrapped_ != NULL) bootstrapped_->::pdpb::BootstrappedError::Clear();
    }
    if (has_is_tombstone()) {
      if (is_tombstone_ != NULL) is_tombstone_->::pdpb::StoreIsTombstoneError::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bootstrapped;
        break;
      }

      // optional .pdpb.BootstrappedError bootstrapped = 2;
      case 2: {
        if (tag == 18) {
         parse_bootstrapped:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bootstrapped()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_is_tombstone;
        break;
      }

      // optional .pdpb.StoreIsTombstoneError is_tombstone = 3;
      case 3: {
        if (tag == 26) {
         parse_is_tombstone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_tombstone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .pdpb.BootstrappedError bootstrapped = 2;
  if (has_bootstrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bootstrapped(), output);
  }

  // optional .pdpb.StoreIsTombstoneError is_tombstone = 3;
  if (has_is_tombstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->is_tombstone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional .pdpb.BootstrappedError bootstrapped = 2;
  if (has_bootstrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bootstrapped(), target);
  }

  // optional .pdpb.StoreIsTombstoneError is_tombstone = 3;
  if (has_is_tombstone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->is_tombstone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .pdpb.BootstrappedError bootstrapped = 2;
    if (has_bootstrapped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bootstrapped());
    }

    // optional .pdpb.StoreIsTombstoneError is_tombstone = 3;
    if (has_is_tombstone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->is_tombstone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_bootstrapped()) {
      mutable_bootstrapped()->::pdpb::BootstrappedError::MergeFrom(from.bootstrapped());
    }
    if (from.has_is_tombstone()) {
      mutable_is_tombstone()->::pdpb::StoreIsTombstoneError::MergeFrom(from.is_tombstone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(bootstrapped_, other->bootstrapped_);
    std::swap(is_tombstone_, other->is_tombstone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pdpb

// @@protoc_insertion_point(global_scope)
