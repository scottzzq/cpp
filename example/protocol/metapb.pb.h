// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metapb.proto

#ifndef PROTOBUF_metapb_2eproto__INCLUDED
#define PROTOBUF_metapb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace metapb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_metapb_2eproto();
void protobuf_AssignDesc_metapb_2eproto();
void protobuf_ShutdownFile_metapb_2eproto();

class Cluster;
class StoreLabel;
class Store;
class RegionEpoch;
class Region;
class Peer;
class Needle;

enum StoreState {
  Up = 0,
  Offline = 1,
  Tombstone = 2
};
bool StoreState_IsValid(int value);
const StoreState StoreState_MIN = Up;
const StoreState StoreState_MAX = Tombstone;
const int StoreState_ARRAYSIZE = StoreState_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoreState_descriptor();
inline const ::std::string& StoreState_Name(StoreState value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoreState_descriptor(), value);
}
inline bool StoreState_Parse(
    const ::std::string& name, StoreState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoreState>(
    StoreState_descriptor(), name, value);
}
// ===================================================================

class Cluster : public ::google::protobuf::Message {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  void Swap(Cluster* other);

  // implements Message ----------------------------------------------

  Cluster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 max_peer_count = 2;
  inline bool has_max_peer_count() const;
  inline void clear_max_peer_count();
  static const int kMaxPeerCountFieldNumber = 2;
  inline ::google::protobuf::uint32 max_peer_count() const;
  inline void set_max_peer_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metapb.Cluster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_max_peer_count();
  inline void clear_has_max_peer_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 max_peer_count_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static Cluster* default_instance_;
};
// -------------------------------------------------------------------

class StoreLabel : public ::google::protobuf::Message {
 public:
  StoreLabel();
  virtual ~StoreLabel();

  StoreLabel(const StoreLabel& from);

  inline StoreLabel& operator=(const StoreLabel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreLabel& default_instance();

  void Swap(StoreLabel* other);

  // implements Message ----------------------------------------------

  StoreLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreLabel& from);
  void MergeFrom(const StoreLabel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:metapb.StoreLabel)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static StoreLabel* default_instance_;
};
// -------------------------------------------------------------------

class Store : public ::google::protobuf::Message {
 public:
  Store();
  virtual ~Store();

  Store(const Store& from);

  inline Store& operator=(const Store& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Store& default_instance();

  void Swap(Store* other);

  // implements Message ----------------------------------------------

  Store* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Store& from);
  void MergeFrom(const Store& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional .metapb.StoreState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::metapb::StoreState state() const;
  inline void set_state(::metapb::StoreState value);

  // repeated .metapb.StoreLabel labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::metapb::StoreLabel& labels(int index) const;
  inline ::metapb::StoreLabel* mutable_labels(int index);
  inline ::metapb::StoreLabel* add_labels();
  inline const ::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel >&
      labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel >*
      mutable_labels();

  // @@protoc_insertion_point(class_scope:metapb.Store)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* address_;
  ::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel > labels_;
  int state_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static Store* default_instance_;
};
// -------------------------------------------------------------------

class RegionEpoch : public ::google::protobuf::Message {
 public:
  RegionEpoch();
  virtual ~RegionEpoch();

  RegionEpoch(const RegionEpoch& from);

  inline RegionEpoch& operator=(const RegionEpoch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionEpoch& default_instance();

  void Swap(RegionEpoch* other);

  // implements Message ----------------------------------------------

  RegionEpoch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionEpoch& from);
  void MergeFrom(const RegionEpoch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 conf_ver = 1;
  inline bool has_conf_ver() const;
  inline void clear_conf_ver();
  static const int kConfVerFieldNumber = 1;
  inline ::google::protobuf::uint64 conf_ver() const;
  inline void set_conf_ver(::google::protobuf::uint64 value);

  // optional uint64 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.RegionEpoch)
 private:
  inline void set_has_conf_ver();
  inline void clear_has_conf_ver();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 conf_ver_;
  ::google::protobuf::uint64 version_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static RegionEpoch* default_instance_;
};
// -------------------------------------------------------------------

class Region : public ::google::protobuf::Message {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Region& default_instance();

  void Swap(Region* other);

  // implements Message ----------------------------------------------

  Region* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes start_key = 2;
  inline bool has_start_key() const;
  inline void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  inline const ::std::string& start_key() const;
  inline void set_start_key(const ::std::string& value);
  inline void set_start_key(const char* value);
  inline void set_start_key(const void* value, size_t size);
  inline ::std::string* mutable_start_key();
  inline ::std::string* release_start_key();
  inline void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 3;
  inline bool has_end_key() const;
  inline void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  inline const ::std::string& end_key() const;
  inline void set_end_key(const ::std::string& value);
  inline void set_end_key(const char* value);
  inline void set_end_key(const void* value, size_t size);
  inline ::std::string* mutable_end_key();
  inline ::std::string* release_end_key();
  inline void set_allocated_end_key(::std::string* end_key);

  // optional .metapb.RegionEpoch region_epoch = 4;
  inline bool has_region_epoch() const;
  inline void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 4;
  inline const ::metapb::RegionEpoch& region_epoch() const;
  inline ::metapb::RegionEpoch* mutable_region_epoch();
  inline ::metapb::RegionEpoch* release_region_epoch();
  inline void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // repeated .metapb.Peer peers = 5;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 5;
  inline const ::metapb::Peer& peers(int index) const;
  inline ::metapb::Peer* mutable_peers(int index);
  inline ::metapb::Peer* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
      mutable_peers();

  // optional uint64 term = 6;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 6;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.Region)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_start_key();
  inline void clear_has_start_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();
  inline void set_has_region_epoch();
  inline void clear_has_region_epoch();
  inline void set_has_term();
  inline void clear_has_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* start_key_;
  ::std::string* end_key_;
  ::metapb::RegionEpoch* region_epoch_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Peer > peers_;
  ::google::protobuf::uint64 term_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static Region* default_instance_;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  void Swap(Peer* other);

  // implements Message ----------------------------------------------

  Peer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 store_id = 2;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  inline ::google::protobuf::uint64 store_id() const;
  inline void set_store_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.Peer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 store_id_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static Peer* default_instance_;
};
// -------------------------------------------------------------------

class Needle : public ::google::protobuf::Message {
 public:
  Needle();
  virtual ~Needle();

  Needle(const Needle& from);

  inline Needle& operator=(const Needle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Needle& default_instance();

  void Swap(Needle* other);

  // implements Message ----------------------------------------------

  Needle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Needle& from);
  void MergeFrom(const Needle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 magic_num = 1;
  inline bool has_magic_num() const;
  inline void clear_magic_num();
  static const int kMagicNumFieldNumber = 1;
  inline ::google::protobuf::uint64 magic_num() const;
  inline void set_magic_num(::google::protobuf::uint64 value);

  // optional uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional uint64 key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // optional bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:metapb.Needle)
 private:
  inline void set_has_magic_num();
  inline void clear_has_magic_num();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 magic_num_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_metapb_2eproto();
  friend void protobuf_AssignDesc_metapb_2eproto();
  friend void protobuf_ShutdownFile_metapb_2eproto();

  void InitAsDefaultInstance();
  static Needle* default_instance_;
};
// ===================================================================


// ===================================================================

// Cluster

// optional uint64 id = 1;
inline bool Cluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cluster::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Cluster::id() const {
  // @@protoc_insertion_point(field_get:metapb.Cluster.id)
  return id_;
}
inline void Cluster::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Cluster.id)
}

// optional uint32 max_peer_count = 2;
inline bool Cluster::has_max_peer_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cluster::set_has_max_peer_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Cluster::clear_has_max_peer_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Cluster::clear_max_peer_count() {
  max_peer_count_ = 0u;
  clear_has_max_peer_count();
}
inline ::google::protobuf::uint32 Cluster::max_peer_count() const {
  // @@protoc_insertion_point(field_get:metapb.Cluster.max_peer_count)
  return max_peer_count_;
}
inline void Cluster::set_max_peer_count(::google::protobuf::uint32 value) {
  set_has_max_peer_count();
  max_peer_count_ = value;
  // @@protoc_insertion_point(field_set:metapb.Cluster.max_peer_count)
}

// -------------------------------------------------------------------

// StoreLabel

// optional string key = 1;
inline bool StoreLabel::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreLabel::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreLabel::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreLabel::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StoreLabel::key() const {
  // @@protoc_insertion_point(field_get:metapb.StoreLabel.key)
  return *key_;
}
inline void StoreLabel::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:metapb.StoreLabel.key)
}
inline void StoreLabel::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:metapb.StoreLabel.key)
}
inline void StoreLabel::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metapb.StoreLabel.key)
}
inline ::std::string* StoreLabel::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:metapb.StoreLabel.key)
  return key_;
}
inline ::std::string* StoreLabel::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreLabel::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.StoreLabel.key)
}

// optional string value = 2;
inline bool StoreLabel::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreLabel::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreLabel::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreLabel::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& StoreLabel::value() const {
  // @@protoc_insertion_point(field_get:metapb.StoreLabel.value)
  return *value_;
}
inline void StoreLabel::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:metapb.StoreLabel.value)
}
inline void StoreLabel::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:metapb.StoreLabel.value)
}
inline void StoreLabel::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metapb.StoreLabel.value)
}
inline ::std::string* StoreLabel::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:metapb.StoreLabel.value)
  return value_;
}
inline ::std::string* StoreLabel::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreLabel::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.StoreLabel.value)
}

// -------------------------------------------------------------------

// Store

// optional uint64 id = 1;
inline bool Store::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Store::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Store::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Store::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Store::id() const {
  // @@protoc_insertion_point(field_get:metapb.Store.id)
  return id_;
}
inline void Store::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Store.id)
}

// optional string address = 2;
inline bool Store::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Store::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Store::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Store::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Store::address() const {
  // @@protoc_insertion_point(field_get:metapb.Store.address)
  return *address_;
}
inline void Store::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:metapb.Store.address)
}
inline void Store::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:metapb.Store.address)
}
inline void Store::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metapb.Store.address)
}
inline ::std::string* Store::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Store.address)
  return address_;
}
inline ::std::string* Store::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Store::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Store.address)
}

// optional .metapb.StoreState state = 3;
inline bool Store::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Store::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Store::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Store::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::metapb::StoreState Store::state() const {
  // @@protoc_insertion_point(field_get:metapb.Store.state)
  return static_cast< ::metapb::StoreState >(state_);
}
inline void Store::set_state(::metapb::StoreState value) {
  assert(::metapb::StoreState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:metapb.Store.state)
}

// repeated .metapb.StoreLabel labels = 4;
inline int Store::labels_size() const {
  return labels_.size();
}
inline void Store::clear_labels() {
  labels_.Clear();
}
inline const ::metapb::StoreLabel& Store::labels(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Store.labels)
  return labels_.Get(index);
}
inline ::metapb::StoreLabel* Store::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Store.labels)
  return labels_.Mutable(index);
}
inline ::metapb::StoreLabel* Store::add_labels() {
  // @@protoc_insertion_point(field_add:metapb.Store.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel >&
Store::labels() const {
  // @@protoc_insertion_point(field_list:metapb.Store.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::StoreLabel >*
Store::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Store.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// RegionEpoch

// optional uint64 conf_ver = 1;
inline bool RegionEpoch::has_conf_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionEpoch::set_has_conf_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionEpoch::clear_has_conf_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
  clear_has_conf_ver();
}
inline ::google::protobuf::uint64 RegionEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:metapb.RegionEpoch.conf_ver)
  return conf_ver_;
}
inline void RegionEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  set_has_conf_ver();
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:metapb.RegionEpoch.conf_ver)
}

// optional uint64 version = 2;
inline bool RegionEpoch::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionEpoch::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionEpoch::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 RegionEpoch::version() const {
  // @@protoc_insertion_point(field_get:metapb.RegionEpoch.version)
  return version_;
}
inline void RegionEpoch::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:metapb.RegionEpoch.version)
}

// -------------------------------------------------------------------

// Region

// optional uint64 id = 1;
inline bool Region::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Region::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Region::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Region::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Region::id() const {
  // @@protoc_insertion_point(field_get:metapb.Region.id)
  return id_;
}
inline void Region::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Region.id)
}

// optional bytes start_key = 2;
inline bool Region::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Region::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Region::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Region::clear_start_key() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_->clear();
  }
  clear_has_start_key();
}
inline const ::std::string& Region::start_key() const {
  // @@protoc_insertion_point(field_get:metapb.Region.start_key)
  return *start_key_;
}
inline void Region::set_start_key(const ::std::string& value) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(value);
  // @@protoc_insertion_point(field_set:metapb.Region.start_key)
}
inline void Region::set_start_key(const char* value) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:metapb.Region.start_key)
}
inline void Region::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metapb.Region.start_key)
}
inline ::std::string* Region::mutable_start_key() {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Region.start_key)
  return start_key_;
}
inline ::std::string* Region::release_start_key() {
  clear_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_key_;
    start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Region::set_allocated_start_key(::std::string* start_key) {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (start_key) {
    set_has_start_key();
    start_key_ = start_key;
  } else {
    clear_has_start_key();
    start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Region.start_key)
}

// optional bytes end_key = 3;
inline bool Region::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Region::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Region::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Region::clear_end_key() {
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_->clear();
  }
  clear_has_end_key();
}
inline const ::std::string& Region::end_key() const {
  // @@protoc_insertion_point(field_get:metapb.Region.end_key)
  return *end_key_;
}
inline void Region::set_end_key(const ::std::string& value) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(value);
  // @@protoc_insertion_point(field_set:metapb.Region.end_key)
}
inline void Region::set_end_key(const char* value) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:metapb.Region.end_key)
}
inline void Region::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metapb.Region.end_key)
}
inline ::std::string* Region::mutable_end_key() {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Region.end_key)
  return end_key_;
}
inline ::std::string* Region::release_end_key() {
  clear_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_key_;
    end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Region::set_allocated_end_key(::std::string* end_key) {
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (end_key) {
    set_has_end_key();
    end_key_ = end_key;
  } else {
    clear_has_end_key();
    end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Region.end_key)
}

// optional .metapb.RegionEpoch region_epoch = 4;
inline bool Region::has_region_epoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Region::set_has_region_epoch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Region::clear_has_region_epoch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Region::clear_region_epoch() {
  if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
  clear_has_region_epoch();
}
inline const ::metapb::RegionEpoch& Region::region_epoch() const {
  // @@protoc_insertion_point(field_get:metapb.Region.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_ : *default_instance_->region_epoch_;
}
inline ::metapb::RegionEpoch* Region::mutable_region_epoch() {
  set_has_region_epoch();
  if (region_epoch_ == NULL) region_epoch_ = new ::metapb::RegionEpoch;
  // @@protoc_insertion_point(field_mutable:metapb.Region.region_epoch)
  return region_epoch_;
}
inline ::metapb::RegionEpoch* Region::release_region_epoch() {
  clear_has_region_epoch();
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
inline void Region::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    set_has_region_epoch();
  } else {
    clear_has_region_epoch();
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Region.region_epoch)
}

// repeated .metapb.Peer peers = 5;
inline int Region::peers_size() const {
  return peers_.size();
}
inline void Region::clear_peers() {
  peers_.Clear();
}
inline const ::metapb::Peer& Region::peers(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Region.peers)
  return peers_.Get(index);
}
inline ::metapb::Peer* Region::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Region.peers)
  return peers_.Mutable(index);
}
inline ::metapb::Peer* Region::add_peers() {
  // @@protoc_insertion_point(field_add:metapb.Region.peers)
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
Region::peers() const {
  // @@protoc_insertion_point(field_list:metapb.Region.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
Region::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Region.peers)
  return &peers_;
}

// optional uint64 term = 6;
inline bool Region::has_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Region::set_has_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Region::clear_has_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Region::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 Region::term() const {
  // @@protoc_insertion_point(field_get:metapb.Region.term)
  return term_;
}
inline void Region::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:metapb.Region.term)
}

// -------------------------------------------------------------------

// Peer

// optional uint64 id = 1;
inline bool Peer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Peer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Peer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Peer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Peer::id() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.id)
  return id_;
}
inline void Peer::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.id)
}

// optional uint64 store_id = 2;
inline bool Peer::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Peer::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Peer::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Peer::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
  clear_has_store_id();
}
inline ::google::protobuf::uint64 Peer::store_id() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.store_id)
  return store_id_;
}
inline void Peer::set_store_id(::google::protobuf::uint64 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.store_id)
}

// -------------------------------------------------------------------

// Needle

// optional uint64 magic_num = 1;
inline bool Needle::has_magic_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Needle::set_has_magic_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Needle::clear_has_magic_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Needle::clear_magic_num() {
  magic_num_ = GOOGLE_ULONGLONG(0);
  clear_has_magic_num();
}
inline ::google::protobuf::uint64 Needle::magic_num() const {
  // @@protoc_insertion_point(field_get:metapb.Needle.magic_num)
  return magic_num_;
}
inline void Needle::set_magic_num(::google::protobuf::uint64 value) {
  set_has_magic_num();
  magic_num_ = value;
  // @@protoc_insertion_point(field_set:metapb.Needle.magic_num)
}

// optional uint64 size = 2;
inline bool Needle::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Needle::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Needle::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Needle::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Needle::size() const {
  // @@protoc_insertion_point(field_get:metapb.Needle.size)
  return size_;
}
inline void Needle::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:metapb.Needle.size)
}

// optional uint64 key = 3;
inline bool Needle::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Needle::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Needle::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Needle::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 Needle::key() const {
  // @@protoc_insertion_point(field_get:metapb.Needle.key)
  return key_;
}
inline void Needle::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:metapb.Needle.key)
}

// optional bytes value = 4;
inline bool Needle::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Needle::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Needle::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Needle::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Needle::value() const {
  // @@protoc_insertion_point(field_get:metapb.Needle.value)
  return *value_;
}
inline void Needle::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:metapb.Needle.value)
}
inline void Needle::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:metapb.Needle.value)
}
inline void Needle::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metapb.Needle.value)
}
inline ::std::string* Needle::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Needle.value)
  return value_;
}
inline ::std::string* Needle::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Needle::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Needle.value)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace metapb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metapb::StoreState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metapb::StoreState>() {
  return ::metapb::StoreState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metapb_2eproto__INCLUDED
