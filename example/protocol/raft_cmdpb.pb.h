// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#ifndef PROTOBUF_raft_5fcmdpb_2eproto__INCLUDED
#define PROTOBUF_raft_5fcmdpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "errorpb.pb.h"
#include "eraftpb.pb.h"
// @@protoc_insertion_point(includes)

namespace raft_cmdpb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

class GetRequest;
class GetResponse;
class PutRequest;
class PutResponse;
class DeleteRequest;
class DeleteResponse;
class SnapRequest;
class SnapResponse;
class Request;
class Response;
class ChangePeerRequest;
class ChangePeerResponse;
class SplitRequest;
class SplitResponse;
class CompactLogRequest;
class CompactLogResponse;
class TransferLeaderRequest;
class TransferLeaderResponse;
class VerifyHashRequest;
class VerifyHashResponse;
class AdminRequest;
class AdminResponse;
class RegionLeaderRequest;
class RegionLeaderResponse;
class RegionDetailRequest;
class RegionDetailResponse;
class StatusRequest;
class StatusResponse;
class RaftRequestHeader;
class RaftResponseHeader;
class RaftCmdRequest;
class RaftCmdResponse;

enum CmdType {
  Invalid = 0,
  Get = 1,
  Put = 3,
  Delete = 4,
  Snap = 5
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = Invalid;
const CmdType CmdType_MAX = Snap;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum AdminCmdType {
  InvalidAdmin = 0,
  ChangePeer = 1,
  Split = 2,
  CompactLog = 3,
  TransferLeader = 4,
  ComputeHash = 5,
  VerifyHash = 6
};
bool AdminCmdType_IsValid(int value);
const AdminCmdType AdminCmdType_MIN = InvalidAdmin;
const AdminCmdType AdminCmdType_MAX = VerifyHash;
const int AdminCmdType_ARRAYSIZE = AdminCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor();
inline const ::std::string& AdminCmdType_Name(AdminCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdminCmdType_descriptor(), value);
}
inline bool AdminCmdType_Parse(
    const ::std::string& name, AdminCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdminCmdType>(
    AdminCmdType_descriptor(), name, value);
}
enum StatusCmdType {
  InvalidStatus = 0,
  RegionLeader = 1,
  RegionDetail = 2
};
bool StatusCmdType_IsValid(int value);
const StatusCmdType StatusCmdType_MIN = InvalidStatus;
const StatusCmdType StatusCmdType_MAX = RegionDetail;
const int StatusCmdType_ARRAYSIZE = StatusCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor();
inline const ::std::string& StatusCmdType_Name(StatusCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCmdType_descriptor(), value);
}
inline bool StatusCmdType_Parse(
    const ::std::string& name, StatusCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCmdType>(
    StatusCmdType_descriptor(), name, value);
}
// ===================================================================

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  GetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  inline bool has_cf() const;
  inline void clear_cf();
  static const int kCfFieldNumber = 1;
  inline const ::std::string& cf() const;
  inline void set_cf(const ::std::string& value);
  inline void set_cf(const char* value);
  inline void set_cf(const char* value, size_t size);
  inline ::std::string* mutable_cf();
  inline ::std::string* release_cf();
  inline void set_allocated_cf(::std::string* cf);

  // optional uint64 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.GetRequest)
 private:
  inline void set_has_cf();
  inline void clear_has_cf();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cf_;
  ::google::protobuf::uint64 key_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  GetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional uint64 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint64 flag() const;
  inline void set_flag(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.GetResponse)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::google::protobuf::uint64 flag_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  void Swap(PutRequest* other);

  // implements Message ----------------------------------------------

  PutRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  inline bool has_cf() const;
  inline void clear_cf();
  static const int kCfFieldNumber = 1;
  inline const ::std::string& cf() const;
  inline void set_cf(const ::std::string& value);
  inline void set_cf(const char* value);
  inline void set_cf(const char* value, size_t size);
  inline ::std::string* mutable_cf();
  inline ::std::string* release_cf();
  inline void set_allocated_cf(::std::string* cf);

  // optional uint64 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // optional bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional uint64 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);

  // optional uint64 size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PutRequest)
 private:
  inline void set_has_cf();
  inline void clear_has_cf();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cf_;
  ::google::protobuf::uint64 key_;
  ::std::string* value_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  void Swap(PutResponse* other);

  // implements Message ----------------------------------------------

  PutResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PutResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  void Swap(DeleteRequest* other);

  // implements Message ----------------------------------------------

  DeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  inline bool has_cf() const;
  inline void clear_cf();
  static const int kCfFieldNumber = 1;
  inline const ::std::string& cf() const;
  inline void set_cf(const ::std::string& value);
  inline void set_cf(const char* value);
  inline void set_cf(const char* value, size_t size);
  inline ::std::string* mutable_cf();
  inline ::std::string* release_cf();
  inline void set_allocated_cf(::std::string* cf);

  // optional uint64 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteRequest)
 private:
  inline void set_has_cf();
  inline void clear_has_cf();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cf_;
  ::google::protobuf::uint64 key_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static DeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();

  void Swap(DeleteResponse* other);

  // implements Message ----------------------------------------------

  DeleteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static DeleteResponse* default_instance_;
};
// -------------------------------------------------------------------

class SnapRequest : public ::google::protobuf::Message {
 public:
  SnapRequest();
  virtual ~SnapRequest();

  SnapRequest(const SnapRequest& from);

  inline SnapRequest& operator=(const SnapRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapRequest& default_instance();

  void Swap(SnapRequest* other);

  // implements Message ----------------------------------------------

  SnapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapRequest& from);
  void MergeFrom(const SnapRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static SnapRequest* default_instance_;
};
// -------------------------------------------------------------------

class SnapResponse : public ::google::protobuf::Message {
 public:
  SnapResponse();
  virtual ~SnapResponse();

  SnapResponse(const SnapResponse& from);

  inline SnapResponse& operator=(const SnapResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapResponse& default_instance();

  void Swap(SnapResponse* other);

  // implements Message ----------------------------------------------

  SnapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapResponse& from);
  void MergeFrom(const SnapResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapResponse)
 private:
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* region_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static SnapResponse* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.CmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::raft_cmdpb::CmdType cmd_type() const;
  inline void set_cmd_type(::raft_cmdpb::CmdType value);

  // optional .raft_cmdpb.GetRequest get = 2;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 2;
  inline const ::raft_cmdpb::GetRequest& get() const;
  inline ::raft_cmdpb::GetRequest* mutable_get();
  inline ::raft_cmdpb::GetRequest* release_get();
  inline void set_allocated_get(::raft_cmdpb::GetRequest* get);

  // optional .raft_cmdpb.PutRequest put = 4;
  inline bool has_put() const;
  inline void clear_put();
  static const int kPutFieldNumber = 4;
  inline const ::raft_cmdpb::PutRequest& put() const;
  inline ::raft_cmdpb::PutRequest* mutable_put();
  inline ::raft_cmdpb::PutRequest* release_put();
  inline void set_allocated_put(::raft_cmdpb::PutRequest* put);

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  inline bool has_delete_() const;
  inline void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  inline const ::raft_cmdpb::DeleteRequest& delete_() const;
  inline ::raft_cmdpb::DeleteRequest* mutable_delete_();
  inline ::raft_cmdpb::DeleteRequest* release_delete_();
  inline void set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_);

  // optional .raft_cmdpb.SnapRequest snap = 6;
  inline bool has_snap() const;
  inline void clear_snap();
  static const int kSnapFieldNumber = 6;
  inline const ::raft_cmdpb::SnapRequest& snap() const;
  inline ::raft_cmdpb::SnapRequest* mutable_snap();
  inline ::raft_cmdpb::SnapRequest* release_snap();
  inline void set_allocated_snap(::raft_cmdpb::SnapRequest* snap);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Request)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_put();
  inline void clear_has_put();
  inline void set_has_delete_();
  inline void clear_has_delete_();
  inline void set_has_snap();
  inline void clear_has_snap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::GetRequest* get_;
  ::raft_cmdpb::PutRequest* put_;
  ::raft_cmdpb::DeleteRequest* delete__;
  ::raft_cmdpb::SnapRequest* snap_;
  int cmd_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.CmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::raft_cmdpb::CmdType cmd_type() const;
  inline void set_cmd_type(::raft_cmdpb::CmdType value);

  // optional .raft_cmdpb.GetResponse get = 2;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 2;
  inline const ::raft_cmdpb::GetResponse& get() const;
  inline ::raft_cmdpb::GetResponse* mutable_get();
  inline ::raft_cmdpb::GetResponse* release_get();
  inline void set_allocated_get(::raft_cmdpb::GetResponse* get);

  // optional .raft_cmdpb.PutResponse put = 4;
  inline bool has_put() const;
  inline void clear_put();
  static const int kPutFieldNumber = 4;
  inline const ::raft_cmdpb::PutResponse& put() const;
  inline ::raft_cmdpb::PutResponse* mutable_put();
  inline ::raft_cmdpb::PutResponse* release_put();
  inline void set_allocated_put(::raft_cmdpb::PutResponse* put);

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  inline bool has_delete_() const;
  inline void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  inline const ::raft_cmdpb::DeleteResponse& delete_() const;
  inline ::raft_cmdpb::DeleteResponse* mutable_delete_();
  inline ::raft_cmdpb::DeleteResponse* release_delete_();
  inline void set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_);

  // optional .raft_cmdpb.SnapResponse snap = 6;
  inline bool has_snap() const;
  inline void clear_snap();
  static const int kSnapFieldNumber = 6;
  inline const ::raft_cmdpb::SnapResponse& snap() const;
  inline ::raft_cmdpb::SnapResponse* mutable_snap();
  inline ::raft_cmdpb::SnapResponse* release_snap();
  inline void set_allocated_snap(::raft_cmdpb::SnapResponse* snap);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Response)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_put();
  inline void clear_has_put();
  inline void set_has_delete_();
  inline void clear_has_delete_();
  inline void set_has_snap();
  inline void clear_has_snap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::GetResponse* get_;
  ::raft_cmdpb::PutResponse* put_;
  ::raft_cmdpb::DeleteResponse* delete__;
  ::raft_cmdpb::SnapResponse* snap_;
  int cmd_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeerRequest : public ::google::protobuf::Message {
 public:
  ChangePeerRequest();
  virtual ~ChangePeerRequest();

  ChangePeerRequest(const ChangePeerRequest& from);

  inline ChangePeerRequest& operator=(const ChangePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeerRequest& default_instance();

  void Swap(ChangePeerRequest* other);

  // implements Message ----------------------------------------------

  ChangePeerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeerRequest& from);
  void MergeFrom(const ChangePeerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eraftpb.ConfChangeType change_type = 1;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  inline ::eraftpb::ConfChangeType change_type() const;
  inline void set_change_type(::eraftpb::ConfChangeType value);

  // optional .metapb.Peer peer = 2;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 2;
  inline const ::metapb::Peer& peer() const;
  inline ::metapb::Peer* mutable_peer();
  inline ::metapb::Peer* release_peer();
  inline void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.ChangePeerRequest)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_peer();
  inline void clear_has_peer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Peer* peer_;
  int change_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static ChangePeerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChangePeerResponse : public ::google::protobuf::Message {
 public:
  ChangePeerResponse();
  virtual ~ChangePeerResponse();

  ChangePeerResponse(const ChangePeerResponse& from);

  inline ChangePeerResponse& operator=(const ChangePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeerResponse& default_instance();

  void Swap(ChangePeerResponse* other);

  // implements Message ----------------------------------------------

  ChangePeerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePeerResponse& from);
  void MergeFrom(const ChangePeerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.ChangePeerResponse)
 private:
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* region_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static ChangePeerResponse* default_instance_;
};
// -------------------------------------------------------------------

class SplitRequest : public ::google::protobuf::Message {
 public:
  SplitRequest();
  virtual ~SplitRequest();

  SplitRequest(const SplitRequest& from);

  inline SplitRequest& operator=(const SplitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitRequest& default_instance();

  void Swap(SplitRequest* other);

  // implements Message ----------------------------------------------

  SplitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitRequest& from);
  void MergeFrom(const SplitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes split_key = 1;
  inline bool has_split_key() const;
  inline void clear_split_key();
  static const int kSplitKeyFieldNumber = 1;
  inline const ::std::string& split_key() const;
  inline void set_split_key(const ::std::string& value);
  inline void set_split_key(const char* value);
  inline void set_split_key(const void* value, size_t size);
  inline ::std::string* mutable_split_key();
  inline ::std::string* release_split_key();
  inline void set_allocated_split_key(::std::string* split_key);

  // optional uint64 new_region_id = 2;
  inline bool has_new_region_id() const;
  inline void clear_new_region_id();
  static const int kNewRegionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 new_region_id() const;
  inline void set_new_region_id(::google::protobuf::uint64 value);

  // repeated uint64 new_peer_ids = 3;
  inline int new_peer_ids_size() const;
  inline void clear_new_peer_ids();
  static const int kNewPeerIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 new_peer_ids(int index) const;
  inline void set_new_peer_ids(int index, ::google::protobuf::uint64 value);
  inline void add_new_peer_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      new_peer_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_new_peer_ids();

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitRequest)
 private:
  inline void set_has_split_key();
  inline void clear_has_split_key();
  inline void set_has_new_region_id();
  inline void clear_has_new_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* split_key_;
  ::google::protobuf::uint64 new_region_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > new_peer_ids_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static SplitRequest* default_instance_;
};
// -------------------------------------------------------------------

class SplitResponse : public ::google::protobuf::Message {
 public:
  SplitResponse();
  virtual ~SplitResponse();

  SplitResponse(const SplitResponse& from);

  inline SplitResponse& operator=(const SplitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitResponse& default_instance();

  void Swap(SplitResponse* other);

  // implements Message ----------------------------------------------

  SplitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitResponse& from);
  void MergeFrom(const SplitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline const ::metapb::Region& left() const;
  inline ::metapb::Region* mutable_left();
  inline ::metapb::Region* release_left();
  inline void set_allocated_left(::metapb::Region* left);

  // optional .metapb.Region right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline const ::metapb::Region& right() const;
  inline ::metapb::Region* mutable_right();
  inline ::metapb::Region* release_right();
  inline void set_allocated_right(::metapb::Region* right);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitResponse)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* left_;
  ::metapb::Region* right_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static SplitResponse* default_instance_;
};
// -------------------------------------------------------------------

class CompactLogRequest : public ::google::protobuf::Message {
 public:
  CompactLogRequest();
  virtual ~CompactLogRequest();

  CompactLogRequest(const CompactLogRequest& from);

  inline CompactLogRequest& operator=(const CompactLogRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactLogRequest& default_instance();

  void Swap(CompactLogRequest* other);

  // implements Message ----------------------------------------------

  CompactLogRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactLogRequest& from);
  void MergeFrom(const CompactLogRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 compact_index = 1;
  inline bool has_compact_index() const;
  inline void clear_compact_index();
  static const int kCompactIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 compact_index() const;
  inline void set_compact_index(::google::protobuf::uint64 value);

  // optional uint64 compact_term = 2;
  inline bool has_compact_term() const;
  inline void clear_compact_term();
  static const int kCompactTermFieldNumber = 2;
  inline ::google::protobuf::uint64 compact_term() const;
  inline void set_compact_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CompactLogRequest)
 private:
  inline void set_has_compact_index();
  inline void clear_has_compact_index();
  inline void set_has_compact_term();
  inline void clear_has_compact_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 compact_index_;
  ::google::protobuf::uint64 compact_term_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static CompactLogRequest* default_instance_;
};
// -------------------------------------------------------------------

class CompactLogResponse : public ::google::protobuf::Message {
 public:
  CompactLogResponse();
  virtual ~CompactLogResponse();

  CompactLogResponse(const CompactLogResponse& from);

  inline CompactLogResponse& operator=(const CompactLogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactLogResponse& default_instance();

  void Swap(CompactLogResponse* other);

  // implements Message ----------------------------------------------

  CompactLogResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactLogResponse& from);
  void MergeFrom(const CompactLogResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CompactLogResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static CompactLogResponse* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderRequest : public ::google::protobuf::Message {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();

  TransferLeaderRequest(const TransferLeaderRequest& from);

  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderRequest& default_instance();

  void Swap(TransferLeaderRequest* other);

  // implements Message ----------------------------------------------

  TransferLeaderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Peer peer = 1;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 1;
  inline const ::metapb::Peer& peer() const;
  inline ::metapb::Peer* mutable_peer();
  inline ::metapb::Peer* release_peer();
  inline void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.TransferLeaderRequest)
 private:
  inline void set_has_peer();
  inline void clear_has_peer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Peer* peer_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static TransferLeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferLeaderResponse : public ::google::protobuf::Message {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();

  TransferLeaderResponse(const TransferLeaderResponse& from);

  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderResponse& default_instance();

  void Swap(TransferLeaderResponse* other);

  // implements Message ----------------------------------------------

  TransferLeaderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.TransferLeaderResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static TransferLeaderResponse* default_instance_;
};
// -------------------------------------------------------------------

class VerifyHashRequest : public ::google::protobuf::Message {
 public:
  VerifyHashRequest();
  virtual ~VerifyHashRequest();

  VerifyHashRequest(const VerifyHashRequest& from);

  inline VerifyHashRequest& operator=(const VerifyHashRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyHashRequest& default_instance();

  void Swap(VerifyHashRequest* other);

  // implements Message ----------------------------------------------

  VerifyHashRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyHashRequest& from);
  void MergeFrom(const VerifyHashRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // optional bytes hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const void* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.VerifyHashRequest)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_hash();
  inline void clear_has_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 index_;
  ::std::string* hash_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static VerifyHashRequest* default_instance_;
};
// -------------------------------------------------------------------

class VerifyHashResponse : public ::google::protobuf::Message {
 public:
  VerifyHashResponse();
  virtual ~VerifyHashResponse();

  VerifyHashResponse(const VerifyHashResponse& from);

  inline VerifyHashResponse& operator=(const VerifyHashResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyHashResponse& default_instance();

  void Swap(VerifyHashResponse* other);

  // implements Message ----------------------------------------------

  VerifyHashResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyHashResponse& from);
  void MergeFrom(const VerifyHashResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.VerifyHashResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static VerifyHashResponse* default_instance_;
};
// -------------------------------------------------------------------

class AdminRequest : public ::google::protobuf::Message {
 public:
  AdminRequest();
  virtual ~AdminRequest();

  AdminRequest(const AdminRequest& from);

  inline AdminRequest& operator=(const AdminRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminRequest& default_instance();

  void Swap(AdminRequest* other);

  // implements Message ----------------------------------------------

  AdminRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminRequest& from);
  void MergeFrom(const AdminRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::raft_cmdpb::AdminCmdType cmd_type() const;
  inline void set_cmd_type(::raft_cmdpb::AdminCmdType value);

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  inline bool has_change_peer() const;
  inline void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  inline const ::raft_cmdpb::ChangePeerRequest& change_peer() const;
  inline ::raft_cmdpb::ChangePeerRequest* mutable_change_peer();
  inline ::raft_cmdpb::ChangePeerRequest* release_change_peer();
  inline void set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer);

  // optional .raft_cmdpb.SplitRequest split = 3;
  inline bool has_split() const;
  inline void clear_split();
  static const int kSplitFieldNumber = 3;
  inline const ::raft_cmdpb::SplitRequest& split() const;
  inline ::raft_cmdpb::SplitRequest* mutable_split();
  inline ::raft_cmdpb::SplitRequest* release_split();
  inline void set_allocated_split(::raft_cmdpb::SplitRequest* split);

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  inline bool has_compact_log() const;
  inline void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  inline const ::raft_cmdpb::CompactLogRequest& compact_log() const;
  inline ::raft_cmdpb::CompactLogRequest* mutable_compact_log();
  inline ::raft_cmdpb::CompactLogRequest* release_compact_log();
  inline void set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log);

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  inline bool has_transfer_leader() const;
  inline void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  inline const ::raft_cmdpb::TransferLeaderRequest& transfer_leader() const;
  inline ::raft_cmdpb::TransferLeaderRequest* mutable_transfer_leader();
  inline ::raft_cmdpb::TransferLeaderRequest* release_transfer_leader();
  inline void set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader);

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  inline bool has_verify_hash() const;
  inline void clear_verify_hash();
  static const int kVerifyHashFieldNumber = 6;
  inline const ::raft_cmdpb::VerifyHashRequest& verify_hash() const;
  inline ::raft_cmdpb::VerifyHashRequest* mutable_verify_hash();
  inline ::raft_cmdpb::VerifyHashRequest* release_verify_hash();
  inline void set_allocated_verify_hash(::raft_cmdpb::VerifyHashRequest* verify_hash);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.AdminRequest)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_change_peer();
  inline void clear_has_change_peer();
  inline void set_has_split();
  inline void clear_has_split();
  inline void set_has_compact_log();
  inline void clear_has_compact_log();
  inline void set_has_transfer_leader();
  inline void clear_has_transfer_leader();
  inline void set_has_verify_hash();
  inline void clear_has_verify_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::ChangePeerRequest* change_peer_;
  ::raft_cmdpb::SplitRequest* split_;
  ::raft_cmdpb::CompactLogRequest* compact_log_;
  ::raft_cmdpb::TransferLeaderRequest* transfer_leader_;
  ::raft_cmdpb::VerifyHashRequest* verify_hash_;
  int cmd_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static AdminRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdminResponse : public ::google::protobuf::Message {
 public:
  AdminResponse();
  virtual ~AdminResponse();

  AdminResponse(const AdminResponse& from);

  inline AdminResponse& operator=(const AdminResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminResponse& default_instance();

  void Swap(AdminResponse* other);

  // implements Message ----------------------------------------------

  AdminResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminResponse& from);
  void MergeFrom(const AdminResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::raft_cmdpb::AdminCmdType cmd_type() const;
  inline void set_cmd_type(::raft_cmdpb::AdminCmdType value);

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  inline bool has_change_peer() const;
  inline void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  inline const ::raft_cmdpb::ChangePeerResponse& change_peer() const;
  inline ::raft_cmdpb::ChangePeerResponse* mutable_change_peer();
  inline ::raft_cmdpb::ChangePeerResponse* release_change_peer();
  inline void set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer);

  // optional .raft_cmdpb.SplitResponse split = 3;
  inline bool has_split() const;
  inline void clear_split();
  static const int kSplitFieldNumber = 3;
  inline const ::raft_cmdpb::SplitResponse& split() const;
  inline ::raft_cmdpb::SplitResponse* mutable_split();
  inline ::raft_cmdpb::SplitResponse* release_split();
  inline void set_allocated_split(::raft_cmdpb::SplitResponse* split);

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  inline bool has_compact_log() const;
  inline void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  inline const ::raft_cmdpb::CompactLogResponse& compact_log() const;
  inline ::raft_cmdpb::CompactLogResponse* mutable_compact_log();
  inline ::raft_cmdpb::CompactLogResponse* release_compact_log();
  inline void set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log);

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  inline bool has_transfer_leader() const;
  inline void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  inline const ::raft_cmdpb::TransferLeaderResponse& transfer_leader() const;
  inline ::raft_cmdpb::TransferLeaderResponse* mutable_transfer_leader();
  inline ::raft_cmdpb::TransferLeaderResponse* release_transfer_leader();
  inline void set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader);

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  inline bool has_verify_hash() const;
  inline void clear_verify_hash();
  static const int kVerifyHashFieldNumber = 6;
  inline const ::raft_cmdpb::VerifyHashResponse& verify_hash() const;
  inline ::raft_cmdpb::VerifyHashResponse* mutable_verify_hash();
  inline ::raft_cmdpb::VerifyHashResponse* release_verify_hash();
  inline void set_allocated_verify_hash(::raft_cmdpb::VerifyHashResponse* verify_hash);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.AdminResponse)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_change_peer();
  inline void clear_has_change_peer();
  inline void set_has_split();
  inline void clear_has_split();
  inline void set_has_compact_log();
  inline void clear_has_compact_log();
  inline void set_has_transfer_leader();
  inline void clear_has_transfer_leader();
  inline void set_has_verify_hash();
  inline void clear_has_verify_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::ChangePeerResponse* change_peer_;
  ::raft_cmdpb::SplitResponse* split_;
  ::raft_cmdpb::CompactLogResponse* compact_log_;
  ::raft_cmdpb::TransferLeaderResponse* transfer_leader_;
  ::raft_cmdpb::VerifyHashResponse* verify_hash_;
  int cmd_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static AdminResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegionLeaderRequest : public ::google::protobuf::Message {
 public:
  RegionLeaderRequest();
  virtual ~RegionLeaderRequest();

  RegionLeaderRequest(const RegionLeaderRequest& from);

  inline RegionLeaderRequest& operator=(const RegionLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLeaderRequest& default_instance();

  void Swap(RegionLeaderRequest* other);

  // implements Message ----------------------------------------------

  RegionLeaderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLeaderRequest& from);
  void MergeFrom(const RegionLeaderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionLeaderRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RegionLeaderRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegionLeaderResponse : public ::google::protobuf::Message {
 public:
  RegionLeaderResponse();
  virtual ~RegionLeaderResponse();

  RegionLeaderResponse(const RegionLeaderResponse& from);

  inline RegionLeaderResponse& operator=(const RegionLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLeaderResponse& default_instance();

  void Swap(RegionLeaderResponse* other);

  // implements Message ----------------------------------------------

  RegionLeaderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLeaderResponse& from);
  void MergeFrom(const RegionLeaderResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Peer leader = 1;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 1;
  inline const ::metapb::Peer& leader() const;
  inline ::metapb::Peer* mutable_leader();
  inline ::metapb::Peer* release_leader();
  inline void set_allocated_leader(::metapb::Peer* leader);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionLeaderResponse)
 private:
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Peer* leader_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RegionLeaderResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegionDetailRequest : public ::google::protobuf::Message {
 public:
  RegionDetailRequest();
  virtual ~RegionDetailRequest();

  RegionDetailRequest(const RegionDetailRequest& from);

  inline RegionDetailRequest& operator=(const RegionDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionDetailRequest& default_instance();

  void Swap(RegionDetailRequest* other);

  // implements Message ----------------------------------------------

  RegionDetailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionDetailRequest& from);
  void MergeFrom(const RegionDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionDetailRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RegionDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegionDetailResponse : public ::google::protobuf::Message {
 public:
  RegionDetailResponse();
  virtual ~RegionDetailResponse();

  RegionDetailResponse(const RegionDetailResponse& from);

  inline RegionDetailResponse& operator=(const RegionDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionDetailResponse& default_instance();

  void Swap(RegionDetailResponse* other);

  // implements Message ----------------------------------------------

  RegionDetailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionDetailResponse& from);
  void MergeFrom(const RegionDetailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::metapb::Region& region() const;
  inline ::metapb::Region* mutable_region();
  inline ::metapb::Region* release_region();
  inline void set_allocated_region(::metapb::Region* region);

  // optional .metapb.Peer leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline const ::metapb::Peer& leader() const;
  inline ::metapb::Peer* mutable_leader();
  inline ::metapb::Peer* release_leader();
  inline void set_allocated_leader(::metapb::Peer* leader);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionDetailResponse)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::metapb::Region* region_;
  ::metapb::Peer* leader_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RegionDetailResponse* default_instance_;
};
// -------------------------------------------------------------------

class StatusRequest : public ::google::protobuf::Message {
 public:
  StatusRequest();
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRequest& default_instance();

  void Swap(StatusRequest* other);

  // implements Message ----------------------------------------------

  StatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::raft_cmdpb::StatusCmdType cmd_type() const;
  inline void set_cmd_type(::raft_cmdpb::StatusCmdType value);

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  inline bool has_region_leader() const;
  inline void clear_region_leader();
  static const int kRegionLeaderFieldNumber = 2;
  inline const ::raft_cmdpb::RegionLeaderRequest& region_leader() const;
  inline ::raft_cmdpb::RegionLeaderRequest* mutable_region_leader();
  inline ::raft_cmdpb::RegionLeaderRequest* release_region_leader();
  inline void set_allocated_region_leader(::raft_cmdpb::RegionLeaderRequest* region_leader);

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  inline bool has_region_detail() const;
  inline void clear_region_detail();
  static const int kRegionDetailFieldNumber = 3;
  inline const ::raft_cmdpb::RegionDetailRequest& region_detail() const;
  inline ::raft_cmdpb::RegionDetailRequest* mutable_region_detail();
  inline ::raft_cmdpb::RegionDetailRequest* release_region_detail();
  inline void set_allocated_region_detail(::raft_cmdpb::RegionDetailRequest* region_detail);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.StatusRequest)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_region_leader();
  inline void clear_has_region_leader();
  inline void set_has_region_detail();
  inline void clear_has_region_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::RegionLeaderRequest* region_leader_;
  ::raft_cmdpb::RegionDetailRequest* region_detail_;
  int cmd_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static StatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusResponse : public ::google::protobuf::Message {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse& default_instance();

  void Swap(StatusResponse* other);

  // implements Message ----------------------------------------------

  StatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::raft_cmdpb::StatusCmdType cmd_type() const;
  inline void set_cmd_type(::raft_cmdpb::StatusCmdType value);

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  inline bool has_region_leader() const;
  inline void clear_region_leader();
  static const int kRegionLeaderFieldNumber = 2;
  inline const ::raft_cmdpb::RegionLeaderResponse& region_leader() const;
  inline ::raft_cmdpb::RegionLeaderResponse* mutable_region_leader();
  inline ::raft_cmdpb::RegionLeaderResponse* release_region_leader();
  inline void set_allocated_region_leader(::raft_cmdpb::RegionLeaderResponse* region_leader);

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  inline bool has_region_detail() const;
  inline void clear_region_detail();
  static const int kRegionDetailFieldNumber = 3;
  inline const ::raft_cmdpb::RegionDetailResponse& region_detail() const;
  inline ::raft_cmdpb::RegionDetailResponse* mutable_region_detail();
  inline ::raft_cmdpb::RegionDetailResponse* release_region_detail();
  inline void set_allocated_region_detail(::raft_cmdpb::RegionDetailResponse* region_detail);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.StatusResponse)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_region_leader();
  inline void clear_has_region_leader();
  inline void set_has_region_detail();
  inline void clear_has_region_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::RegionLeaderResponse* region_leader_;
  ::raft_cmdpb::RegionDetailResponse* region_detail_;
  int cmd_type_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static StatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class RaftRequestHeader : public ::google::protobuf::Message {
 public:
  RaftRequestHeader();
  virtual ~RaftRequestHeader();

  RaftRequestHeader(const RaftRequestHeader& from);

  inline RaftRequestHeader& operator=(const RaftRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftRequestHeader& default_instance();

  void Swap(RaftRequestHeader* other);

  // implements Message ----------------------------------------------

  RaftRequestHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftRequestHeader& from);
  void MergeFrom(const RaftRequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 region_id() const;
  inline void set_region_id(::google::protobuf::uint64 value);

  // optional .metapb.Peer peer = 2;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 2;
  inline const ::metapb::Peer& peer() const;
  inline ::metapb::Peer* mutable_peer();
  inline ::metapb::Peer* release_peer();
  inline void set_allocated_peer(::metapb::Peer* peer);

  // optional bool read_quorum = 3;
  inline bool has_read_quorum() const;
  inline void clear_read_quorum();
  static const int kReadQuorumFieldNumber = 3;
  inline bool read_quorum() const;
  inline void set_read_quorum(bool value);

  // optional bytes uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .metapb.RegionEpoch region_epoch = 5;
  inline bool has_region_epoch() const;
  inline void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 5;
  inline const ::metapb::RegionEpoch& region_epoch() const;
  inline ::metapb::RegionEpoch* mutable_region_epoch();
  inline ::metapb::RegionEpoch* release_region_epoch();
  inline void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // optional uint64 term = 6;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 6;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftRequestHeader)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_peer();
  inline void clear_has_peer();
  inline void set_has_read_quorum();
  inline void clear_has_read_quorum();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_region_epoch();
  inline void clear_has_region_epoch();
  inline void set_has_term();
  inline void clear_has_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 region_id_;
  ::metapb::Peer* peer_;
  ::std::string* uuid_;
  ::metapb::RegionEpoch* region_epoch_;
  ::google::protobuf::uint64 term_;
  bool read_quorum_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RaftRequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class RaftResponseHeader : public ::google::protobuf::Message {
 public:
  RaftResponseHeader();
  virtual ~RaftResponseHeader();

  RaftResponseHeader(const RaftResponseHeader& from);

  inline RaftResponseHeader& operator=(const RaftResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftResponseHeader& default_instance();

  void Swap(RaftResponseHeader* other);

  // implements Message ----------------------------------------------

  RaftResponseHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftResponseHeader& from);
  void MergeFrom(const RaftResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .errorpb.Error error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::errorpb::Error& error() const;
  inline ::errorpb::Error* mutable_error();
  inline ::errorpb::Error* release_error();
  inline void set_allocated_error(::errorpb::Error* error);

  // optional bytes uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional uint64 current_term = 3;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 3;
  inline ::google::protobuf::uint64 current_term() const;
  inline void set_current_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftResponseHeader)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_current_term();
  inline void clear_has_current_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::errorpb::Error* error_;
  ::std::string* uuid_;
  ::google::protobuf::uint64 current_term_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RaftResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class RaftCmdRequest : public ::google::protobuf::Message {
 public:
  RaftCmdRequest();
  virtual ~RaftCmdRequest();

  RaftCmdRequest(const RaftCmdRequest& from);

  inline RaftCmdRequest& operator=(const RaftCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCmdRequest& default_instance();

  void Swap(RaftCmdRequest* other);

  // implements Message ----------------------------------------------

  RaftCmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftCmdRequest& from);
  void MergeFrom(const RaftCmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::raft_cmdpb::RaftRequestHeader& header() const;
  inline ::raft_cmdpb::RaftRequestHeader* mutable_header();
  inline ::raft_cmdpb::RaftRequestHeader* release_header();
  inline void set_allocated_header(::raft_cmdpb::RaftRequestHeader* header);

  // repeated .raft_cmdpb.Request requests = 2;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 2;
  inline const ::raft_cmdpb::Request& requests(int index) const;
  inline ::raft_cmdpb::Request* mutable_requests(int index);
  inline ::raft_cmdpb::Request* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >*
      mutable_requests();

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  inline bool has_admin_request() const;
  inline void clear_admin_request();
  static const int kAdminRequestFieldNumber = 3;
  inline const ::raft_cmdpb::AdminRequest& admin_request() const;
  inline ::raft_cmdpb::AdminRequest* mutable_admin_request();
  inline ::raft_cmdpb::AdminRequest* release_admin_request();
  inline void set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request);

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  inline bool has_status_request() const;
  inline void clear_status_request();
  static const int kStatusRequestFieldNumber = 4;
  inline const ::raft_cmdpb::StatusRequest& status_request() const;
  inline ::raft_cmdpb::StatusRequest* mutable_status_request();
  inline ::raft_cmdpb::StatusRequest* release_status_request();
  inline void set_allocated_status_request(::raft_cmdpb::StatusRequest* status_request);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftCmdRequest)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_admin_request();
  inline void clear_has_admin_request();
  inline void set_has_status_request();
  inline void clear_has_status_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::RaftRequestHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request > requests_;
  ::raft_cmdpb::AdminRequest* admin_request_;
  ::raft_cmdpb::StatusRequest* status_request_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RaftCmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class RaftCmdResponse : public ::google::protobuf::Message {
 public:
  RaftCmdResponse();
  virtual ~RaftCmdResponse();

  RaftCmdResponse(const RaftCmdResponse& from);

  inline RaftCmdResponse& operator=(const RaftCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCmdResponse& default_instance();

  void Swap(RaftCmdResponse* other);

  // implements Message ----------------------------------------------

  RaftCmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftCmdResponse& from);
  void MergeFrom(const RaftCmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::raft_cmdpb::RaftResponseHeader& header() const;
  inline ::raft_cmdpb::RaftResponseHeader* mutable_header();
  inline ::raft_cmdpb::RaftResponseHeader* release_header();
  inline void set_allocated_header(::raft_cmdpb::RaftResponseHeader* header);

  // repeated .raft_cmdpb.Response responses = 2;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 2;
  inline const ::raft_cmdpb::Response& responses(int index) const;
  inline ::raft_cmdpb::Response* mutable_responses(int index);
  inline ::raft_cmdpb::Response* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >*
      mutable_responses();

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  inline bool has_admin_response() const;
  inline void clear_admin_response();
  static const int kAdminResponseFieldNumber = 3;
  inline const ::raft_cmdpb::AdminResponse& admin_response() const;
  inline ::raft_cmdpb::AdminResponse* mutable_admin_response();
  inline ::raft_cmdpb::AdminResponse* release_admin_response();
  inline void set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response);

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  inline bool has_status_response() const;
  inline void clear_status_response();
  static const int kStatusResponseFieldNumber = 4;
  inline const ::raft_cmdpb::StatusResponse& status_response() const;
  inline ::raft_cmdpb::StatusResponse* mutable_status_response();
  inline ::raft_cmdpb::StatusResponse* release_status_response();
  inline void set_allocated_status_response(::raft_cmdpb::StatusResponse* status_response);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftCmdResponse)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_admin_response();
  inline void clear_has_admin_response();
  inline void set_has_status_response();
  inline void clear_has_status_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::raft_cmdpb::RaftResponseHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response > responses_;
  ::raft_cmdpb::AdminResponse* admin_response_;
  ::raft_cmdpb::StatusResponse* status_response_;
  friend void  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_raft_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static RaftCmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetRequest

// optional string cf = 1;
inline bool GetRequest::has_cf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRequest::set_has_cf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRequest::clear_has_cf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRequest::clear_cf() {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_->clear();
  }
  clear_has_cf();
}
inline const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.cf)
  return *cf_;
}
inline void GetRequest::set_cf(const ::std::string& value) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value, size_t size) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.cf)
}
inline ::std::string* GetRequest::mutable_cf() {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.cf)
  return cf_;
}
inline ::std::string* GetRequest::release_cf() {
  clear_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cf_;
    cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cf_;
  }
  if (cf) {
    set_has_cf();
    cf_ = cf;
  } else {
    clear_has_cf();
    cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.cf)
}

// optional uint64 key = 2;
inline bool GetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.key)
  return key_;
}
inline void GetRequest::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// optional bytes value = 1;
inline bool GetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetResponse::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetResponse.value)
  return *value_;
}
inline void GetResponse::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetResponse.value)
}
inline void GetResponse::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetResponse.value)
  return value_;
}
inline ::std::string* GetResponse::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetResponse.value)
}

// optional uint64 flag = 2;
inline bool GetResponse::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetResponse::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetResponse::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetResponse::clear_flag() {
  flag_ = GOOGLE_ULONGLONG(0);
  clear_has_flag();
}
inline ::google::protobuf::uint64 GetResponse::flag() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetResponse.flag)
  return flag_;
}
inline void GetResponse::set_flag(::google::protobuf::uint64 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetResponse.flag)
}

// -------------------------------------------------------------------

// PutRequest

// optional string cf = 1;
inline bool PutRequest::has_cf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRequest::set_has_cf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRequest::clear_has_cf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRequest::clear_cf() {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_->clear();
  }
  clear_has_cf();
}
inline const ::std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.cf)
  return *cf_;
}
inline void PutRequest::set_cf(const ::std::string& value) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value, size_t size) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.cf)
}
inline ::std::string* PutRequest::mutable_cf() {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.cf)
  return cf_;
}
inline ::std::string* PutRequest::release_cf() {
  clear_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cf_;
    cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRequest::set_allocated_cf(::std::string* cf) {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cf_;
  }
  if (cf) {
    set_has_cf();
    cf_ = cf;
  } else {
    clear_has_cf();
    cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.cf)
}

// optional uint64 key = 2;
inline bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.key)
  return key_;
}
inline void PutRequest::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.key)
}

// optional bytes value = 3;
inline bool PutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.value)
  return *value_;
}
inline void PutRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.value)
  return value_;
}
inline ::std::string* PutRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.value)
}

// optional uint64 offset = 4;
inline bool PutRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutRequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 PutRequest::offset() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.offset)
  return offset_;
}
inline void PutRequest::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.offset)
}

// optional uint64 size = 5;
inline bool PutRequest::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PutRequest::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PutRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PutRequest::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 PutRequest::size() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.size)
  return size_;
}
inline void PutRequest::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.size)
}

// -------------------------------------------------------------------

// PutResponse

// -------------------------------------------------------------------

// DeleteRequest

// optional string cf = 1;
inline bool DeleteRequest::has_cf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRequest::set_has_cf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRequest::clear_has_cf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRequest::clear_cf() {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_->clear();
  }
  clear_has_cf();
}
inline const ::std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.cf)
  return *cf_;
}
inline void DeleteRequest::set_cf(const ::std::string& value) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value, size_t size) {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  cf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.cf)
}
inline ::std::string* DeleteRequest::mutable_cf() {
  set_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.cf)
  return cf_;
}
inline ::std::string* DeleteRequest::release_cf() {
  clear_has_cf();
  if (cf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cf_;
    cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cf_;
  }
  if (cf) {
    set_has_cf();
    cf_ = cf;
  } else {
    clear_has_cf();
    cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.cf)
}

// optional uint64 key = 2;
inline bool DeleteRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.key)
  return key_;
}
inline void DeleteRequest::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// -------------------------------------------------------------------

// SnapRequest

// -------------------------------------------------------------------

// SnapResponse

// optional .metapb.Region region = 1;
inline bool SnapResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& SnapResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapResponse.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* SnapResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapResponse.region)
  return region_;
}
inline ::metapb::Region* SnapResponse::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void SnapResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapResponse.region)
}

// -------------------------------------------------------------------

// Request

// optional .raft_cmdpb.CmdType cmd_type = 1;
inline bool Request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::raft_cmdpb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Request::set_cmd_type(::raft_cmdpb::CmdType value) {
  assert(::raft_cmdpb::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Request.cmd_type)
}

// optional .raft_cmdpb.GetRequest get = 2;
inline bool Request::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_get() {
  if (get_ != NULL) get_->::raft_cmdpb::GetRequest::Clear();
  clear_has_get();
}
inline const ::raft_cmdpb::GetRequest& Request::get() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.get)
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::raft_cmdpb::GetRequest* Request::mutable_get() {
  set_has_get();
  if (get_ == NULL) get_ = new ::raft_cmdpb::GetRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.get)
  return get_;
}
inline ::raft_cmdpb::GetRequest* Request::release_get() {
  clear_has_get();
  ::raft_cmdpb::GetRequest* temp = get_;
  get_ = NULL;
  return temp;
}
inline void Request::set_allocated_get(::raft_cmdpb::GetRequest* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.get)
}

// optional .raft_cmdpb.PutRequest put = 4;
inline bool Request::has_put() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_put() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_put() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_put() {
  if (put_ != NULL) put_->::raft_cmdpb::PutRequest::Clear();
  clear_has_put();
}
inline const ::raft_cmdpb::PutRequest& Request::put() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.put)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
inline ::raft_cmdpb::PutRequest* Request::mutable_put() {
  set_has_put();
  if (put_ == NULL) put_ = new ::raft_cmdpb::PutRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.put)
  return put_;
}
inline ::raft_cmdpb::PutRequest* Request::release_put() {
  clear_has_put();
  ::raft_cmdpb::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
inline void Request::set_allocated_put(::raft_cmdpb::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.put)
}

// optional .raft_cmdpb.DeleteRequest delete = 5;
inline bool Request::has_delete_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_delete_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_delete_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_delete_() {
  if (delete__ != NULL) delete__->::raft_cmdpb::DeleteRequest::Clear();
  clear_has_delete_();
}
inline const ::raft_cmdpb::DeleteRequest& Request::delete_() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete)
  return delete__ != NULL ? *delete__ : *default_instance_->delete__;
}
inline ::raft_cmdpb::DeleteRequest* Request::mutable_delete_() {
  set_has_delete_();
  if (delete__ == NULL) delete__ = new ::raft_cmdpb::DeleteRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete)
  return delete__;
}
inline ::raft_cmdpb::DeleteRequest* Request::release_delete_() {
  clear_has_delete_();
  ::raft_cmdpb::DeleteRequest* temp = delete__;
  delete__ = NULL;
  return temp;
}
inline void Request::set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    set_has_delete_();
  } else {
    clear_has_delete_();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete)
}

// optional .raft_cmdpb.SnapRequest snap = 6;
inline bool Request::has_snap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_snap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_snap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_snap() {
  if (snap_ != NULL) snap_->::raft_cmdpb::SnapRequest::Clear();
  clear_has_snap();
}
inline const ::raft_cmdpb::SnapRequest& Request::snap() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.snap)
  return snap_ != NULL ? *snap_ : *default_instance_->snap_;
}
inline ::raft_cmdpb::SnapRequest* Request::mutable_snap() {
  set_has_snap();
  if (snap_ == NULL) snap_ = new ::raft_cmdpb::SnapRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.snap)
  return snap_;
}
inline ::raft_cmdpb::SnapRequest* Request::release_snap() {
  clear_has_snap();
  ::raft_cmdpb::SnapRequest* temp = snap_;
  snap_ = NULL;
  return temp;
}
inline void Request::set_allocated_snap(::raft_cmdpb::SnapRequest* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    set_has_snap();
  } else {
    clear_has_snap();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.snap)
}

// -------------------------------------------------------------------

// Response

// optional .raft_cmdpb.CmdType cmd_type = 1;
inline bool Response::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::raft_cmdpb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Response::set_cmd_type(::raft_cmdpb::CmdType value) {
  assert(::raft_cmdpb::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Response.cmd_type)
}

// optional .raft_cmdpb.GetResponse get = 2;
inline bool Response::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_get() {
  if (get_ != NULL) get_->::raft_cmdpb::GetResponse::Clear();
  clear_has_get();
}
inline const ::raft_cmdpb::GetResponse& Response::get() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.get)
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::raft_cmdpb::GetResponse* Response::mutable_get() {
  set_has_get();
  if (get_ == NULL) get_ = new ::raft_cmdpb::GetResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.get)
  return get_;
}
inline ::raft_cmdpb::GetResponse* Response::release_get() {
  clear_has_get();
  ::raft_cmdpb::GetResponse* temp = get_;
  get_ = NULL;
  return temp;
}
inline void Response::set_allocated_get(::raft_cmdpb::GetResponse* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.get)
}

// optional .raft_cmdpb.PutResponse put = 4;
inline bool Response::has_put() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_put() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_put() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_put() {
  if (put_ != NULL) put_->::raft_cmdpb::PutResponse::Clear();
  clear_has_put();
}
inline const ::raft_cmdpb::PutResponse& Response::put() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.put)
  return put_ != NULL ? *put_ : *default_instance_->put_;
}
inline ::raft_cmdpb::PutResponse* Response::mutable_put() {
  set_has_put();
  if (put_ == NULL) put_ = new ::raft_cmdpb::PutResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.put)
  return put_;
}
inline ::raft_cmdpb::PutResponse* Response::release_put() {
  clear_has_put();
  ::raft_cmdpb::PutResponse* temp = put_;
  put_ = NULL;
  return temp;
}
inline void Response::set_allocated_put(::raft_cmdpb::PutResponse* put) {
  delete put_;
  put_ = put;
  if (put) {
    set_has_put();
  } else {
    clear_has_put();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.put)
}

// optional .raft_cmdpb.DeleteResponse delete = 5;
inline bool Response::has_delete_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_delete_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_delete_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_delete_() {
  if (delete__ != NULL) delete__->::raft_cmdpb::DeleteResponse::Clear();
  clear_has_delete_();
}
inline const ::raft_cmdpb::DeleteResponse& Response::delete_() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delete)
  return delete__ != NULL ? *delete__ : *default_instance_->delete__;
}
inline ::raft_cmdpb::DeleteResponse* Response::mutable_delete_() {
  set_has_delete_();
  if (delete__ == NULL) delete__ = new ::raft_cmdpb::DeleteResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delete)
  return delete__;
}
inline ::raft_cmdpb::DeleteResponse* Response::release_delete_() {
  clear_has_delete_();
  ::raft_cmdpb::DeleteResponse* temp = delete__;
  delete__ = NULL;
  return temp;
}
inline void Response::set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    set_has_delete_();
  } else {
    clear_has_delete_();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delete)
}

// optional .raft_cmdpb.SnapResponse snap = 6;
inline bool Response::has_snap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_snap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_snap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_snap() {
  if (snap_ != NULL) snap_->::raft_cmdpb::SnapResponse::Clear();
  clear_has_snap();
}
inline const ::raft_cmdpb::SnapResponse& Response::snap() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.snap)
  return snap_ != NULL ? *snap_ : *default_instance_->snap_;
}
inline ::raft_cmdpb::SnapResponse* Response::mutable_snap() {
  set_has_snap();
  if (snap_ == NULL) snap_ = new ::raft_cmdpb::SnapResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.snap)
  return snap_;
}
inline ::raft_cmdpb::SnapResponse* Response::release_snap() {
  clear_has_snap();
  ::raft_cmdpb::SnapResponse* temp = snap_;
  snap_ = NULL;
  return temp;
}
inline void Response::set_allocated_snap(::raft_cmdpb::SnapResponse* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    set_has_snap();
  } else {
    clear_has_snap();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.snap)
}

// -------------------------------------------------------------------

// ChangePeerRequest

// optional .eraftpb.ConfChangeType change_type = 1;
inline bool ChangePeerRequest::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePeerRequest::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePeerRequest::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
inline ::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
inline void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  assert(::eraftpb::ConfChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.ChangePeerRequest.change_type)
}

// optional .metapb.Peer peer = 2;
inline bool ChangePeerRequest::has_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePeerRequest::set_has_peer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePeerRequest::clear_has_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePeerRequest::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
inline const ::metapb::Peer& ChangePeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* ChangePeerRequest::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerRequest.peer)
  return peer_;
}
inline ::metapb::Peer* ChangePeerRequest::release_peer() {
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerRequest.peer)
}

// -------------------------------------------------------------------

// ChangePeerResponse

// optional .metapb.Region region = 1;
inline bool ChangePeerResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePeerResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePeerResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePeerResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& ChangePeerResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerResponse.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* ChangePeerResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerResponse.region)
  return region_;
}
inline ::metapb::Region* ChangePeerResponse::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerResponse.region)
}

// -------------------------------------------------------------------

// SplitRequest

// optional bytes split_key = 1;
inline bool SplitRequest::has_split_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitRequest::set_has_split_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitRequest::clear_has_split_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitRequest::clear_split_key() {
  if (split_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    split_key_->clear();
  }
  clear_has_split_key();
}
inline const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return *split_key_;
}
inline void SplitRequest::set_split_key(const ::std::string& value) {
  set_has_split_key();
  if (split_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    split_key_ = new ::std::string;
  }
  split_key_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const char* value) {
  set_has_split_key();
  if (split_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    split_key_ = new ::std::string;
  }
  split_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const void* value, size_t size) {
  set_has_split_key();
  if (split_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    split_key_ = new ::std::string;
  }
  split_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
inline ::std::string* SplitRequest::mutable_split_key() {
  set_has_split_key();
  if (split_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    split_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_;
}
inline ::std::string* SplitRequest::release_split_key() {
  clear_has_split_key();
  if (split_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = split_key_;
    split_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete split_key_;
  }
  if (split_key) {
    set_has_split_key();
    split_key_ = split_key;
  } else {
    clear_has_split_key();
    split_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// optional uint64 new_region_id = 2;
inline bool SplitRequest::has_new_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitRequest::set_has_new_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitRequest::clear_has_new_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitRequest::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_new_region_id();
}
inline ::google::protobuf::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_region_id)
  return new_region_id_;
}
inline void SplitRequest::set_new_region_id(::google::protobuf::uint64 value) {
  set_has_new_region_id();
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
inline int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
inline void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
inline ::google::protobuf::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
inline void SplitRequest::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_peer_ids)
}
inline void SplitRequest::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_cmdpb.SplitRequest.new_peer_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

// -------------------------------------------------------------------

// SplitResponse

// optional .metapb.Region left = 1;
inline bool SplitResponse::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitResponse::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitResponse::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitResponse::clear_left() {
  if (left_ != NULL) left_->::metapb::Region::Clear();
  clear_has_left();
}
inline const ::metapb::Region& SplitResponse::left() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.left)
  return left_ != NULL ? *left_ : *default_instance_->left_;
}
inline ::metapb::Region* SplitResponse::mutable_left() {
  set_has_left();
  if (left_ == NULL) left_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.left)
  return left_;
}
inline ::metapb::Region* SplitResponse::release_left() {
  clear_has_left();
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
inline void SplitResponse::set_allocated_left(::metapb::Region* left) {
  delete left_;
  left_ = left;
  if (left) {
    set_has_left();
  } else {
    clear_has_left();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.left)
}

// optional .metapb.Region right = 2;
inline bool SplitResponse::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitResponse::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitResponse::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitResponse::clear_right() {
  if (right_ != NULL) right_->::metapb::Region::Clear();
  clear_has_right();
}
inline const ::metapb::Region& SplitResponse::right() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.right)
  return right_ != NULL ? *right_ : *default_instance_->right_;
}
inline ::metapb::Region* SplitResponse::mutable_right() {
  set_has_right();
  if (right_ == NULL) right_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.right)
  return right_;
}
inline ::metapb::Region* SplitResponse::release_right() {
  clear_has_right();
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
inline void SplitResponse::set_allocated_right(::metapb::Region* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.right)
}

// -------------------------------------------------------------------

// CompactLogRequest

// optional uint64 compact_index = 1;
inline bool CompactLogRequest::has_compact_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompactLogRequest::set_has_compact_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompactLogRequest::clear_has_compact_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompactLogRequest::clear_compact_index() {
  compact_index_ = GOOGLE_ULONGLONG(0);
  clear_has_compact_index();
}
inline ::google::protobuf::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_index)
  return compact_index_;
}
inline void CompactLogRequest::set_compact_index(::google::protobuf::uint64 value) {
  set_has_compact_index();
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_index)
}

// optional uint64 compact_term = 2;
inline bool CompactLogRequest::has_compact_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompactLogRequest::set_has_compact_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompactLogRequest::clear_has_compact_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompactLogRequest::clear_compact_term() {
  compact_term_ = GOOGLE_ULONGLONG(0);
  clear_has_compact_term();
}
inline ::google::protobuf::uint64 CompactLogRequest::compact_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_term)
  return compact_term_;
}
inline void CompactLogRequest::set_compact_term(::google::protobuf::uint64 value) {
  set_has_compact_term();
  compact_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_term)
}

// -------------------------------------------------------------------

// CompactLogResponse

// -------------------------------------------------------------------

// TransferLeaderRequest

// optional .metapb.Peer peer = 1;
inline bool TransferLeaderRequest::has_peer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferLeaderRequest::set_has_peer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferLeaderRequest::clear_has_peer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferLeaderRequest::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
inline const ::metapb::Peer& TransferLeaderRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_;
}
inline ::metapb::Peer* TransferLeaderRequest::release_peer() {
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.TransferLeaderRequest.peer)
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// -------------------------------------------------------------------

// VerifyHashRequest

// optional uint64 index = 1;
inline bool VerifyHashRequest::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyHashRequest::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyHashRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyHashRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 VerifyHashRequest::index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.index)
  return index_;
}
inline void VerifyHashRequest::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.index)
}

// optional bytes hash = 2;
inline bool VerifyHashRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyHashRequest::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyHashRequest::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyHashRequest::clear_hash() {
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& VerifyHashRequest::hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.hash)
  return *hash_;
}
inline void VerifyHashRequest::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.hash)
}
inline void VerifyHashRequest::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.VerifyHashRequest.hash)
}
inline void VerifyHashRequest::set_hash(const void* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.VerifyHashRequest.hash)
}
inline ::std::string* VerifyHashRequest::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.VerifyHashRequest.hash)
  return hash_;
}
inline ::std::string* VerifyHashRequest::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyHashRequest::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.VerifyHashRequest.hash)
}

// -------------------------------------------------------------------

// VerifyHashResponse

// -------------------------------------------------------------------

// AdminRequest

// optional .raft_cmdpb.AdminCmdType cmd_type = 1;
inline bool AdminRequest::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminRequest::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminRequest::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::raft_cmdpb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
inline void AdminRequest::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  assert(::raft_cmdpb::AdminCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminRequest.cmd_type)
}

// optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
inline bool AdminRequest::has_change_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminRequest::set_has_change_peer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminRequest::clear_has_change_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminRequest::clear_change_peer() {
  if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerRequest::Clear();
  clear_has_change_peer();
}
inline const ::raft_cmdpb::ChangePeerRequest& AdminRequest::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
inline ::raft_cmdpb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  set_has_change_peer();
  if (change_peer_ == NULL) change_peer_ = new ::raft_cmdpb::ChangePeerRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_;
}
inline ::raft_cmdpb::ChangePeerRequest* AdminRequest::release_change_peer() {
  clear_has_change_peer();
  ::raft_cmdpb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    set_has_change_peer();
  } else {
    clear_has_change_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.change_peer)
}

// optional .raft_cmdpb.SplitRequest split = 3;
inline bool AdminRequest::has_split() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminRequest::set_has_split() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminRequest::clear_has_split() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminRequest::clear_split() {
  if (split_ != NULL) split_->::raft_cmdpb::SplitRequest::Clear();
  clear_has_split();
}
inline const ::raft_cmdpb::SplitRequest& AdminRequest::split() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
inline ::raft_cmdpb::SplitRequest* AdminRequest::mutable_split() {
  set_has_split();
  if (split_ == NULL) split_ = new ::raft_cmdpb::SplitRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.split)
  return split_;
}
inline ::raft_cmdpb::SplitRequest* AdminRequest::release_split() {
  clear_has_split();
  ::raft_cmdpb::SplitRequest* temp = split_;
  split_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_split(::raft_cmdpb::SplitRequest* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.split)
}

// optional .raft_cmdpb.CompactLogRequest compact_log = 4;
inline bool AdminRequest::has_compact_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdminRequest::set_has_compact_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdminRequest::clear_has_compact_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdminRequest::clear_compact_log() {
  if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogRequest::Clear();
  clear_has_compact_log();
}
inline const ::raft_cmdpb::CompactLogRequest& AdminRequest::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_ != NULL ? *compact_log_ : *default_instance_->compact_log_;
}
inline ::raft_cmdpb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  set_has_compact_log();
  if (compact_log_ == NULL) compact_log_ = new ::raft_cmdpb::CompactLogRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_;
}
inline ::raft_cmdpb::CompactLogRequest* AdminRequest::release_compact_log() {
  clear_has_compact_log();
  ::raft_cmdpb::CompactLogRequest* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    set_has_compact_log();
  } else {
    clear_has_compact_log();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.compact_log)
}

// optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
inline bool AdminRequest::has_transfer_leader() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdminRequest::set_has_transfer_leader() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdminRequest::clear_has_transfer_leader() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdminRequest::clear_transfer_leader() {
  if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderRequest::Clear();
  clear_has_transfer_leader();
}
inline const ::raft_cmdpb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
inline ::raft_cmdpb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  set_has_transfer_leader();
  if (transfer_leader_ == NULL) transfer_leader_ = new ::raft_cmdpb::TransferLeaderRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
inline ::raft_cmdpb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  clear_has_transfer_leader();
  ::raft_cmdpb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    set_has_transfer_leader();
  } else {
    clear_has_transfer_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.transfer_leader)
}

// optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
inline bool AdminRequest::has_verify_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdminRequest::set_has_verify_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdminRequest::clear_has_verify_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdminRequest::clear_verify_hash() {
  if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashRequest::Clear();
  clear_has_verify_hash();
}
inline const ::raft_cmdpb::VerifyHashRequest& AdminRequest::verify_hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_ != NULL ? *verify_hash_ : *default_instance_->verify_hash_;
}
inline ::raft_cmdpb::VerifyHashRequest* AdminRequest::mutable_verify_hash() {
  set_has_verify_hash();
  if (verify_hash_ == NULL) verify_hash_ = new ::raft_cmdpb::VerifyHashRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_;
}
inline ::raft_cmdpb::VerifyHashRequest* AdminRequest::release_verify_hash() {
  clear_has_verify_hash();
  ::raft_cmdpb::VerifyHashRequest* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
inline void AdminRequest::set_allocated_verify_hash(::raft_cmdpb::VerifyHashRequest* verify_hash) {
  delete verify_hash_;
  verify_hash_ = verify_hash;
  if (verify_hash) {
    set_has_verify_hash();
  } else {
    clear_has_verify_hash();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.verify_hash)
}

// -------------------------------------------------------------------

// AdminResponse

// optional .raft_cmdpb.AdminCmdType cmd_type = 1;
inline bool AdminResponse::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminResponse::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminResponse::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::raft_cmdpb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
inline void AdminResponse::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  assert(::raft_cmdpb::AdminCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminResponse.cmd_type)
}

// optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
inline bool AdminResponse::has_change_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminResponse::set_has_change_peer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminResponse::clear_has_change_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminResponse::clear_change_peer() {
  if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerResponse::Clear();
  clear_has_change_peer();
}
inline const ::raft_cmdpb::ChangePeerResponse& AdminResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_ : *default_instance_->change_peer_;
}
inline ::raft_cmdpb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  set_has_change_peer();
  if (change_peer_ == NULL) change_peer_ = new ::raft_cmdpb::ChangePeerResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_;
}
inline ::raft_cmdpb::ChangePeerResponse* AdminResponse::release_change_peer() {
  clear_has_change_peer();
  ::raft_cmdpb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    set_has_change_peer();
  } else {
    clear_has_change_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.change_peer)
}

// optional .raft_cmdpb.SplitResponse split = 3;
inline bool AdminResponse::has_split() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminResponse::set_has_split() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminResponse::clear_has_split() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminResponse::clear_split() {
  if (split_ != NULL) split_->::raft_cmdpb::SplitResponse::Clear();
  clear_has_split();
}
inline const ::raft_cmdpb::SplitResponse& AdminResponse::split() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
inline ::raft_cmdpb::SplitResponse* AdminResponse::mutable_split() {
  set_has_split();
  if (split_ == NULL) split_ = new ::raft_cmdpb::SplitResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.split)
  return split_;
}
inline ::raft_cmdpb::SplitResponse* AdminResponse::release_split() {
  clear_has_split();
  ::raft_cmdpb::SplitResponse* temp = split_;
  split_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_split(::raft_cmdpb::SplitResponse* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.split)
}

// optional .raft_cmdpb.CompactLogResponse compact_log = 4;
inline bool AdminResponse::has_compact_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdminResponse::set_has_compact_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdminResponse::clear_has_compact_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdminResponse::clear_compact_log() {
  if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogResponse::Clear();
  clear_has_compact_log();
}
inline const ::raft_cmdpb::CompactLogResponse& AdminResponse::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_ != NULL ? *compact_log_ : *default_instance_->compact_log_;
}
inline ::raft_cmdpb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  set_has_compact_log();
  if (compact_log_ == NULL) compact_log_ = new ::raft_cmdpb::CompactLogResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_;
}
inline ::raft_cmdpb::CompactLogResponse* AdminResponse::release_compact_log() {
  clear_has_compact_log();
  ::raft_cmdpb::CompactLogResponse* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    set_has_compact_log();
  } else {
    clear_has_compact_log();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.compact_log)
}

// optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
inline bool AdminResponse::has_transfer_leader() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdminResponse::set_has_transfer_leader() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdminResponse::clear_has_transfer_leader() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdminResponse::clear_transfer_leader() {
  if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderResponse::Clear();
  clear_has_transfer_leader();
}
inline const ::raft_cmdpb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_ : *default_instance_->transfer_leader_;
}
inline ::raft_cmdpb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  set_has_transfer_leader();
  if (transfer_leader_ == NULL) transfer_leader_ = new ::raft_cmdpb::TransferLeaderResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
inline ::raft_cmdpb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  clear_has_transfer_leader();
  ::raft_cmdpb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    set_has_transfer_leader();
  } else {
    clear_has_transfer_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.transfer_leader)
}

// optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
inline bool AdminResponse::has_verify_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdminResponse::set_has_verify_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdminResponse::clear_has_verify_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdminResponse::clear_verify_hash() {
  if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashResponse::Clear();
  clear_has_verify_hash();
}
inline const ::raft_cmdpb::VerifyHashResponse& AdminResponse::verify_hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_ != NULL ? *verify_hash_ : *default_instance_->verify_hash_;
}
inline ::raft_cmdpb::VerifyHashResponse* AdminResponse::mutable_verify_hash() {
  set_has_verify_hash();
  if (verify_hash_ == NULL) verify_hash_ = new ::raft_cmdpb::VerifyHashResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_;
}
inline ::raft_cmdpb::VerifyHashResponse* AdminResponse::release_verify_hash() {
  clear_has_verify_hash();
  ::raft_cmdpb::VerifyHashResponse* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
inline void AdminResponse::set_allocated_verify_hash(::raft_cmdpb::VerifyHashResponse* verify_hash) {
  delete verify_hash_;
  verify_hash_ = verify_hash;
  if (verify_hash) {
    set_has_verify_hash();
  } else {
    clear_has_verify_hash();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.verify_hash)
}

// -------------------------------------------------------------------

// RegionLeaderRequest

// -------------------------------------------------------------------

// RegionLeaderResponse

// optional .metapb.Peer leader = 1;
inline bool RegionLeaderResponse::has_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionLeaderResponse::set_has_leader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionLeaderResponse::clear_has_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionLeaderResponse::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
inline const ::metapb::Peer& RegionLeaderResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::metapb::Peer* RegionLeaderResponse::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_;
}
inline ::metapb::Peer* RegionLeaderResponse::release_leader() {
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void RegionLeaderResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionLeaderResponse.leader)
}

// -------------------------------------------------------------------

// RegionDetailRequest

// -------------------------------------------------------------------

// RegionDetailResponse

// optional .metapb.Region region = 1;
inline bool RegionDetailResponse::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionDetailResponse::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionDetailResponse::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionDetailResponse::clear_region() {
  if (region_ != NULL) region_->::metapb::Region::Clear();
  clear_has_region();
}
inline const ::metapb::Region& RegionDetailResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::metapb::Region* RegionDetailResponse::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::metapb::Region;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.region)
  return region_;
}
inline ::metapb::Region* RegionDetailResponse::release_region() {
  clear_has_region();
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void RegionDetailResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.region)
}

// optional .metapb.Peer leader = 2;
inline bool RegionDetailResponse::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionDetailResponse::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionDetailResponse::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionDetailResponse::clear_leader() {
  if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  clear_has_leader();
}
inline const ::metapb::Peer& RegionDetailResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::metapb::Peer* RegionDetailResponse::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.leader)
  return leader_;
}
inline ::metapb::Peer* RegionDetailResponse::release_leader() {
  clear_has_leader();
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void RegionDetailResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.leader)
}

// -------------------------------------------------------------------

// StatusRequest

// optional .raft_cmdpb.StatusCmdType cmd_type = 1;
inline bool StatusRequest::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusRequest::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusRequest::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusRequest::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::raft_cmdpb::StatusCmdType StatusRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
inline void StatusRequest::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  assert(::raft_cmdpb::StatusCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusRequest.cmd_type)
}

// optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
inline bool StatusRequest::has_region_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusRequest::set_has_region_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusRequest::clear_has_region_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusRequest::clear_region_leader() {
  if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderRequest::Clear();
  clear_has_region_leader();
}
inline const ::raft_cmdpb::RegionLeaderRequest& StatusRequest::region_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_ != NULL ? *region_leader_ : *default_instance_->region_leader_;
}
inline ::raft_cmdpb::RegionLeaderRequest* StatusRequest::mutable_region_leader() {
  set_has_region_leader();
  if (region_leader_ == NULL) region_leader_ = new ::raft_cmdpb::RegionLeaderRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_;
}
inline ::raft_cmdpb::RegionLeaderRequest* StatusRequest::release_region_leader() {
  clear_has_region_leader();
  ::raft_cmdpb::RegionLeaderRequest* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
inline void StatusRequest::set_allocated_region_leader(::raft_cmdpb::RegionLeaderRequest* region_leader) {
  delete region_leader_;
  region_leader_ = region_leader;
  if (region_leader) {
    set_has_region_leader();
  } else {
    clear_has_region_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_leader)
}

// optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
inline bool StatusRequest::has_region_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatusRequest::set_has_region_detail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatusRequest::clear_has_region_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatusRequest::clear_region_detail() {
  if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailRequest::Clear();
  clear_has_region_detail();
}
inline const ::raft_cmdpb::RegionDetailRequest& StatusRequest::region_detail() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_ != NULL ? *region_detail_ : *default_instance_->region_detail_;
}
inline ::raft_cmdpb::RegionDetailRequest* StatusRequest::mutable_region_detail() {
  set_has_region_detail();
  if (region_detail_ == NULL) region_detail_ = new ::raft_cmdpb::RegionDetailRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_;
}
inline ::raft_cmdpb::RegionDetailRequest* StatusRequest::release_region_detail() {
  clear_has_region_detail();
  ::raft_cmdpb::RegionDetailRequest* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
inline void StatusRequest::set_allocated_region_detail(::raft_cmdpb::RegionDetailRequest* region_detail) {
  delete region_detail_;
  region_detail_ = region_detail;
  if (region_detail) {
    set_has_region_detail();
  } else {
    clear_has_region_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_detail)
}

// -------------------------------------------------------------------

// StatusResponse

// optional .raft_cmdpb.StatusCmdType cmd_type = 1;
inline bool StatusResponse::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusResponse::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusResponse::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusResponse::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::raft_cmdpb::StatusCmdType StatusResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
inline void StatusResponse::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  assert(::raft_cmdpb::StatusCmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusResponse.cmd_type)
}

// optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
inline bool StatusResponse::has_region_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusResponse::set_has_region_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusResponse::clear_has_region_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusResponse::clear_region_leader() {
  if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderResponse::Clear();
  clear_has_region_leader();
}
inline const ::raft_cmdpb::RegionLeaderResponse& StatusResponse::region_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_ != NULL ? *region_leader_ : *default_instance_->region_leader_;
}
inline ::raft_cmdpb::RegionLeaderResponse* StatusResponse::mutable_region_leader() {
  set_has_region_leader();
  if (region_leader_ == NULL) region_leader_ = new ::raft_cmdpb::RegionLeaderResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_;
}
inline ::raft_cmdpb::RegionLeaderResponse* StatusResponse::release_region_leader() {
  clear_has_region_leader();
  ::raft_cmdpb::RegionLeaderResponse* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
inline void StatusResponse::set_allocated_region_leader(::raft_cmdpb::RegionLeaderResponse* region_leader) {
  delete region_leader_;
  region_leader_ = region_leader;
  if (region_leader) {
    set_has_region_leader();
  } else {
    clear_has_region_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_leader)
}

// optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
inline bool StatusResponse::has_region_detail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatusResponse::set_has_region_detail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatusResponse::clear_has_region_detail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatusResponse::clear_region_detail() {
  if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailResponse::Clear();
  clear_has_region_detail();
}
inline const ::raft_cmdpb::RegionDetailResponse& StatusResponse::region_detail() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_ != NULL ? *region_detail_ : *default_instance_->region_detail_;
}
inline ::raft_cmdpb::RegionDetailResponse* StatusResponse::mutable_region_detail() {
  set_has_region_detail();
  if (region_detail_ == NULL) region_detail_ = new ::raft_cmdpb::RegionDetailResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_;
}
inline ::raft_cmdpb::RegionDetailResponse* StatusResponse::release_region_detail() {
  clear_has_region_detail();
  ::raft_cmdpb::RegionDetailResponse* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
inline void StatusResponse::set_allocated_region_detail(::raft_cmdpb::RegionDetailResponse* region_detail) {
  delete region_detail_;
  region_detail_ = region_detail;
  if (region_detail) {
    set_has_region_detail();
  } else {
    clear_has_region_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_detail)
}

// -------------------------------------------------------------------

// RaftRequestHeader

// optional uint64 region_id = 1;
inline bool RaftRequestHeader::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftRequestHeader::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftRequestHeader::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftRequestHeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
  clear_has_region_id();
}
inline ::google::protobuf::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_id)
  return region_id_;
}
inline void RaftRequestHeader::set_region_id(::google::protobuf::uint64 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.region_id)
}

// optional .metapb.Peer peer = 2;
inline bool RaftRequestHeader::has_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftRequestHeader::set_has_peer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftRequestHeader::clear_has_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftRequestHeader::clear_peer() {
  if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  clear_has_peer();
}
inline const ::metapb::Peer& RaftRequestHeader::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::metapb::Peer* RaftRequestHeader::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::metapb::Peer;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.peer)
  return peer_;
}
inline ::metapb::Peer* RaftRequestHeader::release_peer() {
  clear_has_peer();
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.peer)
}

// optional bool read_quorum = 3;
inline bool RaftRequestHeader::has_read_quorum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftRequestHeader::set_has_read_quorum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftRequestHeader::clear_has_read_quorum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftRequestHeader::clear_read_quorum() {
  read_quorum_ = false;
  clear_has_read_quorum();
}
inline bool RaftRequestHeader::read_quorum() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.read_quorum)
  return read_quorum_;
}
inline void RaftRequestHeader::set_read_quorum(bool value) {
  set_has_read_quorum();
  read_quorum_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.read_quorum)
}

// optional bytes uuid = 4;
inline bool RaftRequestHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaftRequestHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaftRequestHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaftRequestHeader::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& RaftRequestHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.uuid)
  return *uuid_;
}
inline void RaftRequestHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.uuid)
}
inline void RaftRequestHeader::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftRequestHeader.uuid)
}
inline void RaftRequestHeader::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftRequestHeader.uuid)
}
inline ::std::string* RaftRequestHeader::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_;
}
inline ::std::string* RaftRequestHeader::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaftRequestHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.uuid)
}

// optional .metapb.RegionEpoch region_epoch = 5;
inline bool RaftRequestHeader::has_region_epoch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaftRequestHeader::set_has_region_epoch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaftRequestHeader::clear_has_region_epoch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaftRequestHeader::clear_region_epoch() {
  if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
  clear_has_region_epoch();
}
inline const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_ : *default_instance_->region_epoch_;
}
inline ::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  set_has_region_epoch();
  if (region_epoch_ == NULL) region_epoch_ = new ::metapb::RegionEpoch;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
inline ::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  clear_has_region_epoch();
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
inline void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    set_has_region_epoch();
  } else {
    clear_has_region_epoch();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.region_epoch)
}

// optional uint64 term = 6;
inline bool RaftRequestHeader::has_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaftRequestHeader::set_has_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaftRequestHeader::clear_has_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaftRequestHeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.term)
  return term_;
}
inline void RaftRequestHeader::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.term)
}

// -------------------------------------------------------------------

// RaftResponseHeader

// optional .errorpb.Error error = 1;
inline bool RaftResponseHeader::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftResponseHeader::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftResponseHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftResponseHeader::clear_error() {
  if (error_ != NULL) error_->::errorpb::Error::Clear();
  clear_has_error();
}
inline const ::errorpb::Error& RaftResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::errorpb::Error* RaftResponseHeader::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::errorpb::Error;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.error)
  return error_;
}
inline ::errorpb::Error* RaftResponseHeader::release_error() {
  clear_has_error();
  ::errorpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void RaftResponseHeader::set_allocated_error(::errorpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.error)
}

// optional bytes uuid = 2;
inline bool RaftResponseHeader::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftResponseHeader::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftResponseHeader::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftResponseHeader::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.uuid)
  return *uuid_;
}
inline void RaftResponseHeader::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftResponseHeader.uuid)
}
inline ::std::string* RaftResponseHeader::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_;
}
inline ::std::string* RaftResponseHeader::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaftResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.uuid)
}

// optional uint64 current_term = 3;
inline bool RaftResponseHeader::has_current_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftResponseHeader::set_has_current_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftResponseHeader::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftResponseHeader::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.current_term)
  return current_term_;
}
inline void RaftResponseHeader::set_current_term(::google::protobuf::uint64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.current_term)
}

// -------------------------------------------------------------------

// RaftCmdRequest

// optional .raft_cmdpb.RaftRequestHeader header = 1;
inline bool RaftCmdRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftCmdRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftCmdRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftCmdRequest::clear_header() {
  if (header_ != NULL) header_->::raft_cmdpb::RaftRequestHeader::Clear();
  clear_has_header();
}
inline const ::raft_cmdpb::RaftRequestHeader& RaftCmdRequest::header() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::raft_cmdpb::RaftRequestHeader;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.header)
  return header_;
}
inline ::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::release_header() {
  clear_has_header();
  ::raft_cmdpb::RaftRequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RaftCmdRequest::set_allocated_header(::raft_cmdpb::RaftRequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.header)
}

// repeated .raft_cmdpb.Request requests = 2;
inline int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
inline void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
inline const ::raft_cmdpb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
inline ::raft_cmdpb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
inline ::raft_cmdpb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdRequest.requests)
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdRequest.requests)
  return &requests_;
}

// optional .raft_cmdpb.AdminRequest admin_request = 3;
inline bool RaftCmdRequest::has_admin_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftCmdRequest::set_has_admin_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftCmdRequest::clear_has_admin_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftCmdRequest::clear_admin_request() {
  if (admin_request_ != NULL) admin_request_->::raft_cmdpb::AdminRequest::Clear();
  clear_has_admin_request();
}
inline const ::raft_cmdpb::AdminRequest& RaftCmdRequest::admin_request() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_ != NULL ? *admin_request_ : *default_instance_->admin_request_;
}
inline ::raft_cmdpb::AdminRequest* RaftCmdRequest::mutable_admin_request() {
  set_has_admin_request();
  if (admin_request_ == NULL) admin_request_ = new ::raft_cmdpb::AdminRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_;
}
inline ::raft_cmdpb::AdminRequest* RaftCmdRequest::release_admin_request() {
  clear_has_admin_request();
  ::raft_cmdpb::AdminRequest* temp = admin_request_;
  admin_request_ = NULL;
  return temp;
}
inline void RaftCmdRequest::set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request) {
  delete admin_request_;
  admin_request_ = admin_request;
  if (admin_request) {
    set_has_admin_request();
  } else {
    clear_has_admin_request();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.admin_request)
}

// optional .raft_cmdpb.StatusRequest status_request = 4;
inline bool RaftCmdRequest::has_status_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaftCmdRequest::set_has_status_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaftCmdRequest::clear_has_status_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaftCmdRequest::clear_status_request() {
  if (status_request_ != NULL) status_request_->::raft_cmdpb::StatusRequest::Clear();
  clear_has_status_request();
}
inline const ::raft_cmdpb::StatusRequest& RaftCmdRequest::status_request() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_ != NULL ? *status_request_ : *default_instance_->status_request_;
}
inline ::raft_cmdpb::StatusRequest* RaftCmdRequest::mutable_status_request() {
  set_has_status_request();
  if (status_request_ == NULL) status_request_ = new ::raft_cmdpb::StatusRequest;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_;
}
inline ::raft_cmdpb::StatusRequest* RaftCmdRequest::release_status_request() {
  clear_has_status_request();
  ::raft_cmdpb::StatusRequest* temp = status_request_;
  status_request_ = NULL;
  return temp;
}
inline void RaftCmdRequest::set_allocated_status_request(::raft_cmdpb::StatusRequest* status_request) {
  delete status_request_;
  status_request_ = status_request;
  if (status_request) {
    set_has_status_request();
  } else {
    clear_has_status_request();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.status_request)
}

// -------------------------------------------------------------------

// RaftCmdResponse

// optional .raft_cmdpb.RaftResponseHeader header = 1;
inline bool RaftCmdResponse::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftCmdResponse::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftCmdResponse::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftCmdResponse::clear_header() {
  if (header_ != NULL) header_->::raft_cmdpb::RaftResponseHeader::Clear();
  clear_has_header();
}
inline const ::raft_cmdpb::RaftResponseHeader& RaftCmdResponse::header() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::raft_cmdpb::RaftResponseHeader;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.header)
  return header_;
}
inline ::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::release_header() {
  clear_has_header();
  ::raft_cmdpb::RaftResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RaftCmdResponse::set_allocated_header(::raft_cmdpb::RaftResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.header)
}

// repeated .raft_cmdpb.Response responses = 2;
inline int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
inline void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
inline const ::raft_cmdpb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
inline ::raft_cmdpb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
inline ::raft_cmdpb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdResponse.responses)
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdResponse.responses)
  return &responses_;
}

// optional .raft_cmdpb.AdminResponse admin_response = 3;
inline bool RaftCmdResponse::has_admin_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftCmdResponse::set_has_admin_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftCmdResponse::clear_has_admin_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftCmdResponse::clear_admin_response() {
  if (admin_response_ != NULL) admin_response_->::raft_cmdpb::AdminResponse::Clear();
  clear_has_admin_response();
}
inline const ::raft_cmdpb::AdminResponse& RaftCmdResponse::admin_response() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_ != NULL ? *admin_response_ : *default_instance_->admin_response_;
}
inline ::raft_cmdpb::AdminResponse* RaftCmdResponse::mutable_admin_response() {
  set_has_admin_response();
  if (admin_response_ == NULL) admin_response_ = new ::raft_cmdpb::AdminResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_;
}
inline ::raft_cmdpb::AdminResponse* RaftCmdResponse::release_admin_response() {
  clear_has_admin_response();
  ::raft_cmdpb::AdminResponse* temp = admin_response_;
  admin_response_ = NULL;
  return temp;
}
inline void RaftCmdResponse::set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response) {
  delete admin_response_;
  admin_response_ = admin_response;
  if (admin_response) {
    set_has_admin_response();
  } else {
    clear_has_admin_response();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.admin_response)
}

// optional .raft_cmdpb.StatusResponse status_response = 4;
inline bool RaftCmdResponse::has_status_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaftCmdResponse::set_has_status_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaftCmdResponse::clear_has_status_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaftCmdResponse::clear_status_response() {
  if (status_response_ != NULL) status_response_->::raft_cmdpb::StatusResponse::Clear();
  clear_has_status_response();
}
inline const ::raft_cmdpb::StatusResponse& RaftCmdResponse::status_response() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_ != NULL ? *status_response_ : *default_instance_->status_response_;
}
inline ::raft_cmdpb::StatusResponse* RaftCmdResponse::mutable_status_response() {
  set_has_status_response();
  if (status_response_ == NULL) status_response_ = new ::raft_cmdpb::StatusResponse;
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_;
}
inline ::raft_cmdpb::StatusResponse* RaftCmdResponse::release_status_response() {
  clear_has_status_response();
  ::raft_cmdpb::StatusResponse* temp = status_response_;
  status_response_ = NULL;
  return temp;
}
inline void RaftCmdResponse::set_allocated_status_response(::raft_cmdpb::StatusResponse* status_response) {
  delete status_response_;
  status_response_ = status_response;
  if (status_response) {
    set_has_status_response();
  } else {
    clear_has_status_response();
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.status_response)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft_cmdpb::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::CmdType>() {
  return ::raft_cmdpb::CmdType_descriptor();
}
template <> struct is_proto_enum< ::raft_cmdpb::AdminCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::AdminCmdType>() {
  return ::raft_cmdpb::AdminCmdType_descriptor();
}
template <> struct is_proto_enum< ::raft_cmdpb::StatusCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::StatusCmdType>() {
  return ::raft_cmdpb::StatusCmdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5fcmdpb_2eproto__INCLUDED
