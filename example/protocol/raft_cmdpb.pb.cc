// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_cmdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_cmdpb {

namespace {

const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyHashRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyHashRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyHashResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyHashResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftRequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftRequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5fcmdpb_2eproto() {
  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_cmdpb.proto");
  GOOGLE_CHECK(file != NULL);
  GetRequest_descriptor_ = file->message_type(0);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
  };
  GetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRequest));
  GetResponse_descriptor_ = file->message_type(1);
  static const int GetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, flag_),
  };
  GetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetResponse));
  PutRequest_descriptor_ = file->message_type(2);
  static const int PutRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, size_),
  };
  PutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::default_instance_,
      PutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutRequest));
  PutResponse_descriptor_ = file->message_type(3);
  static const int PutResponse_offsets_[1] = {
  };
  PutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::default_instance_,
      PutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutResponse));
  DeleteRequest_descriptor_ = file->message_type(4);
  static const int DeleteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
  };
  DeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::default_instance_,
      DeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRequest));
  DeleteResponse_descriptor_ = file->message_type(5);
  static const int DeleteResponse_offsets_[1] = {
  };
  DeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::default_instance_,
      DeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteResponse));
  SnapRequest_descriptor_ = file->message_type(6);
  static const int SnapRequest_offsets_[1] = {
  };
  SnapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapRequest_descriptor_,
      SnapRequest::default_instance_,
      SnapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapRequest));
  SnapResponse_descriptor_ = file->message_type(7);
  static const int SnapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, region_),
  };
  SnapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapResponse_descriptor_,
      SnapResponse::default_instance_,
      SnapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapResponse));
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, snap_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(9);
  static const int Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, snap_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  ChangePeerRequest_descriptor_ = file->message_type(10);
  static const int ChangePeerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, peer_),
  };
  ChangePeerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePeerRequest_descriptor_,
      ChangePeerRequest::default_instance_,
      ChangePeerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePeerRequest));
  ChangePeerResponse_descriptor_ = file->message_type(11);
  static const int ChangePeerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, region_),
  };
  ChangePeerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePeerResponse_descriptor_,
      ChangePeerResponse::default_instance_,
      ChangePeerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePeerResponse));
  SplitRequest_descriptor_ = file->message_type(12);
  static const int SplitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, split_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_peer_ids_),
  };
  SplitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitRequest_descriptor_,
      SplitRequest::default_instance_,
      SplitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitRequest));
  SplitResponse_descriptor_ = file->message_type(13);
  static const int SplitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, right_),
  };
  SplitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitResponse_descriptor_,
      SplitResponse::default_instance_,
      SplitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitResponse));
  CompactLogRequest_descriptor_ = file->message_type(14);
  static const int CompactLogRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_term_),
  };
  CompactLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactLogRequest_descriptor_,
      CompactLogRequest::default_instance_,
      CompactLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactLogRequest));
  CompactLogResponse_descriptor_ = file->message_type(15);
  static const int CompactLogResponse_offsets_[1] = {
  };
  CompactLogResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactLogResponse_descriptor_,
      CompactLogResponse::default_instance_,
      CompactLogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactLogResponse));
  TransferLeaderRequest_descriptor_ = file->message_type(16);
  static const int TransferLeaderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, peer_),
  };
  TransferLeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeaderRequest_descriptor_,
      TransferLeaderRequest::default_instance_,
      TransferLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeaderRequest));
  TransferLeaderResponse_descriptor_ = file->message_type(17);
  static const int TransferLeaderResponse_offsets_[1] = {
  };
  TransferLeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferLeaderResponse_descriptor_,
      TransferLeaderResponse::default_instance_,
      TransferLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferLeaderResponse));
  VerifyHashRequest_descriptor_ = file->message_type(18);
  static const int VerifyHashRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, hash_),
  };
  VerifyHashRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyHashRequest_descriptor_,
      VerifyHashRequest::default_instance_,
      VerifyHashRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyHashRequest));
  VerifyHashResponse_descriptor_ = file->message_type(19);
  static const int VerifyHashResponse_offsets_[1] = {
  };
  VerifyHashResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyHashResponse_descriptor_,
      VerifyHashResponse::default_instance_,
      VerifyHashResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyHashResponse));
  AdminRequest_descriptor_ = file->message_type(20);
  static const int AdminRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, verify_hash_),
  };
  AdminRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminRequest_descriptor_,
      AdminRequest::default_instance_,
      AdminRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminRequest));
  AdminResponse_descriptor_ = file->message_type(21);
  static const int AdminResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, verify_hash_),
  };
  AdminResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminResponse_descriptor_,
      AdminResponse::default_instance_,
      AdminResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminResponse));
  RegionLeaderRequest_descriptor_ = file->message_type(22);
  static const int RegionLeaderRequest_offsets_[1] = {
  };
  RegionLeaderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLeaderRequest_descriptor_,
      RegionLeaderRequest::default_instance_,
      RegionLeaderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLeaderRequest));
  RegionLeaderResponse_descriptor_ = file->message_type(23);
  static const int RegionLeaderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, leader_),
  };
  RegionLeaderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLeaderResponse_descriptor_,
      RegionLeaderResponse::default_instance_,
      RegionLeaderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLeaderResponse));
  RegionDetailRequest_descriptor_ = file->message_type(24);
  static const int RegionDetailRequest_offsets_[1] = {
  };
  RegionDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionDetailRequest_descriptor_,
      RegionDetailRequest::default_instance_,
      RegionDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionDetailRequest));
  RegionDetailResponse_descriptor_ = file->message_type(25);
  static const int RegionDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, leader_),
  };
  RegionDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionDetailResponse_descriptor_,
      RegionDetailResponse::default_instance_,
      RegionDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionDetailResponse));
  StatusRequest_descriptor_ = file->message_type(26);
  static const int StatusRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, region_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, region_detail_),
  };
  StatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::default_instance_,
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRequest));
  StatusResponse_descriptor_ = file->message_type(27);
  static const int StatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, region_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, region_detail_),
  };
  StatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusResponse));
  RaftRequestHeader_descriptor_ = file->message_type(28);
  static const int RaftRequestHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, read_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, term_),
  };
  RaftRequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftRequestHeader_descriptor_,
      RaftRequestHeader::default_instance_,
      RaftRequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftRequestHeader));
  RaftResponseHeader_descriptor_ = file->message_type(29);
  static const int RaftResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, current_term_),
  };
  RaftResponseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftResponseHeader_descriptor_,
      RaftResponseHeader::default_instance_,
      RaftResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftResponseHeader));
  RaftCmdRequest_descriptor_ = file->message_type(30);
  static const int RaftCmdRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, admin_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, status_request_),
  };
  RaftCmdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftCmdRequest_descriptor_,
      RaftCmdRequest::default_instance_,
      RaftCmdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftCmdRequest));
  RaftCmdResponse_descriptor_ = file->message_type(31);
  static const int RaftCmdResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, responses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, admin_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, status_response_),
  };
  RaftCmdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftCmdResponse_descriptor_,
      RaftCmdResponse::default_instance_,
      RaftCmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftCmdResponse));
  CmdType_descriptor_ = file->enum_type(0);
  AdminCmdType_descriptor_ = file->enum_type(1);
  StatusCmdType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5fcmdpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutRequest_descriptor_, &PutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutResponse_descriptor_, &PutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRequest_descriptor_, &DeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteResponse_descriptor_, &DeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapRequest_descriptor_, &SnapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapResponse_descriptor_, &SnapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePeerRequest_descriptor_, &ChangePeerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePeerResponse_descriptor_, &ChangePeerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitRequest_descriptor_, &SplitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitResponse_descriptor_, &SplitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactLogRequest_descriptor_, &CompactLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactLogResponse_descriptor_, &CompactLogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeaderRequest_descriptor_, &TransferLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferLeaderResponse_descriptor_, &TransferLeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyHashRequest_descriptor_, &VerifyHashRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyHashResponse_descriptor_, &VerifyHashResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminRequest_descriptor_, &AdminRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminResponse_descriptor_, &AdminResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLeaderRequest_descriptor_, &RegionLeaderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLeaderResponse_descriptor_, &RegionLeaderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionDetailRequest_descriptor_, &RegionDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionDetailResponse_descriptor_, &RegionDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRequest_descriptor_, &StatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusResponse_descriptor_, &StatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftRequestHeader_descriptor_, &RaftRequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftResponseHeader_descriptor_, &RaftResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftCmdRequest_descriptor_, &RaftCmdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftCmdResponse_descriptor_, &RaftCmdResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fcmdpb_2eproto() {
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete PutRequest::default_instance_;
  delete PutRequest_reflection_;
  delete PutResponse::default_instance_;
  delete PutResponse_reflection_;
  delete DeleteRequest::default_instance_;
  delete DeleteRequest_reflection_;
  delete DeleteResponse::default_instance_;
  delete DeleteResponse_reflection_;
  delete SnapRequest::default_instance_;
  delete SnapRequest_reflection_;
  delete SnapResponse::default_instance_;
  delete SnapResponse_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete ChangePeerRequest::default_instance_;
  delete ChangePeerRequest_reflection_;
  delete ChangePeerResponse::default_instance_;
  delete ChangePeerResponse_reflection_;
  delete SplitRequest::default_instance_;
  delete SplitRequest_reflection_;
  delete SplitResponse::default_instance_;
  delete SplitResponse_reflection_;
  delete CompactLogRequest::default_instance_;
  delete CompactLogRequest_reflection_;
  delete CompactLogResponse::default_instance_;
  delete CompactLogResponse_reflection_;
  delete TransferLeaderRequest::default_instance_;
  delete TransferLeaderRequest_reflection_;
  delete TransferLeaderResponse::default_instance_;
  delete TransferLeaderResponse_reflection_;
  delete VerifyHashRequest::default_instance_;
  delete VerifyHashRequest_reflection_;
  delete VerifyHashResponse::default_instance_;
  delete VerifyHashResponse_reflection_;
  delete AdminRequest::default_instance_;
  delete AdminRequest_reflection_;
  delete AdminResponse::default_instance_;
  delete AdminResponse_reflection_;
  delete RegionLeaderRequest::default_instance_;
  delete RegionLeaderRequest_reflection_;
  delete RegionLeaderResponse::default_instance_;
  delete RegionLeaderResponse_reflection_;
  delete RegionDetailRequest::default_instance_;
  delete RegionDetailRequest_reflection_;
  delete RegionDetailResponse::default_instance_;
  delete RegionDetailResponse_reflection_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
  delete RaftRequestHeader::default_instance_;
  delete RaftRequestHeader_reflection_;
  delete RaftResponseHeader::default_instance_;
  delete RaftResponseHeader_reflection_;
  delete RaftCmdRequest::default_instance_;
  delete RaftCmdRequest_reflection_;
  delete RaftCmdResponse::default_instance_;
  delete RaftCmdResponse_reflection_;
}

void protobuf_AddDesc_raft_5fcmdpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020raft_cmdpb.proto\022\nraft_cmdpb\032\014metapb.p"
    "roto\032\rerrorpb.proto\032\reraftpb.proto\"%\n\nGe"
    "tRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\004\"*\n\013Get"
    "Response\022\r\n\005value\030\001 \001(\014\022\014\n\004flag\030\002 \001(\004\"R\n"
    "\nPutRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\004\022\r\n\005"
    "value\030\003 \001(\014\022\016\n\006offset\030\004 \001(\004\022\014\n\004size\030\005 \001("
    "\004\"\r\n\013PutResponse\"(\n\rDeleteRequest\022\n\n\002cf\030"
    "\001 \001(\t\022\013\n\003key\030\002 \001(\004\"\020\n\016DeleteResponse\"\r\n\013"
    "SnapRequest\".\n\014SnapResponse\022\036\n\006region\030\001 "
    "\001(\0132\016.metapb.Region\"\314\001\n\007Request\022%\n\010cmd_t"
    "ype\030\001 \001(\0162\023.raft_cmdpb.CmdType\022#\n\003get\030\002 "
    "\001(\0132\026.raft_cmdpb.GetRequest\022#\n\003put\030\004 \001(\013"
    "2\026.raft_cmdpb.PutRequest\022)\n\006delete\030\005 \001(\013"
    "2\031.raft_cmdpb.DeleteRequest\022%\n\004snap\030\006 \001("
    "\0132\027.raft_cmdpb.SnapRequest\"\321\001\n\010Response\022"
    "%\n\010cmd_type\030\001 \001(\0162\023.raft_cmdpb.CmdType\022$"
    "\n\003get\030\002 \001(\0132\027.raft_cmdpb.GetResponse\022$\n\003"
    "put\030\004 \001(\0132\027.raft_cmdpb.PutResponse\022*\n\006de"
    "lete\030\005 \001(\0132\032.raft_cmdpb.DeleteResponse\022&"
    "\n\004snap\030\006 \001(\0132\030.raft_cmdpb.SnapResponse\"]"
    "\n\021ChangePeerRequest\022,\n\013change_type\030\001 \001(\016"
    "2\027.eraftpb.ConfChangeType\022\032\n\004peer\030\002 \001(\0132"
    "\014.metapb.Peer\"4\n\022ChangePeerResponse\022\036\n\006r"
    "egion\030\001 \001(\0132\016.metapb.Region\"N\n\014SplitRequ"
    "est\022\021\n\tsplit_key\030\001 \001(\014\022\025\n\rnew_region_id\030"
    "\002 \001(\004\022\024\n\014new_peer_ids\030\003 \003(\004\"L\n\rSplitResp"
    "onse\022\034\n\004left\030\001 \001(\0132\016.metapb.Region\022\035\n\005ri"
    "ght\030\002 \001(\0132\016.metapb.Region\"@\n\021CompactLogR"
    "equest\022\025\n\rcompact_index\030\001 \001(\004\022\024\n\014compact"
    "_term\030\002 \001(\004\"\024\n\022CompactLogResponse\"3\n\025Tra"
    "nsferLeaderRequest\022\032\n\004peer\030\001 \001(\0132\014.metap"
    "b.Peer\"\030\n\026TransferLeaderResponse\"0\n\021Veri"
    "fyHashRequest\022\r\n\005index\030\001 \001(\004\022\014\n\004hash\030\002 \001"
    "(\014\"\024\n\022VerifyHashResponse\"\273\002\n\014AdminReques"
    "t\022*\n\010cmd_type\030\001 \001(\0162\030.raft_cmdpb.AdminCm"
    "dType\0222\n\013change_peer\030\002 \001(\0132\035.raft_cmdpb."
    "ChangePeerRequest\022\'\n\005split\030\003 \001(\0132\030.raft_"
    "cmdpb.SplitRequest\0222\n\013compact_log\030\004 \001(\0132"
    "\035.raft_cmdpb.CompactLogRequest\022:\n\017transf"
    "er_leader\030\005 \001(\0132!.raft_cmdpb.TransferLea"
    "derRequest\0222\n\013verify_hash\030\006 \001(\0132\035.raft_c"
    "mdpb.VerifyHashRequest\"\301\002\n\rAdminResponse"
    "\022*\n\010cmd_type\030\001 \001(\0162\030.raft_cmdpb.AdminCmd"
    "Type\0223\n\013change_peer\030\002 \001(\0132\036.raft_cmdpb.C"
    "hangePeerResponse\022(\n\005split\030\003 \001(\0132\031.raft_"
    "cmdpb.SplitResponse\0223\n\013compact_log\030\004 \001(\013"
    "2\036.raft_cmdpb.CompactLogResponse\022;\n\017tran"
    "sfer_leader\030\005 \001(\0132\".raft_cmdpb.TransferL"
    "eaderResponse\0223\n\013verify_hash\030\006 \001(\0132\036.raf"
    "t_cmdpb.VerifyHashResponse\"\025\n\023RegionLead"
    "erRequest\"4\n\024RegionLeaderResponse\022\034\n\006lea"
    "der\030\001 \001(\0132\014.metapb.Peer\"\025\n\023RegionDetailR"
    "equest\"T\n\024RegionDetailResponse\022\036\n\006region"
    "\030\001 \001(\0132\016.metapb.Region\022\034\n\006leader\030\002 \001(\0132\014"
    ".metapb.Peer\"\254\001\n\rStatusRequest\022+\n\010cmd_ty"
    "pe\030\001 \001(\0162\031.raft_cmdpb.StatusCmdType\0226\n\rr"
    "egion_leader\030\002 \001(\0132\037.raft_cmdpb.RegionLe"
    "aderRequest\0226\n\rregion_detail\030\003 \001(\0132\037.raf"
    "t_cmdpb.RegionDetailRequest\"\257\001\n\016StatusRe"
    "sponse\022+\n\010cmd_type\030\001 \001(\0162\031.raft_cmdpb.St"
    "atusCmdType\0227\n\rregion_leader\030\002 \001(\0132 .raf"
    "t_cmdpb.RegionLeaderResponse\0227\n\rregion_d"
    "etail\030\003 \001(\0132 .raft_cmdpb.RegionDetailRes"
    "ponse\"\236\001\n\021RaftRequestHeader\022\021\n\tregion_id"
    "\030\001 \001(\004\022\032\n\004peer\030\002 \001(\0132\014.metapb.Peer\022\023\n\013re"
    "ad_quorum\030\003 \001(\010\022\014\n\004uuid\030\004 \001(\014\022)\n\014region_"
    "epoch\030\005 \001(\0132\023.metapb.RegionEpoch\022\014\n\004term"
    "\030\006 \001(\004\"W\n\022RaftResponseHeader\022\035\n\005error\030\001 "
    "\001(\0132\016.errorpb.Error\022\014\n\004uuid\030\002 \001(\014\022\024\n\014cur"
    "rent_term\030\003 \001(\004\"\312\001\n\016RaftCmdRequest\022-\n\006he"
    "ader\030\001 \001(\0132\035.raft_cmdpb.RaftRequestHeade"
    "r\022%\n\010requests\030\002 \003(\0132\023.raft_cmdpb.Request"
    "\022/\n\radmin_request\030\003 \001(\0132\030.raft_cmdpb.Adm"
    "inRequest\0221\n\016status_request\030\004 \001(\0132\031.raft"
    "_cmdpb.StatusRequest\"\322\001\n\017RaftCmdResponse"
    "\022.\n\006header\030\001 \001(\0132\036.raft_cmdpb.RaftRespon"
    "seHeader\022\'\n\tresponses\030\002 \003(\0132\024.raft_cmdpb"
    ".Response\0221\n\016admin_response\030\003 \001(\0132\031.raft"
    "_cmdpb.AdminResponse\0223\n\017status_response\030"
    "\004 \001(\0132\032.raft_cmdpb.StatusResponse*>\n\007Cmd"
    "Type\022\013\n\007Invalid\020\000\022\007\n\003Get\020\001\022\007\n\003Put\020\003\022\n\n\006D"
    "elete\020\004\022\010\n\004Snap\020\005*\200\001\n\014AdminCmdType\022\020\n\014In"
    "validAdmin\020\000\022\016\n\nChangePeer\020\001\022\t\n\005Split\020\002\022"
    "\016\n\nCompactLog\020\003\022\022\n\016TransferLeader\020\004\022\017\n\013C"
    "omputeHash\020\005\022\016\n\nVerifyHash\020\006*F\n\rStatusCm"
    "dType\022\021\n\rInvalidStatus\020\000\022\020\n\014RegionLeader"
    "\020\001\022\020\n\014RegionDetail\020\002", 3460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_cmdpb.proto", &protobuf_RegisterTypes);
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  PutRequest::default_instance_ = new PutRequest();
  PutResponse::default_instance_ = new PutResponse();
  DeleteRequest::default_instance_ = new DeleteRequest();
  DeleteResponse::default_instance_ = new DeleteResponse();
  SnapRequest::default_instance_ = new SnapRequest();
  SnapResponse::default_instance_ = new SnapResponse();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  ChangePeerRequest::default_instance_ = new ChangePeerRequest();
  ChangePeerResponse::default_instance_ = new ChangePeerResponse();
  SplitRequest::default_instance_ = new SplitRequest();
  SplitResponse::default_instance_ = new SplitResponse();
  CompactLogRequest::default_instance_ = new CompactLogRequest();
  CompactLogResponse::default_instance_ = new CompactLogResponse();
  TransferLeaderRequest::default_instance_ = new TransferLeaderRequest();
  TransferLeaderResponse::default_instance_ = new TransferLeaderResponse();
  VerifyHashRequest::default_instance_ = new VerifyHashRequest();
  VerifyHashResponse::default_instance_ = new VerifyHashResponse();
  AdminRequest::default_instance_ = new AdminRequest();
  AdminResponse::default_instance_ = new AdminResponse();
  RegionLeaderRequest::default_instance_ = new RegionLeaderRequest();
  RegionLeaderResponse::default_instance_ = new RegionLeaderResponse();
  RegionDetailRequest::default_instance_ = new RegionDetailRequest();
  RegionDetailResponse::default_instance_ = new RegionDetailResponse();
  StatusRequest::default_instance_ = new StatusRequest();
  StatusResponse::default_instance_ = new StatusResponse();
  RaftRequestHeader::default_instance_ = new RaftRequestHeader();
  RaftResponseHeader::default_instance_ = new RaftResponseHeader();
  RaftCmdRequest::default_instance_ = new RaftCmdRequest();
  RaftCmdResponse::default_instance_ = new RaftCmdResponse();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  PutRequest::default_instance_->InitAsDefaultInstance();
  PutResponse::default_instance_->InitAsDefaultInstance();
  DeleteRequest::default_instance_->InitAsDefaultInstance();
  DeleteResponse::default_instance_->InitAsDefaultInstance();
  SnapRequest::default_instance_->InitAsDefaultInstance();
  SnapResponse::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ChangePeerRequest::default_instance_->InitAsDefaultInstance();
  ChangePeerResponse::default_instance_->InitAsDefaultInstance();
  SplitRequest::default_instance_->InitAsDefaultInstance();
  SplitResponse::default_instance_->InitAsDefaultInstance();
  CompactLogRequest::default_instance_->InitAsDefaultInstance();
  CompactLogResponse::default_instance_->InitAsDefaultInstance();
  TransferLeaderRequest::default_instance_->InitAsDefaultInstance();
  TransferLeaderResponse::default_instance_->InitAsDefaultInstance();
  VerifyHashRequest::default_instance_->InitAsDefaultInstance();
  VerifyHashResponse::default_instance_->InitAsDefaultInstance();
  AdminRequest::default_instance_->InitAsDefaultInstance();
  AdminResponse::default_instance_->InitAsDefaultInstance();
  RegionLeaderRequest::default_instance_->InitAsDefaultInstance();
  RegionLeaderResponse::default_instance_->InitAsDefaultInstance();
  RegionDetailRequest::default_instance_->InitAsDefaultInstance();
  RegionDetailResponse::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  RaftRequestHeader::default_instance_->InitAsDefaultInstance();
  RaftResponseHeader::default_instance_->InitAsDefaultInstance();
  RaftCmdRequest::default_instance_->InitAsDefaultInstance();
  RaftCmdResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fcmdpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fcmdpb_2eproto {
  StaticDescriptorInitializer_raft_5fcmdpb_2eproto() {
    protobuf_AddDesc_raft_5fcmdpb_2eproto();
  }
} static_descriptor_initializer_raft_5fcmdpb_2eproto_;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminCmdType_descriptor_;
}
bool AdminCmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCmdType_descriptor_;
}
bool StatusCmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GetRequest::kCfFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

GetRequest::GetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetRequest)
}

void GetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cf_;
  }
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New() const {
  return new GetRequest;
}

void GetRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cf()) {
      if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cf_->clear();
      }
    }
    key_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint64 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetRequest)
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cf = 1;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cf());
    }

    // optional uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cf()) {
      set_cf(from.cf());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other != this) {
    std::swap(cf_, other->cf_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetResponse::kValueFieldNumber;
const int GetResponse::kFlagFieldNumber;
#endif  // !_MSC_VER

GetResponse::GetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New() const {
  return new GetResponse;
}

void GetResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    flag_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint64 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetResponse)
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint64 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetResponse)
}

::google::protobuf::uint8* GetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetResponse)
  // optional bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // optional uint64 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetResponse)
  return target;
}

int GetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint64 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutRequest::kCfFieldNumber;
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
const int PutRequest::kOffsetFieldNumber;
const int PutRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

PutRequest::PutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutRequest)
}

void PutRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = GOOGLE_ULONGLONG(0);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cf_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

PutRequest* PutRequest::default_instance_ = NULL;

PutRequest* PutRequest::New() const {
  return new PutRequest;
}

void PutRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PutRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(offset_, size_);
    if (has_cf()) {
      if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cf_->clear();
      }
    }
    key_ = GOOGLE_ULONGLONG(0);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint64 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional uint64 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }

      // optional uint64 size = 5;
      case 5: {
        if (tag == 40) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // optional uint64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offset(), output);
  }

  // optional uint64 size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutRequest)
}

::google::protobuf::uint8* PutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional uint64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offset(), target);
  }

  // optional uint64 size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutRequest)
  return target;
}

int PutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cf = 1;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cf());
    }

    // optional uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint64 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint64 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cf()) {
      set_cf(from.cf());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other != this) {
    std::swap(cf_, other->cf_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PutResponse::PutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutResponse)
}

void PutResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

PutResponse* PutResponse::default_instance_ = NULL;

PutResponse* PutResponse::New() const {
  return new PutResponse;
}

void PutResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutResponse)
}

::google::protobuf::uint8* PutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutResponse)
  return target;
}

int PutResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRequest::kCfFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::InitAsDefaultInstance() {
}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cf_;
  }
  if (this != default_instance_) {
  }
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

DeleteRequest* DeleteRequest::default_instance_ = NULL;

DeleteRequest* DeleteRequest::New() const {
  return new DeleteRequest;
}

void DeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cf()) {
      if (cf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cf_->clear();
      }
    }
    key_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint64 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRequest)
  // optional string cf = 1;
  if (has_cf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRequest)
  return target;
}

int DeleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cf = 1;
    if (has_cf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cf());
    }

    // optional uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cf()) {
      set_cf(from.cf());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {

  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other != this) {
    std::swap(cf_, other->cf_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequest_descriptor_;
  metadata.reflection = DeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::InitAsDefaultInstance() {
}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

DeleteResponse* DeleteResponse::default_instance_ = NULL;

DeleteResponse* DeleteResponse::New() const {
  return new DeleteResponse;
}

void DeleteResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteResponse)
  return target;
}

int DeleteResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {

  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponse_descriptor_;
  metadata.reflection = DeleteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SnapRequest::SnapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::InitAsDefaultInstance() {
}

SnapRequest::SnapRequest(const SnapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapRequest::~SnapRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapRequest)
  SharedDtor();
}

void SnapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapRequest_descriptor_;
}

const SnapRequest& SnapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

SnapRequest* SnapRequest::default_instance_ = NULL;

SnapRequest* SnapRequest::New() const {
  return new SnapRequest;
}

void SnapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapRequest)
  return false;
#undef DO_
}

void SnapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapRequest)
}

::google::protobuf::uint8* SnapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapRequest)
  return target;
}

int SnapRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapRequest::MergeFrom(const SnapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapRequest::CopyFrom(const SnapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapRequest::IsInitialized() const {

  return true;
}

void SnapRequest::Swap(SnapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapRequest_descriptor_;
  metadata.reflection = SnapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapResponse::kRegionFieldNumber;
#endif  // !_MSC_VER

SnapResponse::SnapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

SnapResponse::SnapResponse(const SnapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapResponse::~SnapResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapResponse)
  SharedDtor();
}

void SnapResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void SnapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapResponse_descriptor_;
}

const SnapResponse& SnapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

SnapResponse* SnapResponse::default_instance_ = NULL;

SnapResponse* SnapResponse::New() const {
  return new SnapResponse;
}

void SnapResponse::Clear() {
  if (has_region()) {
    if (region_ != NULL) region_->::metapb::Region::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapResponse)
  return false;
#undef DO_
}

void SnapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapResponse)
}

::google::protobuf::uint8* SnapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapResponse)
  return target;
}

int SnapResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapResponse::MergeFrom(const SnapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapResponse::CopyFrom(const SnapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapResponse::IsInitialized() const {

  return true;
}

void SnapResponse::Swap(SnapResponse* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapResponse_descriptor_;
  metadata.reflection = SnapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kCmdTypeFieldNumber;
const int Request::kGetFieldNumber;
const int Request::kPutFieldNumber;
const int Request::kDeleteFieldNumber;
const int Request::kSnapFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Request)
}

void Request::InitAsDefaultInstance() {
  get_ = const_cast< ::raft_cmdpb::GetRequest*>(&::raft_cmdpb::GetRequest::default_instance());
  put_ = const_cast< ::raft_cmdpb::PutRequest*>(&::raft_cmdpb::PutRequest::default_instance());
  delete__ = const_cast< ::raft_cmdpb::DeleteRequest*>(&::raft_cmdpb::DeleteRequest::default_instance());
  snap_ = const_cast< ::raft_cmdpb::SnapRequest*>(&::raft_cmdpb::SnapRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
  snap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete get_;
    delete put_;
    delete delete__;
    delete snap_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_type_ = 0;
    if (has_get()) {
      if (get_ != NULL) get_->::raft_cmdpb::GetRequest::Clear();
    }
    if (has_put()) {
      if (put_ != NULL) put_->::raft_cmdpb::PutRequest::Clear();
    }
    if (has_delete_()) {
      if (delete__ != NULL) delete__->::raft_cmdpb::DeleteRequest::Clear();
    }
    if (has_snap()) {
      if (snap_ != NULL) snap_->::raft_cmdpb::SnapRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_cmdpb.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_cmdpb.PutRequest put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_cmdpb.DeleteRequest delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_snap;
        break;
      }

      // optional .raft_cmdpb.SnapRequest snap = 6;
      case 6: {
        if (tag == 50) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Request)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get(), output);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->put(), output);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->delete_(), output);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->snap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Request)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get(), target);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->put(), target);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->delete_(), target);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->snap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.CmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.GetRequest get = 2;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
    }

    // optional .raft_cmdpb.PutRequest put = 4;
    if (has_put()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put());
    }

    // optional .raft_cmdpb.DeleteRequest delete = 5;
    if (has_delete_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_());
    }

    // optional .raft_cmdpb.SnapRequest snap = 6;
    if (has_snap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_get()) {
      mutable_get()->::raft_cmdpb::GetRequest::MergeFrom(from.get());
    }
    if (from.has_put()) {
      mutable_put()->::raft_cmdpb::PutRequest::MergeFrom(from.put());
    }
    if (from.has_delete_()) {
      mutable_delete_()->::raft_cmdpb::DeleteRequest::MergeFrom(from.delete_());
    }
    if (from.has_snap()) {
      mutable_snap()->::raft_cmdpb::SnapRequest::MergeFrom(from.snap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(get_, other->get_);
    std::swap(put_, other->put_);
    std::swap(delete__, other->delete__);
    std::swap(snap_, other->snap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kCmdTypeFieldNumber;
const int Response::kGetFieldNumber;
const int Response::kPutFieldNumber;
const int Response::kDeleteFieldNumber;
const int Response::kSnapFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Response)
}

void Response::InitAsDefaultInstance() {
  get_ = const_cast< ::raft_cmdpb::GetResponse*>(&::raft_cmdpb::GetResponse::default_instance());
  put_ = const_cast< ::raft_cmdpb::PutResponse*>(&::raft_cmdpb::PutResponse::default_instance());
  delete__ = const_cast< ::raft_cmdpb::DeleteResponse*>(&::raft_cmdpb::DeleteResponse::default_instance());
  snap_ = const_cast< ::raft_cmdpb::SnapResponse*>(&::raft_cmdpb::SnapResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
  snap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete get_;
    delete put_;
    delete delete__;
    delete snap_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_type_ = 0;
    if (has_get()) {
      if (get_ != NULL) get_->::raft_cmdpb::GetResponse::Clear();
    }
    if (has_put()) {
      if (put_ != NULL) put_->::raft_cmdpb::PutResponse::Clear();
    }
    if (has_delete_()) {
      if (delete__ != NULL) delete__->::raft_cmdpb::DeleteResponse::Clear();
    }
    if (has_snap()) {
      if (snap_ != NULL) snap_->::raft_cmdpb::SnapResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_cmdpb.GetResponse get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_cmdpb.PutResponse put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_cmdpb.DeleteResponse delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_snap;
        break;
      }

      // optional .raft_cmdpb.SnapResponse snap = 6;
      case 6: {
        if (tag == 50) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Response)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get(), output);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->put(), output);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->delete_(), output);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->snap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Response)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get(), target);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->put(), target);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->delete_(), target);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->snap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.CmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.GetResponse get = 2;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
    }

    // optional .raft_cmdpb.PutResponse put = 4;
    if (has_put()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put());
    }

    // optional .raft_cmdpb.DeleteResponse delete = 5;
    if (has_delete_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_());
    }

    // optional .raft_cmdpb.SnapResponse snap = 6;
    if (has_snap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_get()) {
      mutable_get()->::raft_cmdpb::GetResponse::MergeFrom(from.get());
    }
    if (from.has_put()) {
      mutable_put()->::raft_cmdpb::PutResponse::MergeFrom(from.put());
    }
    if (from.has_delete_()) {
      mutable_delete_()->::raft_cmdpb::DeleteResponse::MergeFrom(from.delete_());
    }
    if (from.has_snap()) {
      mutable_snap()->::raft_cmdpb::SnapResponse::MergeFrom(from.snap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(get_, other->get_);
    std::swap(put_, other->put_);
    std::swap(delete__, other->delete__);
    std::swap(snap_, other->snap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePeerRequest::kChangeTypeFieldNumber;
const int ChangePeerRequest::kPeerFieldNumber;
#endif  // !_MSC_VER

ChangePeerRequest::ChangePeerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

ChangePeerRequest::ChangePeerRequest(const ChangePeerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 0;
  peer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePeerRequest::~ChangePeerRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerRequest)
  SharedDtor();
}

void ChangePeerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void ChangePeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerRequest_descriptor_;
}

const ChangePeerRequest& ChangePeerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

ChangePeerRequest* ChangePeerRequest::default_instance_ = NULL;

ChangePeerRequest* ChangePeerRequest::New() const {
  return new ChangePeerRequest;
}

void ChangePeerRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    change_type_ = 0;
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eraftpb::ConfChangeType_IsValid(value)) {
            set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerRequest)
  return false;
#undef DO_
}

void ChangePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerRequest)
}

::google::protobuf::uint8* ChangePeerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerRequest)
  return target;
}

int ChangePeerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eraftpb.ConfChangeType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional .metapb.Peer peer = 2;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePeerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePeerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePeerRequest::MergeFrom(const ChangePeerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerRequest::CopyFrom(const ChangePeerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerRequest::IsInitialized() const {

  return true;
}

void ChangePeerRequest::Swap(ChangePeerRequest* other) {
  if (other != this) {
    std::swap(change_type_, other->change_type_);
    std::swap(peer_, other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerRequest_descriptor_;
  metadata.reflection = ChangePeerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePeerResponse::kRegionFieldNumber;
#endif  // !_MSC_VER

ChangePeerResponse::ChangePeerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

ChangePeerResponse::ChangePeerResponse(const ChangePeerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePeerResponse::~ChangePeerResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerResponse)
  SharedDtor();
}

void ChangePeerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void ChangePeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerResponse_descriptor_;
}

const ChangePeerResponse& ChangePeerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

ChangePeerResponse* ChangePeerResponse::default_instance_ = NULL;

ChangePeerResponse* ChangePeerResponse::New() const {
  return new ChangePeerResponse;
}

void ChangePeerResponse::Clear() {
  if (has_region()) {
    if (region_ != NULL) region_->::metapb::Region::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerResponse)
  return false;
#undef DO_
}

void ChangePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerResponse)
}

::google::protobuf::uint8* ChangePeerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerResponse)
  return target;
}

int ChangePeerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePeerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePeerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePeerResponse::MergeFrom(const ChangePeerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerResponse::CopyFrom(const ChangePeerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerResponse::IsInitialized() const {

  return true;
}

void ChangePeerResponse::Swap(ChangePeerResponse* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerResponse_descriptor_;
  metadata.reflection = ChangePeerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kNewRegionIdFieldNumber;
const int SplitRequest::kNewPeerIdsFieldNumber;
#endif  // !_MSC_VER

SplitRequest::SplitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::InitAsDefaultInstance() {
}

SplitRequest::SplitRequest(const SplitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  split_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_region_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  if (split_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete split_key_;
  }
  if (this != default_instance_) {
  }
}

void SplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRequest_descriptor_;
}

const SplitRequest& SplitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

SplitRequest* SplitRequest::default_instance_ = NULL;

SplitRequest* SplitRequest::New() const {
  return new SplitRequest;
}

void SplitRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_split_key()) {
      if (split_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        split_key_->clear();
      }
    }
    new_region_id_ = GOOGLE_ULONGLONG(0);
  }
  new_peer_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes split_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_region_id;
        break;
      }

      // optional uint64 new_region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
          set_has_new_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_new_peer_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_peer_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitRequest)
  return false;
#undef DO_
}

void SplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitRequest)
  // optional bytes split_key = 1;
  if (has_split_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  // optional uint64 new_region_id = 2;
  if (has_new_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->new_peer_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitRequest)
}

::google::protobuf::uint8* SplitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitRequest)
  // optional bytes split_key = 1;
  if (has_split_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  // optional uint64 new_region_id = 2;
  if (has_new_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->new_peer_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitRequest)
  return target;
}

int SplitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes split_key = 1;
    if (has_split_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->split_key());
    }

    // optional uint64 new_region_id = 2;
    if (has_new_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_region_id());
    }

  }
  // repeated uint64 new_peer_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->new_peer_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    total_size += 1 * this->new_peer_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_split_key()) {
      set_split_key(from.split_key());
    }
    if (from.has_new_region_id()) {
      set_new_region_id(from.new_region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRequest::IsInitialized() const {

  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other != this) {
    std::swap(split_key_, other->split_key_);
    std::swap(new_region_id_, other->new_region_id_);
    new_peer_ids_.Swap(&other->new_peer_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRequest_descriptor_;
  metadata.reflection = SplitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SplitResponse::kLeftFieldNumber;
const int SplitResponse::kRightFieldNumber;
#endif  // !_MSC_VER

SplitResponse::SplitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::InitAsDefaultInstance() {
  left_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
  right_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
}

SplitResponse::SplitResponse(const SplitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::SharedCtor() {
  _cached_size_ = 0;
  left_ = NULL;
  right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete left_;
    delete right_;
  }
}

void SplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitResponse_descriptor_;
}

const SplitResponse& SplitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

SplitResponse* SplitResponse::default_instance_ = NULL;

SplitResponse* SplitResponse::New() const {
  return new SplitResponse;
}

void SplitResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_left()) {
      if (left_ != NULL) left_->::metapb::Region::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::metapb::Region::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional .metapb.Region right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitResponse)
  return false;
#undef DO_
}

void SplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitResponse)
  // optional .metapb.Region left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->left(), output);
  }

  // optional .metapb.Region right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitResponse)
}

::google::protobuf::uint8* SplitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitResponse)
  // optional .metapb.Region left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->left(), target);
  }

  // optional .metapb.Region right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitResponse)
  return target;
}

int SplitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // optional .metapb.Region right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      mutable_left()->::metapb::Region::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::metapb::Region::MergeFrom(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitResponse::IsInitialized() const {

  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitResponse_descriptor_;
  metadata.reflection = SplitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompactLogRequest::kCompactIndexFieldNumber;
const int CompactLogRequest::kCompactTermFieldNumber;
#endif  // !_MSC_VER

CompactLogRequest::CompactLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::InitAsDefaultInstance() {
}

CompactLogRequest::CompactLogRequest(const CompactLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::SharedCtor() {
  _cached_size_ = 0;
  compact_index_ = GOOGLE_ULONGLONG(0);
  compact_term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactLogRequest::~CompactLogRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogRequest)
  SharedDtor();
}

void CompactLogRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogRequest_descriptor_;
}

const CompactLogRequest& CompactLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

CompactLogRequest* CompactLogRequest::default_instance_ = NULL;

CompactLogRequest* CompactLogRequest::New() const {
  return new CompactLogRequest;
}

void CompactLogRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CompactLogRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(compact_index_, compact_term_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 compact_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_index_)));
          set_has_compact_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compact_term;
        break;
      }

      // optional uint64 compact_term = 2;
      case 2: {
        if (tag == 16) {
         parse_compact_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_term_)));
          set_has_compact_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogRequest)
  return false;
#undef DO_
}

void CompactLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (has_compact_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->compact_index(), output);
  }

  // optional uint64 compact_term = 2;
  if (has_compact_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->compact_term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogRequest)
}

::google::protobuf::uint8* CompactLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (has_compact_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->compact_index(), target);
  }

  // optional uint64 compact_term = 2;
  if (has_compact_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->compact_term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogRequest)
  return target;
}

int CompactLogRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 compact_index = 1;
    if (has_compact_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->compact_index());
    }

    // optional uint64 compact_term = 2;
    if (has_compact_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->compact_term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactLogRequest::MergeFrom(const CompactLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compact_index()) {
      set_compact_index(from.compact_index());
    }
    if (from.has_compact_term()) {
      set_compact_term(from.compact_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogRequest::CopyFrom(const CompactLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogRequest::IsInitialized() const {

  return true;
}

void CompactLogRequest::Swap(CompactLogRequest* other) {
  if (other != this) {
    std::swap(compact_index_, other->compact_index_);
    std::swap(compact_term_, other->compact_term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogRequest_descriptor_;
  metadata.reflection = CompactLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CompactLogResponse::CompactLogResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::InitAsDefaultInstance() {
}

CompactLogResponse::CompactLogResponse(const CompactLogResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactLogResponse::~CompactLogResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogResponse)
  SharedDtor();
}

void CompactLogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogResponse_descriptor_;
}

const CompactLogResponse& CompactLogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

CompactLogResponse* CompactLogResponse::default_instance_ = NULL;

CompactLogResponse* CompactLogResponse::New() const {
  return new CompactLogResponse;
}

void CompactLogResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogResponse)
  return false;
#undef DO_
}

void CompactLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogResponse)
}

::google::protobuf::uint8* CompactLogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogResponse)
  return target;
}

int CompactLogResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactLogResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactLogResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactLogResponse::MergeFrom(const CompactLogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogResponse::CopyFrom(const CompactLogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogResponse::IsInitialized() const {

  return true;
}

void CompactLogResponse::Swap(CompactLogResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogResponse_descriptor_;
  metadata.reflection = CompactLogResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferLeaderRequest::kPeerFieldNumber;
#endif  // !_MSC_VER

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  peer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderRequest_descriptor_;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

TransferLeaderRequest* TransferLeaderRequest::default_instance_ = NULL;

TransferLeaderRequest* TransferLeaderRequest::New() const {
  return new TransferLeaderRequest;
}

void TransferLeaderRequest::Clear() {
  if (has_peer()) {
    if (peer_ != NULL) peer_->::metapb::Peer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderRequest)
  return false;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderRequest)
}

::google::protobuf::uint8* TransferLeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderRequest)
  return target;
}

int TransferLeaderRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Peer peer = 1;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {

  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other != this) {
    std::swap(peer_, other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderRequest_descriptor_;
  metadata.reflection = TransferLeaderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::InitAsDefaultInstance() {
}

TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderResponse_descriptor_;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

TransferLeaderResponse* TransferLeaderResponse::default_instance_ = NULL;

TransferLeaderResponse* TransferLeaderResponse::New() const {
  return new TransferLeaderResponse;
}

void TransferLeaderResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderResponse)
  return false;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderResponse)
}

::google::protobuf::uint8* TransferLeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderResponse)
  return target;
}

int TransferLeaderResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferLeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferLeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {

  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderResponse_descriptor_;
  metadata.reflection = TransferLeaderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyHashRequest::kIndexFieldNumber;
const int VerifyHashRequest::kHashFieldNumber;
#endif  // !_MSC_VER

VerifyHashRequest::VerifyHashRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::InitAsDefaultInstance() {
}

VerifyHashRequest::VerifyHashRequest(const VerifyHashRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyHashRequest::~VerifyHashRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashRequest)
  SharedDtor();
}

void VerifyHashRequest::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void VerifyHashRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyHashRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyHashRequest_descriptor_;
}

const VerifyHashRequest& VerifyHashRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

VerifyHashRequest* VerifyHashRequest::default_instance_ = NULL;

VerifyHashRequest* VerifyHashRequest::New() const {
  return new VerifyHashRequest;
}

void VerifyHashRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    index_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyHashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashRequest)
  return false;
#undef DO_
}

void VerifyHashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashRequest)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashRequest)
}

::google::protobuf::uint8* VerifyHashRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashRequest)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashRequest)
  return target;
}

int VerifyHashRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional bytes hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyHashRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyHashRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyHashRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyHashRequest::MergeFrom(const VerifyHashRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyHashRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashRequest::CopyFrom(const VerifyHashRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyHashRequest::IsInitialized() const {

  return true;
}

void VerifyHashRequest::Swap(VerifyHashRequest* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyHashRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyHashRequest_descriptor_;
  metadata.reflection = VerifyHashRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VerifyHashResponse::VerifyHashResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::InitAsDefaultInstance() {
}

VerifyHashResponse::VerifyHashResponse(const VerifyHashResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyHashResponse::~VerifyHashResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashResponse)
  SharedDtor();
}

void VerifyHashResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyHashResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyHashResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyHashResponse_descriptor_;
}

const VerifyHashResponse& VerifyHashResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

VerifyHashResponse* VerifyHashResponse::default_instance_ = NULL;

VerifyHashResponse* VerifyHashResponse::New() const {
  return new VerifyHashResponse;
}

void VerifyHashResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyHashResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashResponse)
  return false;
#undef DO_
}

void VerifyHashResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashResponse)
}

::google::protobuf::uint8* VerifyHashResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashResponse)
  return target;
}

int VerifyHashResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyHashResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyHashResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyHashResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyHashResponse::MergeFrom(const VerifyHashResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyHashResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashResponse::CopyFrom(const VerifyHashResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyHashResponse::IsInitialized() const {

  return true;
}

void VerifyHashResponse::Swap(VerifyHashResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyHashResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyHashResponse_descriptor_;
  metadata.reflection = VerifyHashResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminRequest::kCmdTypeFieldNumber;
const int AdminRequest::kChangePeerFieldNumber;
const int AdminRequest::kSplitFieldNumber;
const int AdminRequest::kCompactLogFieldNumber;
const int AdminRequest::kTransferLeaderFieldNumber;
const int AdminRequest::kVerifyHashFieldNumber;
#endif  // !_MSC_VER

AdminRequest::AdminRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::raft_cmdpb::ChangePeerRequest*>(&::raft_cmdpb::ChangePeerRequest::default_instance());
  split_ = const_cast< ::raft_cmdpb::SplitRequest*>(&::raft_cmdpb::SplitRequest::default_instance());
  compact_log_ = const_cast< ::raft_cmdpb::CompactLogRequest*>(&::raft_cmdpb::CompactLogRequest::default_instance());
  transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderRequest*>(&::raft_cmdpb::TransferLeaderRequest::default_instance());
  verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashRequest*>(&::raft_cmdpb::VerifyHashRequest::default_instance());
}

AdminRequest::AdminRequest(const AdminRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  change_peer_ = NULL;
  split_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  verify_hash_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != default_instance_) {
    delete change_peer_;
    delete split_;
    delete compact_log_;
    delete transfer_leader_;
    delete verify_hash_;
  }
}

void AdminRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminRequest_descriptor_;
}

const AdminRequest& AdminRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

AdminRequest* AdminRequest::default_instance_ = NULL;

AdminRequest* AdminRequest::New() const {
  return new AdminRequest;
}

void AdminRequest::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_type_ = 0;
    if (has_change_peer()) {
      if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerRequest::Clear();
    }
    if (has_split()) {
      if (split_ != NULL) split_->::raft_cmdpb::SplitRequest::Clear();
    }
    if (has_compact_log()) {
      if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogRequest::Clear();
    }
    if (has_transfer_leader()) {
      if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderRequest::Clear();
    }
    if (has_verify_hash()) {
      if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::AdminCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_split;
        break;
      }

      // optional .raft_cmdpb.SplitRequest split = 3;
      case 3: {
        if (tag == 26) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verify_hash;
        break;
      }

      // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_verify_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminRequest)
  return false;
#undef DO_
}

void AdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminRequest)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->change_peer(), output);
  }

  // optional .raft_cmdpb.SplitRequest split = 3;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->split(), output);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compact_log(), output);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->transfer_leader(), output);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->verify_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminRequest)
}

::google::protobuf::uint8* AdminRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminRequest)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->change_peer(), target);
  }

  // optional .raft_cmdpb.SplitRequest split = 3;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->split(), target);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compact_log(), target);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->transfer_leader(), target);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->verify_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminRequest)
  return target;
}

int AdminRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
    if (has_change_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_peer());
    }

    // optional .raft_cmdpb.SplitRequest split = 3;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->split());
    }

    // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
    if (has_compact_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compact_log());
    }

    // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
    if (has_transfer_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transfer_leader());
    }

    // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
    if (has_verify_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verify_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_change_peer()) {
      mutable_change_peer()->::raft_cmdpb::ChangePeerRequest::MergeFrom(from.change_peer());
    }
    if (from.has_split()) {
      mutable_split()->::raft_cmdpb::SplitRequest::MergeFrom(from.split());
    }
    if (from.has_compact_log()) {
      mutable_compact_log()->::raft_cmdpb::CompactLogRequest::MergeFrom(from.compact_log());
    }
    if (from.has_transfer_leader()) {
      mutable_transfer_leader()->::raft_cmdpb::TransferLeaderRequest::MergeFrom(from.transfer_leader());
    }
    if (from.has_verify_hash()) {
      mutable_verify_hash()->::raft_cmdpb::VerifyHashRequest::MergeFrom(from.verify_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRequest::IsInitialized() const {

  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(change_peer_, other->change_peer_);
    std::swap(split_, other->split_);
    std::swap(compact_log_, other->compact_log_);
    std::swap(transfer_leader_, other->transfer_leader_);
    std::swap(verify_hash_, other->verify_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminRequest_descriptor_;
  metadata.reflection = AdminRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminResponse::kCmdTypeFieldNumber;
const int AdminResponse::kChangePeerFieldNumber;
const int AdminResponse::kSplitFieldNumber;
const int AdminResponse::kCompactLogFieldNumber;
const int AdminResponse::kTransferLeaderFieldNumber;
const int AdminResponse::kVerifyHashFieldNumber;
#endif  // !_MSC_VER

AdminResponse::AdminResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::raft_cmdpb::ChangePeerResponse*>(&::raft_cmdpb::ChangePeerResponse::default_instance());
  split_ = const_cast< ::raft_cmdpb::SplitResponse*>(&::raft_cmdpb::SplitResponse::default_instance());
  compact_log_ = const_cast< ::raft_cmdpb::CompactLogResponse*>(&::raft_cmdpb::CompactLogResponse::default_instance());
  transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderResponse*>(&::raft_cmdpb::TransferLeaderResponse::default_instance());
  verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashResponse*>(&::raft_cmdpb::VerifyHashResponse::default_instance());
}

AdminResponse::AdminResponse(const AdminResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  change_peer_ = NULL;
  split_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  verify_hash_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  if (this != default_instance_) {
    delete change_peer_;
    delete split_;
    delete compact_log_;
    delete transfer_leader_;
    delete verify_hash_;
  }
}

void AdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminResponse_descriptor_;
}

const AdminResponse& AdminResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

AdminResponse* AdminResponse::default_instance_ = NULL;

AdminResponse* AdminResponse::New() const {
  return new AdminResponse;
}

void AdminResponse::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_type_ = 0;
    if (has_change_peer()) {
      if (change_peer_ != NULL) change_peer_->::raft_cmdpb::ChangePeerResponse::Clear();
    }
    if (has_split()) {
      if (split_ != NULL) split_->::raft_cmdpb::SplitResponse::Clear();
    }
    if (has_compact_log()) {
      if (compact_log_ != NULL) compact_log_->::raft_cmdpb::CompactLogResponse::Clear();
    }
    if (has_transfer_leader()) {
      if (transfer_leader_ != NULL) transfer_leader_->::raft_cmdpb::TransferLeaderResponse::Clear();
    }
    if (has_verify_hash()) {
      if (verify_hash_ != NULL) verify_hash_->::raft_cmdpb::VerifyHashResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::AdminCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_split;
        break;
      }

      // optional .raft_cmdpb.SplitResponse split = 3;
      case 3: {
        if (tag == 26) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verify_hash;
        break;
      }

      // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_verify_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminResponse)
  return false;
#undef DO_
}

void AdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminResponse)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->change_peer(), output);
  }

  // optional .raft_cmdpb.SplitResponse split = 3;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->split(), output);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->compact_log(), output);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->transfer_leader(), output);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->verify_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminResponse)
}

::google::protobuf::uint8* AdminResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminResponse)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->change_peer(), target);
  }

  // optional .raft_cmdpb.SplitResponse split = 3;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->split(), target);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->compact_log(), target);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->transfer_leader(), target);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->verify_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminResponse)
  return target;
}

int AdminResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
    if (has_change_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_peer());
    }

    // optional .raft_cmdpb.SplitResponse split = 3;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->split());
    }

    // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
    if (has_compact_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compact_log());
    }

    // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
    if (has_transfer_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transfer_leader());
    }

    // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
    if (has_verify_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verify_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_change_peer()) {
      mutable_change_peer()->::raft_cmdpb::ChangePeerResponse::MergeFrom(from.change_peer());
    }
    if (from.has_split()) {
      mutable_split()->::raft_cmdpb::SplitResponse::MergeFrom(from.split());
    }
    if (from.has_compact_log()) {
      mutable_compact_log()->::raft_cmdpb::CompactLogResponse::MergeFrom(from.compact_log());
    }
    if (from.has_transfer_leader()) {
      mutable_transfer_leader()->::raft_cmdpb::TransferLeaderResponse::MergeFrom(from.transfer_leader());
    }
    if (from.has_verify_hash()) {
      mutable_verify_hash()->::raft_cmdpb::VerifyHashResponse::MergeFrom(from.verify_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResponse::IsInitialized() const {

  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(change_peer_, other->change_peer_);
    std::swap(split_, other->split_);
    std::swap(compact_log_, other->compact_log_);
    std::swap(transfer_leader_, other->transfer_leader_);
    std::swap(verify_hash_, other->verify_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminResponse_descriptor_;
  metadata.reflection = AdminResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegionLeaderRequest::RegionLeaderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::InitAsDefaultInstance() {
}

RegionLeaderRequest::RegionLeaderRequest(const RegionLeaderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLeaderRequest::~RegionLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderRequest)
  SharedDtor();
}

void RegionLeaderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLeaderRequest_descriptor_;
}

const RegionLeaderRequest& RegionLeaderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RegionLeaderRequest* RegionLeaderRequest::default_instance_ = NULL;

RegionLeaderRequest* RegionLeaderRequest::New() const {
  return new RegionLeaderRequest;
}

void RegionLeaderRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderRequest)
  return false;
#undef DO_
}

void RegionLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderRequest)
}

::google::protobuf::uint8* RegionLeaderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderRequest)
  return target;
}

int RegionLeaderRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLeaderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLeaderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLeaderRequest::MergeFrom(const RegionLeaderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderRequest::CopyFrom(const RegionLeaderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLeaderRequest::IsInitialized() const {

  return true;
}

void RegionLeaderRequest::Swap(RegionLeaderRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLeaderRequest_descriptor_;
  metadata.reflection = RegionLeaderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionLeaderResponse::kLeaderFieldNumber;
#endif  // !_MSC_VER

RegionLeaderResponse::RegionLeaderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::InitAsDefaultInstance() {
  leader_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

RegionLeaderResponse::RegionLeaderResponse(const RegionLeaderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLeaderResponse::~RegionLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderResponse)
  SharedDtor();
}

void RegionLeaderResponse::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
  }
}

void RegionLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLeaderResponse_descriptor_;
}

const RegionLeaderResponse& RegionLeaderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RegionLeaderResponse* RegionLeaderResponse::default_instance_ = NULL;

RegionLeaderResponse* RegionLeaderResponse::New() const {
  return new RegionLeaderResponse;
}

void RegionLeaderResponse::Clear() {
  if (has_leader()) {
    if (leader_ != NULL) leader_->::metapb::Peer::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer leader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderResponse)
  return false;
#undef DO_
}

void RegionLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderResponse)
  // optional .metapb.Peer leader = 1;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderResponse)
}

::google::protobuf::uint8* RegionLeaderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderResponse)
  // optional .metapb.Peer leader = 1;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderResponse)
  return target;
}

int RegionLeaderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Peer leader = 1;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLeaderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLeaderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLeaderResponse::MergeFrom(const RegionLeaderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderResponse::CopyFrom(const RegionLeaderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLeaderResponse::IsInitialized() const {

  return true;
}

void RegionLeaderResponse::Swap(RegionLeaderResponse* other) {
  if (other != this) {
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLeaderResponse_descriptor_;
  metadata.reflection = RegionLeaderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegionDetailRequest::RegionDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::InitAsDefaultInstance() {
}

RegionDetailRequest::RegionDetailRequest(const RegionDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionDetailRequest::~RegionDetailRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailRequest)
  SharedDtor();
}

void RegionDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionDetailRequest_descriptor_;
}

const RegionDetailRequest& RegionDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RegionDetailRequest* RegionDetailRequest::default_instance_ = NULL;

RegionDetailRequest* RegionDetailRequest::New() const {
  return new RegionDetailRequest;
}

void RegionDetailRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailRequest)
  return false;
#undef DO_
}

void RegionDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailRequest)
}

::google::protobuf::uint8* RegionDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailRequest)
  return target;
}

int RegionDetailRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionDetailRequest::MergeFrom(const RegionDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailRequest::CopyFrom(const RegionDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionDetailRequest::IsInitialized() const {

  return true;
}

void RegionDetailRequest::Swap(RegionDetailRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionDetailRequest_descriptor_;
  metadata.reflection = RegionDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionDetailResponse::kRegionFieldNumber;
const int RegionDetailResponse::kLeaderFieldNumber;
#endif  // !_MSC_VER

RegionDetailResponse::RegionDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(&::metapb::Region::default_instance());
  leader_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

RegionDetailResponse::RegionDetailResponse(const RegionDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionDetailResponse::~RegionDetailResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailResponse)
  SharedDtor();
}

void RegionDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete leader_;
  }
}

void RegionDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionDetailResponse_descriptor_;
}

const RegionDetailResponse& RegionDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RegionDetailResponse* RegionDetailResponse::default_instance_ = NULL;

RegionDetailResponse* RegionDetailResponse::New() const {
  return new RegionDetailResponse;
}

void RegionDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_region()) {
      if (region_ != NULL) region_->::metapb::Region::Clear();
    }
    if (has_leader()) {
      if (leader_ != NULL) leader_->::metapb::Peer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailResponse)
  return false;
#undef DO_
}

void RegionDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailResponse)
}

::google::protobuf::uint8* RegionDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailResponse)
  // optional .metapb.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional .metapb.Peer leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailResponse)
  return target;
}

int RegionDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .metapb.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .metapb.Peer leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionDetailResponse::MergeFrom(const RegionDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::metapb::Region::MergeFrom(from.region());
    }
    if (from.has_leader()) {
      mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailResponse::CopyFrom(const RegionDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionDetailResponse::IsInitialized() const {

  return true;
}

void RegionDetailResponse::Swap(RegionDetailResponse* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionDetailResponse_descriptor_;
  metadata.reflection = RegionDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusRequest::kCmdTypeFieldNumber;
const int StatusRequest::kRegionLeaderFieldNumber;
const int StatusRequest::kRegionDetailFieldNumber;
#endif  // !_MSC_VER

StatusRequest::StatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::InitAsDefaultInstance() {
  region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderRequest*>(&::raft_cmdpb::RegionLeaderRequest::default_instance());
  region_detail_ = const_cast< ::raft_cmdpb::RegionDetailRequest*>(&::raft_cmdpb::RegionDetailRequest::default_instance());
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  region_leader_ = NULL;
  region_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_leader_;
    delete region_detail_;
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_type_ = 0;
    if (has_region_leader()) {
      if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderRequest::Clear();
    }
    if (has_region_detail()) {
      if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::StatusCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_leader;
        break;
      }

      // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_region_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_detail;
        break;
      }

      // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_region_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusRequest)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_leader(), output);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusRequest)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_leader(), target);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusRequest)
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
    if (has_region_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_leader());
    }

    // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
    if (has_region_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_region_leader()) {
      mutable_region_leader()->::raft_cmdpb::RegionLeaderRequest::MergeFrom(from.region_leader());
    }
    if (from.has_region_detail()) {
      mutable_region_detail()->::raft_cmdpb::RegionDetailRequest::MergeFrom(from.region_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {

  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(region_leader_, other->region_leader_);
    std::swap(region_detail_, other->region_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusResponse::kCmdTypeFieldNumber;
const int StatusResponse::kRegionLeaderFieldNumber;
const int StatusResponse::kRegionDetailFieldNumber;
#endif  // !_MSC_VER

StatusResponse::StatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
  region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderResponse*>(&::raft_cmdpb::RegionLeaderResponse::default_instance());
  region_detail_ = const_cast< ::raft_cmdpb::RegionDetailResponse*>(&::raft_cmdpb::RegionDetailResponse::default_instance());
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  cmd_type_ = 0;
  region_leader_ = NULL;
  region_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_leader_;
    delete region_detail_;
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New() const {
  return new StatusResponse;
}

void StatusResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_type_ = 0;
    if (has_region_leader()) {
      if (region_leader_ != NULL) region_leader_->::raft_cmdpb::RegionLeaderResponse::Clear();
    }
    if (has_region_detail()) {
      if (region_detail_ != NULL) region_detail_->::raft_cmdpb::RegionDetailResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_cmdpb::StatusCmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_leader;
        break;
      }

      // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_region_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_detail;
        break;
      }

      // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_region_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusResponse)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_leader(), output);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusResponse)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_leader(), target);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusResponse)
  return target;
}

int StatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
    if (has_region_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_leader());
    }

    // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
    if (has_region_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_region_leader()) {
      mutable_region_leader()->::raft_cmdpb::RegionLeaderResponse::MergeFrom(from.region_leader());
    }
    if (from.has_region_detail()) {
      mutable_region_detail()->::raft_cmdpb::RegionDetailResponse::MergeFrom(from.region_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other != this) {
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(region_leader_, other->region_leader_);
    std::swap(region_detail_, other->region_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftRequestHeader::kRegionIdFieldNumber;
const int RaftRequestHeader::kPeerFieldNumber;
const int RaftRequestHeader::kReadQuorumFieldNumber;
const int RaftRequestHeader::kUuidFieldNumber;
const int RaftRequestHeader::kRegionEpochFieldNumber;
const int RaftRequestHeader::kTermFieldNumber;
#endif  // !_MSC_VER

RaftRequestHeader::RaftRequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(&::metapb::RegionEpoch::default_instance());
}

RaftRequestHeader::RaftRequestHeader(const RaftRequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  peer_ = NULL;
  read_quorum_ = false;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_epoch_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftRequestHeader::~RaftRequestHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftRequestHeader)
  SharedDtor();
}

void RaftRequestHeader::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete peer_;
    delete region_epoch_;
  }
}

void RaftRequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftRequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftRequestHeader_descriptor_;
}

const RaftRequestHeader& RaftRequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RaftRequestHeader* RaftRequestHeader::default_instance_ = NULL;

RaftRequestHeader* RaftRequestHeader::New() const {
  return new RaftRequestHeader;
}

void RaftRequestHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaftRequestHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(term_, read_quorum_);
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftRequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_read_quorum;
        break;
      }

      // optional bool read_quorum = 3;
      case 3: {
        if (tag == 24) {
         parse_read_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_quorum_)));
          set_has_read_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_term;
        break;
      }

      // optional uint64 term = 6;
      case 6: {
        if (tag == 48) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftRequestHeader)
  return false;
#undef DO_
}

void RaftRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peer(), output);
  }

  // optional bool read_quorum = 3;
  if (has_read_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_quorum(), output);
  }

  // optional bytes uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->uuid(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->region_epoch(), output);
  }

  // optional uint64 term = 6;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftRequestHeader)
}

::google::protobuf::uint8* RaftRequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->peer(), target);
  }

  // optional bool read_quorum = 3;
  if (has_read_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_quorum(), target);
  }

  // optional bytes uuid = 4;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uuid(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->region_epoch(), target);
  }

  // optional uint64 term = 6;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftRequestHeader)
  return target;
}

int RaftRequestHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.Peer peer = 2;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

    // optional bool read_quorum = 3;
    if (has_read_quorum()) {
      total_size += 1 + 1;
    }

    // optional bytes uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional .metapb.RegionEpoch region_epoch = 5;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_epoch());
    }

    // optional uint64 term = 6;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftRequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftRequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftRequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftRequestHeader::MergeFrom(const RaftRequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
    if (from.has_read_quorum()) {
      set_read_quorum(from.read_quorum());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftRequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequestHeader::CopyFrom(const RaftRequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftRequestHeader::IsInitialized() const {

  return true;
}

void RaftRequestHeader::Swap(RaftRequestHeader* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(peer_, other->peer_);
    std::swap(read_quorum_, other->read_quorum_);
    std::swap(uuid_, other->uuid_);
    std::swap(region_epoch_, other->region_epoch_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftRequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftRequestHeader_descriptor_;
  metadata.reflection = RaftRequestHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftResponseHeader::kErrorFieldNumber;
const int RaftResponseHeader::kUuidFieldNumber;
const int RaftResponseHeader::kCurrentTermFieldNumber;
#endif  // !_MSC_VER

RaftResponseHeader::RaftResponseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::InitAsDefaultInstance() {
  error_ = const_cast< ::errorpb::Error*>(&::errorpb::Error::default_instance());
}

RaftResponseHeader::RaftResponseHeader(const RaftResponseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftResponseHeader::~RaftResponseHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftResponseHeader)
  SharedDtor();
}

void RaftResponseHeader::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void RaftResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftResponseHeader_descriptor_;
}

const RaftResponseHeader& RaftResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RaftResponseHeader* RaftResponseHeader::default_instance_ = NULL;

RaftResponseHeader* RaftResponseHeader::New() const {
  return new RaftResponseHeader;
}

void RaftResponseHeader::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_error()) {
      if (error_ != NULL) error_->::errorpb::Error::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    current_term_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_term;
        break;
      }

      // optional uint64 current_term = 3;
      case 3: {
        if (tag == 24) {
         parse_current_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
          set_has_current_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftResponseHeader)
  return false;
#undef DO_
}

void RaftResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftResponseHeader)
  // optional .errorpb.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uuid(), output);
  }

  // optional uint64 current_term = 3;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->current_term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftResponseHeader)
}

::google::protobuf::uint8* RaftResponseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftResponseHeader)
  // optional .errorpb.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // optional uint64 current_term = 3;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftResponseHeader)
  return target;
}

int RaftResponseHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .errorpb.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional uint64 current_term = 3;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftResponseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftResponseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftResponseHeader::MergeFrom(const RaftResponseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::errorpb::Error::MergeFrom(from.error());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponseHeader::CopyFrom(const RaftResponseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftResponseHeader::IsInitialized() const {

  return true;
}

void RaftResponseHeader::Swap(RaftResponseHeader* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(uuid_, other->uuid_);
    std::swap(current_term_, other->current_term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftResponseHeader_descriptor_;
  metadata.reflection = RaftResponseHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftCmdRequest::kHeaderFieldNumber;
const int RaftCmdRequest::kRequestsFieldNumber;
const int RaftCmdRequest::kAdminRequestFieldNumber;
const int RaftCmdRequest::kStatusRequestFieldNumber;
#endif  // !_MSC_VER

RaftCmdRequest::RaftCmdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::raft_cmdpb::RaftRequestHeader*>(&::raft_cmdpb::RaftRequestHeader::default_instance());
  admin_request_ = const_cast< ::raft_cmdpb::AdminRequest*>(&::raft_cmdpb::AdminRequest::default_instance());
  status_request_ = const_cast< ::raft_cmdpb::StatusRequest*>(&::raft_cmdpb::StatusRequest::default_instance());
}

RaftCmdRequest::RaftCmdRequest(const RaftCmdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  admin_request_ = NULL;
  status_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftCmdRequest::~RaftCmdRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdRequest)
  SharedDtor();
}

void RaftCmdRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete admin_request_;
    delete status_request_;
  }
}

void RaftCmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdRequest_descriptor_;
}

const RaftCmdRequest& RaftCmdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RaftCmdRequest* RaftCmdRequest::default_instance_ = NULL;

RaftCmdRequest* RaftCmdRequest::New() const {
  return new RaftCmdRequest;
}

void RaftCmdRequest::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_header()) {
      if (header_ != NULL) header_->::raft_cmdpb::RaftRequestHeader::Clear();
    }
    if (has_admin_request()) {
      if (admin_request_ != NULL) admin_request_->::raft_cmdpb::AdminRequest::Clear();
    }
    if (has_status_request()) {
      if (status_request_ != NULL) status_request_->::raft_cmdpb::StatusRequest::Clear();
    }
  }
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.RaftRequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requests;
        break;
      }

      // repeated .raft_cmdpb.Request requests = 2;
      case 2: {
        if (tag == 18) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requests;
        if (input->ExpectTag(26)) goto parse_admin_request;
        break;
      }

      // optional .raft_cmdpb.AdminRequest admin_request = 3;
      case 3: {
        if (tag == 26) {
         parse_admin_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_request;
        break;
      }

      // optional .raft_cmdpb.StatusRequest status_request = 4;
      case 4: {
        if (tag == 34) {
         parse_status_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdRequest)
  return false;
#undef DO_
}

void RaftCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdRequest)
  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requests(i), output);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (has_admin_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->admin_request(), output);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (has_status_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdRequest)
}

::google::protobuf::uint8* RaftCmdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdRequest)
  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->requests(i), target);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (has_admin_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->admin_request(), target);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (has_status_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdRequest)
  return target;
}

int RaftCmdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.RaftRequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .raft_cmdpb.AdminRequest admin_request = 3;
    if (has_admin_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->admin_request());
    }

    // optional .raft_cmdpb.StatusRequest status_request = 4;
    if (has_status_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_request());
    }

  }
  // repeated .raft_cmdpb.Request requests = 2;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftCmdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftCmdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftCmdRequest::MergeFrom(const RaftCmdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::raft_cmdpb::RaftRequestHeader::MergeFrom(from.header());
    }
    if (from.has_admin_request()) {
      mutable_admin_request()->::raft_cmdpb::AdminRequest::MergeFrom(from.admin_request());
    }
    if (from.has_status_request()) {
      mutable_status_request()->::raft_cmdpb::StatusRequest::MergeFrom(from.status_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdRequest::CopyFrom(const RaftCmdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdRequest::IsInitialized() const {

  return true;
}

void RaftCmdRequest::Swap(RaftCmdRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    requests_.Swap(&other->requests_);
    std::swap(admin_request_, other->admin_request_);
    std::swap(status_request_, other->status_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftCmdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdRequest_descriptor_;
  metadata.reflection = RaftCmdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftCmdResponse::kHeaderFieldNumber;
const int RaftCmdResponse::kResponsesFieldNumber;
const int RaftCmdResponse::kAdminResponseFieldNumber;
const int RaftCmdResponse::kStatusResponseFieldNumber;
#endif  // !_MSC_VER

RaftCmdResponse::RaftCmdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::raft_cmdpb::RaftResponseHeader*>(&::raft_cmdpb::RaftResponseHeader::default_instance());
  admin_response_ = const_cast< ::raft_cmdpb::AdminResponse*>(&::raft_cmdpb::AdminResponse::default_instance());
  status_response_ = const_cast< ::raft_cmdpb::StatusResponse*>(&::raft_cmdpb::StatusResponse::default_instance());
}

RaftCmdResponse::RaftCmdResponse(const RaftCmdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  admin_response_ = NULL;
  status_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftCmdResponse::~RaftCmdResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdResponse)
  SharedDtor();
}

void RaftCmdResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete admin_response_;
    delete status_response_;
  }
}

void RaftCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdResponse_descriptor_;
}

const RaftCmdResponse& RaftCmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5fcmdpb_2eproto();
  return *default_instance_;
}

RaftCmdResponse* RaftCmdResponse::default_instance_ = NULL;

RaftCmdResponse* RaftCmdResponse::New() const {
  return new RaftCmdResponse;
}

void RaftCmdResponse::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_header()) {
      if (header_ != NULL) header_->::raft_cmdpb::RaftResponseHeader::Clear();
    }
    if (has_admin_response()) {
      if (admin_response_ != NULL) admin_response_->::raft_cmdpb::AdminResponse::Clear();
    }
    if (has_status_response()) {
      if (status_response_ != NULL) status_response_->::raft_cmdpb::StatusResponse::Clear();
    }
  }
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.RaftResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        break;
      }

      // repeated .raft_cmdpb.Response responses = 2;
      case 2: {
        if (tag == 18) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        if (input->ExpectTag(26)) goto parse_admin_response;
        break;
      }

      // optional .raft_cmdpb.AdminResponse admin_response = 3;
      case 3: {
        if (tag == 26) {
         parse_admin_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_response;
        break;
      }

      // optional .raft_cmdpb.StatusResponse status_response = 4;
      case 4: {
        if (tag == 34) {
         parse_status_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdResponse)
  return false;
#undef DO_
}

void RaftCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdResponse)
  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (has_admin_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->admin_response(), output);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (has_status_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdResponse)
}

::google::protobuf::uint8* RaftCmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdResponse)
  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->responses(i), target);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (has_admin_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->admin_response(), target);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (has_status_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdResponse)
  return target;
}

int RaftCmdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .raft_cmdpb.RaftResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .raft_cmdpb.AdminResponse admin_response = 3;
    if (has_admin_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->admin_response());
    }

    // optional .raft_cmdpb.StatusResponse status_response = 4;
    if (has_status_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_response());
    }

  }
  // repeated .raft_cmdpb.Response responses = 2;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftCmdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftCmdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftCmdResponse::MergeFrom(const RaftCmdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::raft_cmdpb::RaftResponseHeader::MergeFrom(from.header());
    }
    if (from.has_admin_response()) {
      mutable_admin_response()->::raft_cmdpb::AdminResponse::MergeFrom(from.admin_response());
    }
    if (from.has_status_response()) {
      mutable_status_response()->::raft_cmdpb::StatusResponse::MergeFrom(from.status_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdResponse::CopyFrom(const RaftCmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdResponse::IsInitialized() const {

  return true;
}

void RaftCmdResponse::Swap(RaftCmdResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    responses_.Swap(&other->responses_);
    std::swap(admin_response_, other->admin_response_);
    std::swap(status_response_, other->status_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdResponse_descriptor_;
  metadata.reflection = RaftCmdResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

// @@protoc_insertion_point(global_scope)
