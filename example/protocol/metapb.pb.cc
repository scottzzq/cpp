// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metapb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metapb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metapb {

namespace {

const ::google::protobuf::Descriptor* Cluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Store_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Store_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionEpoch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionEpoch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Region_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Needle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Needle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StoreState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_metapb_2eproto() {
  protobuf_AddDesc_metapb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metapb.proto");
  GOOGLE_CHECK(file != NULL);
  Cluster_descriptor_ = file->message_type(0);
  static const int Cluster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, max_peer_count_),
  };
  Cluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cluster_descriptor_,
      Cluster::default_instance_,
      Cluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cluster));
  StoreLabel_descriptor_ = file->message_type(1);
  static const int StoreLabel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, value_),
  };
  StoreLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreLabel_descriptor_,
      StoreLabel::default_instance_,
      StoreLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreLabel));
  Store_descriptor_ = file->message_type(2);
  static const int Store_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, labels_),
  };
  Store_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Store_descriptor_,
      Store::default_instance_,
      Store_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Store, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Store));
  RegionEpoch_descriptor_ = file->message_type(3);
  static const int RegionEpoch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, conf_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, version_),
  };
  RegionEpoch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionEpoch_descriptor_,
      RegionEpoch::default_instance_,
      RegionEpoch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEpoch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionEpoch));
  Region_descriptor_ = file->message_type(4);
  static const int Region_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, term_),
  };
  Region_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Region_descriptor_,
      Region::default_instance_,
      Region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Region));
  Peer_descriptor_ = file->message_type(5);
  static const int Peer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, store_id_),
  };
  Peer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Peer_descriptor_,
      Peer::default_instance_,
      Peer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Peer));
  Needle_descriptor_ = file->message_type(6);
  static const int Needle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Needle, magic_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Needle, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Needle, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Needle, value_),
  };
  Needle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Needle_descriptor_,
      Needle::default_instance_,
      Needle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Needle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Needle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Needle));
  StoreState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metapb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cluster_descriptor_, &Cluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreLabel_descriptor_, &StoreLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Store_descriptor_, &Store::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionEpoch_descriptor_, &RegionEpoch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Region_descriptor_, &Region::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Peer_descriptor_, &Peer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Needle_descriptor_, &Needle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metapb_2eproto() {
  delete Cluster::default_instance_;
  delete Cluster_reflection_;
  delete StoreLabel::default_instance_;
  delete StoreLabel_reflection_;
  delete Store::default_instance_;
  delete Store_reflection_;
  delete RegionEpoch::default_instance_;
  delete RegionEpoch_reflection_;
  delete Region::default_instance_;
  delete Region_reflection_;
  delete Peer::default_instance_;
  delete Peer_reflection_;
  delete Needle::default_instance_;
  delete Needle_reflection_;
}

void protobuf_AddDesc_metapb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014metapb.proto\022\006metapb\"-\n\007Cluster\022\n\n\002id\030"
    "\001 \001(\004\022\026\n\016max_peer_count\030\002 \001(\r\"(\n\nStoreLa"
    "bel\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"k\n\005Store"
    "\022\n\n\002id\030\001 \001(\004\022\017\n\007address\030\002 \001(\t\022!\n\005state\030\003"
    " \001(\0162\022.metapb.StoreState\022\"\n\006labels\030\004 \003(\013"
    "2\022.metapb.StoreLabel\"0\n\013RegionEpoch\022\020\n\010c"
    "onf_ver\030\001 \001(\004\022\017\n\007version\030\002 \001(\004\"\216\001\n\006Regio"
    "n\022\n\n\002id\030\001 \001(\004\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007end_"
    "key\030\003 \001(\014\022)\n\014region_epoch\030\004 \001(\0132\023.metapb"
    ".RegionEpoch\022\033\n\005peers\030\005 \003(\0132\014.metapb.Pee"
    "r\022\014\n\004term\030\006 \001(\004\"$\n\004Peer\022\n\n\002id\030\001 \001(\004\022\020\n\010s"
    "tore_id\030\002 \001(\004\"E\n\006Needle\022\021\n\tmagic_num\030\001 \001"
    "(\004\022\014\n\004size\030\002 \001(\004\022\013\n\003key\030\003 \001(\004\022\r\n\005value\030\004"
    " \001(\014*0\n\nStoreState\022\006\n\002Up\020\000\022\013\n\007Offline\020\001\022"
    "\r\n\tTombstone\020\002", 574);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metapb.proto", &protobuf_RegisterTypes);
  Cluster::default_instance_ = new Cluster();
  StoreLabel::default_instance_ = new StoreLabel();
  Store::default_instance_ = new Store();
  RegionEpoch::default_instance_ = new RegionEpoch();
  Region::default_instance_ = new Region();
  Peer::default_instance_ = new Peer();
  Needle::default_instance_ = new Needle();
  Cluster::default_instance_->InitAsDefaultInstance();
  StoreLabel::default_instance_->InitAsDefaultInstance();
  Store::default_instance_->InitAsDefaultInstance();
  RegionEpoch::default_instance_->InitAsDefaultInstance();
  Region::default_instance_->InitAsDefaultInstance();
  Peer::default_instance_->InitAsDefaultInstance();
  Needle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metapb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metapb_2eproto {
  StaticDescriptorInitializer_metapb_2eproto() {
    protobuf_AddDesc_metapb_2eproto();
  }
} static_descriptor_initializer_metapb_2eproto_;
const ::google::protobuf::EnumDescriptor* StoreState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreState_descriptor_;
}
bool StoreState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Cluster::kIdFieldNumber;
const int Cluster::kMaxPeerCountFieldNumber;
#endif  // !_MSC_VER

Cluster::Cluster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Cluster)
}

void Cluster::InitAsDefaultInstance() {
}

Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Cluster)
}

void Cluster::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  max_peer_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:metapb.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cluster_descriptor_;
}

const Cluster& Cluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

Cluster* Cluster::default_instance_ = NULL;

Cluster* Cluster::New() const {
  return new Cluster;
}

void Cluster::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cluster*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, max_peer_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_peer_count;
        break;
      }

      // optional uint32 max_peer_count = 2;
      case 2: {
        if (tag == 16) {
         parse_max_peer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_peer_count_)));
          set_has_max_peer_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Cluster)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 max_peer_count = 2;
  if (has_max_peer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_peer_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Cluster)
}

::google::protobuf::uint8* Cluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Cluster)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 max_peer_count = 2;
  if (has_max_peer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_peer_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Cluster)
  return target;
}

int Cluster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 max_peer_count = 2;
    if (has_max_peer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_peer_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_max_peer_count()) {
      set_max_peer_count(from.max_peer_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {

  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(max_peer_count_, other->max_peer_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cluster_descriptor_;
  metadata.reflection = Cluster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreLabel::kKeyFieldNumber;
const int StoreLabel::kValueFieldNumber;
#endif  // !_MSC_VER

StoreLabel::StoreLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.StoreLabel)
}

void StoreLabel::InitAsDefaultInstance() {
}

StoreLabel::StoreLabel(const StoreLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.StoreLabel)
}

void StoreLabel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreLabel::~StoreLabel() {
  // @@protoc_insertion_point(destructor:metapb.StoreLabel)
  SharedDtor();
}

void StoreLabel::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StoreLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreLabel_descriptor_;
}

const StoreLabel& StoreLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

StoreLabel* StoreLabel::default_instance_ = NULL;

StoreLabel* StoreLabel::New() const {
  return new StoreLabel;
}

void StoreLabel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.StoreLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.StoreLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.StoreLabel)
  return false;
#undef DO_
}

void StoreLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.StoreLabel)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.StoreLabel)
}

::google::protobuf::uint8* StoreLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.StoreLabel)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.StoreLabel)
  return target;
}

int StoreLabel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreLabel::MergeFrom(const StoreLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreLabel::CopyFrom(const StoreLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreLabel::IsInitialized() const {

  return true;
}

void StoreLabel::Swap(StoreLabel* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreLabel_descriptor_;
  metadata.reflection = StoreLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Store::kIdFieldNumber;
const int Store::kAddressFieldNumber;
const int Store::kStateFieldNumber;
const int Store::kLabelsFieldNumber;
#endif  // !_MSC_VER

Store::Store()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Store)
}

void Store::InitAsDefaultInstance() {
}

Store::Store(const Store& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Store)
}

void Store::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Store::~Store() {
  // @@protoc_insertion_point(destructor:metapb.Store)
  SharedDtor();
}

void Store::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Store::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Store::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Store_descriptor_;
}

const Store& Store::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

Store* Store::default_instance_ = NULL;

Store* Store::New() const {
  return new Store;
}

void Store::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    state_ = 0;
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Store)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .metapb.StoreState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metapb::StoreState_IsValid(value)) {
            set_state(static_cast< ::metapb::StoreState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        break;
      }

      // repeated .metapb.StoreLabel labels = 4;
      case 4: {
        if (tag == 34) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Store)
  return false;
#undef DO_
}

void Store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Store)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional .metapb.StoreState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated .metapb.StoreLabel labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Store)
}

::google::protobuf::uint8* Store::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Store)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional .metapb.StoreState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated .metapb.StoreLabel labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Store)
  return target;
}

int Store::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional .metapb.StoreState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .metapb.StoreLabel labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Store::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Store* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Store*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Store::MergeFrom(const Store& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Store::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Store::CopyFrom(const Store& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Store::IsInitialized() const {

  return true;
}

void Store::Swap(Store* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(address_, other->address_);
    std::swap(state_, other->state_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Store::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Store_descriptor_;
  metadata.reflection = Store_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionEpoch::kConfVerFieldNumber;
const int RegionEpoch::kVersionFieldNumber;
#endif  // !_MSC_VER

RegionEpoch::RegionEpoch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.RegionEpoch)
}

void RegionEpoch::InitAsDefaultInstance() {
}

RegionEpoch::RegionEpoch(const RegionEpoch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.RegionEpoch)
}

void RegionEpoch::SharedCtor() {
  _cached_size_ = 0;
  conf_ver_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionEpoch::~RegionEpoch() {
  // @@protoc_insertion_point(destructor:metapb.RegionEpoch)
  SharedDtor();
}

void RegionEpoch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionEpoch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionEpoch_descriptor_;
}

const RegionEpoch& RegionEpoch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

RegionEpoch* RegionEpoch::default_instance_ = NULL;

RegionEpoch* RegionEpoch::New() const {
  return new RegionEpoch;
}

void RegionEpoch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegionEpoch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(conf_ver_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.RegionEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 conf_ver = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conf_ver_)));
          set_has_conf_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.RegionEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.RegionEpoch)
  return false;
#undef DO_
}

void RegionEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.RegionEpoch)
  // optional uint64 conf_ver = 1;
  if (has_conf_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->conf_ver(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.RegionEpoch)
}

::google::protobuf::uint8* RegionEpoch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.RegionEpoch)
  // optional uint64 conf_ver = 1;
  if (has_conf_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->conf_ver(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.RegionEpoch)
  return target;
}

int RegionEpoch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 conf_ver = 1;
    if (has_conf_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conf_ver());
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionEpoch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionEpoch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionEpoch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionEpoch::MergeFrom(const RegionEpoch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conf_ver()) {
      set_conf_ver(from.conf_ver());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionEpoch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionEpoch::CopyFrom(const RegionEpoch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionEpoch::IsInitialized() const {

  return true;
}

void RegionEpoch::Swap(RegionEpoch* other) {
  if (other != this) {
    std::swap(conf_ver_, other->conf_ver_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionEpoch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionEpoch_descriptor_;
  metadata.reflection = RegionEpoch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Region::kIdFieldNumber;
const int Region::kStartKeyFieldNumber;
const int Region::kEndKeyFieldNumber;
const int Region::kRegionEpochFieldNumber;
const int Region::kPeersFieldNumber;
const int Region::kTermFieldNumber;
#endif  // !_MSC_VER

Region::Region()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Region)
}

void Region::InitAsDefaultInstance() {
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(&::metapb::RegionEpoch::default_instance());
}

Region::Region(const Region& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Region)
}

void Region::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_epoch_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:metapb.Region)
  SharedDtor();
}

void Region::SharedDtor() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (this != default_instance_) {
    delete region_epoch_;
  }
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_descriptor_;
}

const Region& Region::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

Region* Region::default_instance_ = NULL;

Region* Region::New() const {
  return new Region;
}

void Region::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_key_->clear();
      }
    }
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
    term_ = GOOGLE_ULONGLONG(0);
  }
  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 4;
      case 4: {
        if (tag == 34) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_peers;
        break;
      }

      // repeated .metapb.Peer peers = 5;
      case 5: {
        if (tag == 42) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_peers;
        if (input->ExpectTag(48)) goto parse_term;
        break;
      }

      // optional uint64 term = 6;
      case 6: {
        if (tag == 48) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Region)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->region_epoch(), output);
  }

  // repeated .metapb.Peer peers = 5;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->peers(i), output);
  }

  // optional uint64 term = 6;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Region)
}

::google::protobuf::uint8* Region::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Region)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 4;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->region_epoch(), target);
  }

  // repeated .metapb.Peer peers = 5;
  for (int i = 0; i < this->peers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->peers(i), target);
  }

  // optional uint64 term = 6;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Region)
  return target;
}

int Region::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional .metapb.RegionEpoch region_epoch = 4;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_epoch());
    }

    // optional uint64 term = 6;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  // repeated .metapb.Peer peers = 5;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Region* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Region*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {

  return true;
}

void Region::Swap(Region* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    std::swap(region_epoch_, other->region_epoch_);
    peers_.Swap(&other->peers_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Region_descriptor_;
  metadata.reflection = Region_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Peer::kIdFieldNumber;
const int Peer::kStoreIdFieldNumber;
#endif  // !_MSC_VER

Peer::Peer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Peer)
}

void Peer::InitAsDefaultInstance() {
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Peer)
}

void Peer::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  store_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:metapb.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

Peer* Peer::default_instance_ = NULL;

Peer* Peer::New() const {
  return new Peer;
}

void Peer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Peer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, store_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Peer)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Peer)
}

::google::protobuf::uint8* Peer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Peer)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Peer)
  return target;
}

int Peer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->store_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Peer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Peer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {

  return true;
}

void Peer::Swap(Peer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(store_id_, other->store_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Needle::kMagicNumFieldNumber;
const int Needle::kSizeFieldNumber;
const int Needle::kKeyFieldNumber;
const int Needle::kValueFieldNumber;
#endif  // !_MSC_VER

Needle::Needle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metapb.Needle)
}

void Needle::InitAsDefaultInstance() {
}

Needle::Needle(const Needle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metapb.Needle)
}

void Needle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  magic_num_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  key_ = GOOGLE_ULONGLONG(0);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Needle::~Needle() {
  // @@protoc_insertion_point(destructor:metapb.Needle)
  SharedDtor();
}

void Needle::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Needle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Needle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Needle_descriptor_;
}

const Needle& Needle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metapb_2eproto();
  return *default_instance_;
}

Needle* Needle::default_instance_ = NULL;

Needle* Needle::New() const {
  return new Needle;
}

void Needle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Needle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(magic_num_, key_);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Needle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metapb.Needle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 magic_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magic_num_)));
          set_has_magic_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // optional uint64 key = 3;
      case 3: {
        if (tag == 24) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metapb.Needle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metapb.Needle)
  return false;
#undef DO_
}

void Needle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metapb.Needle)
  // optional uint64 magic_num = 1;
  if (has_magic_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->magic_num(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint64 key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->key(), output);
  }

  // optional bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metapb.Needle)
}

::google::protobuf::uint8* Needle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metapb.Needle)
  // optional uint64 magic_num = 1;
  if (has_magic_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->magic_num(), target);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional uint64 key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->key(), target);
  }

  // optional bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metapb.Needle)
  return target;
}

int Needle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 magic_num = 1;
    if (has_magic_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magic_num());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Needle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Needle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Needle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Needle::MergeFrom(const Needle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic_num()) {
      set_magic_num(from.magic_num());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Needle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Needle::CopyFrom(const Needle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Needle::IsInitialized() const {

  return true;
}

void Needle::Swap(Needle* other) {
  if (other != this) {
    std::swap(magic_num_, other->magic_num_);
    std::swap(size_, other->size_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Needle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Needle_descriptor_;
  metadata.reflection = Needle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace metapb

// @@protoc_insertion_point(global_scope)
