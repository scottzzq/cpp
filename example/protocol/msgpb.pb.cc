// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msgpb {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgpb_2eproto() {
  protobuf_AddDesc_msgpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgpb.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, cmd_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, cmd_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, raft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, kv_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, kv_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, cop_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, cop_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, pd_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, pd_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, volume_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, volume_resp_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgpb_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_msgpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::raft_cmdpb::protobuf_AddDesc_raft_5fcmdpb_2eproto();
  ::raft_serverpb::protobuf_AddDesc_raft_5fserverpb_2eproto();
  ::kvrpcpb::protobuf_AddDesc_kvrpcpb_2eproto();
  ::coprocessor::protobuf_AddDesc_coprocessor_2eproto();
  ::volume_cmdpb::protobuf_AddDesc_volume_5fcmdpb_2eproto();
  ::pdpb::protobuf_AddDesc_pdpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013msgpb.proto\022\005msgpb\032\020raft_cmdpb.proto\032\023"
    "raft_serverpb.proto\032\rkvrpcpb.proto\032\021copr"
    "ocessor.proto\032\022volume_cmdpb.proto\032\npdpb."
    "proto\"\343\003\n\007Message\022$\n\010msg_type\030\001 \001(\0162\022.ms"
    "gpb.MessageType\022+\n\007cmd_req\030\002 \001(\0132\032.raft_"
    "cmdpb.RaftCmdRequest\022-\n\010cmd_resp\030\003 \001(\0132\033"
    ".raft_cmdpb.RaftCmdResponse\022(\n\004raft\030\004 \001("
    "\0132\032.raft_serverpb.RaftMessage\022 \n\006kv_req\030"
    "\005 \001(\0132\020.kvrpcpb.Request\022\"\n\007kv_resp\030\006 \001(\013"
    "2\021.kvrpcpb.Response\022%\n\007cop_req\030\007 \001(\0132\024.c"
    "oprocessor.Request\022\'\n\010cop_resp\030\010 \001(\0132\025.c"
    "oprocessor.Response\022\035\n\006pd_req\030\t \001(\0132\r.pd"
    "pb.Request\022\037\n\007pd_resp\030\n \001(\0132\016.pdpb.Respo"
    "nse\022)\n\nvolume_req\030\013 \001(\0132\025.volume_cmdpb.R"
    "equest\022+\n\013volume_resp\030\014 \001(\0132\026.volume_cmd"
    "pb.Response*\223\001\n\013MessageType\022\007\n\003Cmd\020\001\022\013\n\007"
    "CmdResp\020\002\022\010\n\004Raft\020\003\022\t\n\005KvReq\020\004\022\n\n\006KvResp"
    "\020\005\022\n\n\006CopReq\020\006\022\013\n\007CopResp\020\007\022\t\n\005PdReq\020\010\022\n"
    "\n\006PdResp\020\t\022\r\n\tVolumeReq\020\n\022\016\n\nVolumeResp\020"
    "\013", 761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgpb.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgpb_2eproto {
  StaticDescriptorInitializer_msgpb_2eproto() {
    protobuf_AddDesc_msgpb_2eproto();
  }
} static_descriptor_initializer_msgpb_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMsgTypeFieldNumber;
const int Message::kCmdReqFieldNumber;
const int Message::kCmdRespFieldNumber;
const int Message::kRaftFieldNumber;
const int Message::kKvReqFieldNumber;
const int Message::kKvRespFieldNumber;
const int Message::kCopReqFieldNumber;
const int Message::kCopRespFieldNumber;
const int Message::kPdReqFieldNumber;
const int Message::kPdRespFieldNumber;
const int Message::kVolumeReqFieldNumber;
const int Message::kVolumeRespFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msgpb.Message)
}

void Message::InitAsDefaultInstance() {
  cmd_req_ = const_cast< ::raft_cmdpb::RaftCmdRequest*>(&::raft_cmdpb::RaftCmdRequest::default_instance());
  cmd_resp_ = const_cast< ::raft_cmdpb::RaftCmdResponse*>(&::raft_cmdpb::RaftCmdResponse::default_instance());
  raft_ = const_cast< ::raft_serverpb::RaftMessage*>(&::raft_serverpb::RaftMessage::default_instance());
  kv_req_ = const_cast< ::kvrpcpb::Request*>(&::kvrpcpb::Request::default_instance());
  kv_resp_ = const_cast< ::kvrpcpb::Response*>(&::kvrpcpb::Response::default_instance());
  cop_req_ = const_cast< ::coprocessor::Request*>(&::coprocessor::Request::default_instance());
  cop_resp_ = const_cast< ::coprocessor::Response*>(&::coprocessor::Response::default_instance());
  pd_req_ = const_cast< ::pdpb::Request*>(&::pdpb::Request::default_instance());
  pd_resp_ = const_cast< ::pdpb::Response*>(&::pdpb::Response::default_instance());
  volume_req_ = const_cast< ::volume_cmdpb::Request*>(&::volume_cmdpb::Request::default_instance());
  volume_resp_ = const_cast< ::volume_cmdpb::Response*>(&::volume_cmdpb::Response::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msgpb.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 1;
  cmd_req_ = NULL;
  cmd_resp_ = NULL;
  raft_ = NULL;
  kv_req_ = NULL;
  kv_resp_ = NULL;
  cop_req_ = NULL;
  cop_resp_ = NULL;
  pd_req_ = NULL;
  pd_resp_ = NULL;
  volume_req_ = NULL;
  volume_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:msgpb.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_req_;
    delete cmd_resp_;
    delete raft_;
    delete kv_req_;
    delete kv_resp_;
    delete cop_req_;
    delete cop_resp_;
    delete pd_req_;
    delete pd_resp_;
    delete volume_req_;
    delete volume_resp_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgpb_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    msg_type_ = 1;
    if (has_cmd_req()) {
      if (cmd_req_ != NULL) cmd_req_->::raft_cmdpb::RaftCmdRequest::Clear();
    }
    if (has_cmd_resp()) {
      if (cmd_resp_ != NULL) cmd_resp_->::raft_cmdpb::RaftCmdResponse::Clear();
    }
    if (has_raft()) {
      if (raft_ != NULL) raft_->::raft_serverpb::RaftMessage::Clear();
    }
    if (has_kv_req()) {
      if (kv_req_ != NULL) kv_req_->::kvrpcpb::Request::Clear();
    }
    if (has_kv_resp()) {
      if (kv_resp_ != NULL) kv_resp_->::kvrpcpb::Response::Clear();
    }
    if (has_cop_req()) {
      if (cop_req_ != NULL) cop_req_->::coprocessor::Request::Clear();
    }
    if (has_cop_resp()) {
      if (cop_resp_ != NULL) cop_resp_->::coprocessor::Response::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_pd_req()) {
      if (pd_req_ != NULL) pd_req_->::pdpb::Request::Clear();
    }
    if (has_pd_resp()) {
      if (pd_resp_ != NULL) pd_resp_->::pdpb::Response::Clear();
    }
    if (has_volume_req()) {
      if (volume_req_ != NULL) volume_req_->::volume_cmdpb::Request::Clear();
    }
    if (has_volume_resp()) {
      if (volume_resp_ != NULL) volume_resp_->::volume_cmdpb::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msgpb.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msgpb.MessageType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msgpb::MessageType_IsValid(value)) {
            set_msg_type(static_cast< ::msgpb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd_req;
        break;
      }

      // optional .raft_cmdpb.RaftCmdRequest cmd_req = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd_resp;
        break;
      }

      // optional .raft_cmdpb.RaftCmdResponse cmd_resp = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_raft;
        break;
      }

      // optional .raft_serverpb.RaftMessage raft = 4;
      case 4: {
        if (tag == 34) {
         parse_raft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_kv_req;
        break;
      }

      // optional .kvrpcpb.Request kv_req = 5;
      case 5: {
        if (tag == 42) {
         parse_kv_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_kv_resp;
        break;
      }

      // optional .kvrpcpb.Response kv_resp = 6;
      case 6: {
        if (tag == 50) {
         parse_kv_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cop_req;
        break;
      }

      // optional .coprocessor.Request cop_req = 7;
      case 7: {
        if (tag == 58) {
         parse_cop_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cop_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cop_resp;
        break;
      }

      // optional .coprocessor.Response cop_resp = 8;
      case 8: {
        if (tag == 66) {
         parse_cop_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cop_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pd_req;
        break;
      }

      // optional .pdpb.Request pd_req = 9;
      case 9: {
        if (tag == 74) {
         parse_pd_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pd_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pd_resp;
        break;
      }

      // optional .pdpb.Response pd_resp = 10;
      case 10: {
        if (tag == 82) {
         parse_pd_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pd_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_volume_req;
        break;
      }

      // optional .volume_cmdpb.Request volume_req = 11;
      case 11: {
        if (tag == 90) {
         parse_volume_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_volume_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_volume_resp;
        break;
      }

      // optional .volume_cmdpb.Response volume_resp = 12;
      case 12: {
        if (tag == 98) {
         parse_volume_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_volume_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msgpb.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msgpb.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msgpb.Message)
  // optional .msgpb.MessageType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .raft_cmdpb.RaftCmdRequest cmd_req = 2;
  if (has_cmd_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cmd_req(), output);
  }

  // optional .raft_cmdpb.RaftCmdResponse cmd_resp = 3;
  if (has_cmd_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cmd_resp(), output);
  }

  // optional .raft_serverpb.RaftMessage raft = 4;
  if (has_raft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->raft(), output);
  }

  // optional .kvrpcpb.Request kv_req = 5;
  if (has_kv_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kv_req(), output);
  }

  // optional .kvrpcpb.Response kv_resp = 6;
  if (has_kv_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->kv_resp(), output);
  }

  // optional .coprocessor.Request cop_req = 7;
  if (has_cop_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cop_req(), output);
  }

  // optional .coprocessor.Response cop_resp = 8;
  if (has_cop_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cop_resp(), output);
  }

  // optional .pdpb.Request pd_req = 9;
  if (has_pd_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pd_req(), output);
  }

  // optional .pdpb.Response pd_resp = 10;
  if (has_pd_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pd_resp(), output);
  }

  // optional .volume_cmdpb.Request volume_req = 11;
  if (has_volume_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->volume_req(), output);
  }

  // optional .volume_cmdpb.Response volume_resp = 12;
  if (has_volume_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->volume_resp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msgpb.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpb.Message)
  // optional .msgpb.MessageType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .raft_cmdpb.RaftCmdRequest cmd_req = 2;
  if (has_cmd_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cmd_req(), target);
  }

  // optional .raft_cmdpb.RaftCmdResponse cmd_resp = 3;
  if (has_cmd_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cmd_resp(), target);
  }

  // optional .raft_serverpb.RaftMessage raft = 4;
  if (has_raft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->raft(), target);
  }

  // optional .kvrpcpb.Request kv_req = 5;
  if (has_kv_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kv_req(), target);
  }

  // optional .kvrpcpb.Response kv_resp = 6;
  if (has_kv_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->kv_resp(), target);
  }

  // optional .coprocessor.Request cop_req = 7;
  if (has_cop_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cop_req(), target);
  }

  // optional .coprocessor.Response cop_resp = 8;
  if (has_cop_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cop_resp(), target);
  }

  // optional .pdpb.Request pd_req = 9;
  if (has_pd_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pd_req(), target);
  }

  // optional .pdpb.Response pd_resp = 10;
  if (has_pd_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pd_resp(), target);
  }

  // optional .volume_cmdpb.Request volume_req = 11;
  if (has_volume_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->volume_req(), target);
  }

  // optional .volume_cmdpb.Response volume_resp = 12;
  if (has_volume_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->volume_resp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpb.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msgpb.MessageType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional .raft_cmdpb.RaftCmdRequest cmd_req = 2;
    if (has_cmd_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_req());
    }

    // optional .raft_cmdpb.RaftCmdResponse cmd_resp = 3;
    if (has_cmd_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_resp());
    }

    // optional .raft_serverpb.RaftMessage raft = 4;
    if (has_raft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raft());
    }

    // optional .kvrpcpb.Request kv_req = 5;
    if (has_kv_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kv_req());
    }

    // optional .kvrpcpb.Response kv_resp = 6;
    if (has_kv_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kv_resp());
    }

    // optional .coprocessor.Request cop_req = 7;
    if (has_cop_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cop_req());
    }

    // optional .coprocessor.Response cop_resp = 8;
    if (has_cop_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cop_resp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pdpb.Request pd_req = 9;
    if (has_pd_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pd_req());
    }

    // optional .pdpb.Response pd_resp = 10;
    if (has_pd_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pd_resp());
    }

    // optional .volume_cmdpb.Request volume_req = 11;
    if (has_volume_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_req());
    }

    // optional .volume_cmdpb.Response volume_resp = 12;
    if (has_volume_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_resp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_cmd_req()) {
      mutable_cmd_req()->::raft_cmdpb::RaftCmdRequest::MergeFrom(from.cmd_req());
    }
    if (from.has_cmd_resp()) {
      mutable_cmd_resp()->::raft_cmdpb::RaftCmdResponse::MergeFrom(from.cmd_resp());
    }
    if (from.has_raft()) {
      mutable_raft()->::raft_serverpb::RaftMessage::MergeFrom(from.raft());
    }
    if (from.has_kv_req()) {
      mutable_kv_req()->::kvrpcpb::Request::MergeFrom(from.kv_req());
    }
    if (from.has_kv_resp()) {
      mutable_kv_resp()->::kvrpcpb::Response::MergeFrom(from.kv_resp());
    }
    if (from.has_cop_req()) {
      mutable_cop_req()->::coprocessor::Request::MergeFrom(from.cop_req());
    }
    if (from.has_cop_resp()) {
      mutable_cop_resp()->::coprocessor::Response::MergeFrom(from.cop_resp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pd_req()) {
      mutable_pd_req()->::pdpb::Request::MergeFrom(from.pd_req());
    }
    if (from.has_pd_resp()) {
      mutable_pd_resp()->::pdpb::Response::MergeFrom(from.pd_resp());
    }
    if (from.has_volume_req()) {
      mutable_volume_req()->::volume_cmdpb::Request::MergeFrom(from.volume_req());
    }
    if (from.has_volume_resp()) {
      mutable_volume_resp()->::volume_cmdpb::Response::MergeFrom(from.volume_resp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(cmd_req_, other->cmd_req_);
    std::swap(cmd_resp_, other->cmd_resp_);
    std::swap(raft_, other->raft_);
    std::swap(kv_req_, other->kv_req_);
    std::swap(kv_resp_, other->kv_resp_);
    std::swap(cop_req_, other->cop_req_);
    std::swap(cop_resp_, other->cop_resp_);
    std::swap(pd_req_, other->pd_req_);
    std::swap(pd_resp_, other->pd_resp_);
    std::swap(volume_req_, other->volume_req_);
    std::swap(volume_resp_, other->volume_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgpb

// @@protoc_insertion_point(global_scope)
