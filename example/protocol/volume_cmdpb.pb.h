// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: volume_cmdpb.proto

#ifndef PROTOBUF_volume_5fcmdpb_2eproto__INCLUDED
#define PROTOBUF_volume_5fcmdpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace volume_cmdpb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_volume_5fcmdpb_2eproto();
void protobuf_AssignDesc_volume_5fcmdpb_2eproto();
void protobuf_ShutdownFile_volume_5fcmdpb_2eproto();

class AddRequest;
class AddResponse;
class Request;
class Response;

enum CmdType {
  Invalid = 0,
  Add = 1
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = Invalid;
const CmdType CmdType_MAX = Add;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
// ===================================================================

class AddRequest : public ::google::protobuf::Message {
 public:
  AddRequest();
  virtual ~AddRequest();

  AddRequest(const AddRequest& from);

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRequest& default_instance();

  void Swap(AddRequest* other);

  // implements Message ----------------------------------------------

  AddRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddRequest& from);
  void MergeFrom(const AddRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint64 count() const;
  inline void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:volume_cmdpb.AddRequest)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 count_;
  friend void  protobuf_AddDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_volume_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static AddRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddResponse : public ::google::protobuf::Message {
 public:
  AddResponse();
  virtual ~AddResponse();

  AddResponse(const AddResponse& from);

  inline AddResponse& operator=(const AddResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddResponse& default_instance();

  void Swap(AddResponse* other);

  // implements Message ----------------------------------------------

  AddResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddResponse& from);
  void MergeFrom(const AddResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 volume_ids = 1;
  inline int volume_ids_size() const;
  inline void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  inline ::google::protobuf::uint64 volume_ids(int index) const;
  inline void set_volume_ids(int index, ::google::protobuf::uint64 value);
  inline void add_volume_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      volume_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_volume_ids();

  // @@protoc_insertion_point(class_scope:volume_cmdpb.AddResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > volume_ids_;
  friend void  protobuf_AddDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_volume_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static AddResponse* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .volume_cmdpb.CmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::volume_cmdpb::CmdType cmd_type() const;
  inline void set_cmd_type(::volume_cmdpb::CmdType value);

  // optional .volume_cmdpb.AddRequest add = 2;
  inline bool has_add() const;
  inline void clear_add();
  static const int kAddFieldNumber = 2;
  inline const ::volume_cmdpb::AddRequest& add() const;
  inline ::volume_cmdpb::AddRequest* mutable_add();
  inline ::volume_cmdpb::AddRequest* release_add();
  inline void set_allocated_add(::volume_cmdpb::AddRequest* add);

  // @@protoc_insertion_point(class_scope:volume_cmdpb.Request)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_add();
  inline void clear_has_add();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::volume_cmdpb::AddRequest* add_;
  int cmd_type_;
  friend void  protobuf_AddDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_volume_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .volume_cmdpb.CmdType cmd_type = 1;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  inline ::volume_cmdpb::CmdType cmd_type() const;
  inline void set_cmd_type(::volume_cmdpb::CmdType value);

  // optional .volume_cmdpb.AddResponse add = 2;
  inline bool has_add() const;
  inline void clear_add();
  static const int kAddFieldNumber = 2;
  inline const ::volume_cmdpb::AddResponse& add() const;
  inline ::volume_cmdpb::AddResponse* mutable_add();
  inline ::volume_cmdpb::AddResponse* release_add();
  inline void set_allocated_add(::volume_cmdpb::AddResponse* add);

  // @@protoc_insertion_point(class_scope:volume_cmdpb.Response)
 private:
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_add();
  inline void clear_has_add();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::volume_cmdpb::AddResponse* add_;
  int cmd_type_;
  friend void  protobuf_AddDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_AssignDesc_volume_5fcmdpb_2eproto();
  friend void protobuf_ShutdownFile_volume_5fcmdpb_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// AddRequest

// optional uint64 count = 1;
inline bool AddRequest::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddRequest::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 AddRequest::count() const {
  // @@protoc_insertion_point(field_get:volume_cmdpb.AddRequest.count)
  return count_;
}
inline void AddRequest::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:volume_cmdpb.AddRequest.count)
}

// -------------------------------------------------------------------

// AddResponse

// repeated uint64 volume_ids = 1;
inline int AddResponse::volume_ids_size() const {
  return volume_ids_.size();
}
inline void AddResponse::clear_volume_ids() {
  volume_ids_.Clear();
}
inline ::google::protobuf::uint64 AddResponse::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:volume_cmdpb.AddResponse.volume_ids)
  return volume_ids_.Get(index);
}
inline void AddResponse::set_volume_ids(int index, ::google::protobuf::uint64 value) {
  volume_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:volume_cmdpb.AddResponse.volume_ids)
}
inline void AddResponse::add_volume_ids(::google::protobuf::uint64 value) {
  volume_ids_.Add(value);
  // @@protoc_insertion_point(field_add:volume_cmdpb.AddResponse.volume_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AddResponse::volume_ids() const {
  // @@protoc_insertion_point(field_list:volume_cmdpb.AddResponse.volume_ids)
  return volume_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AddResponse::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:volume_cmdpb.AddResponse.volume_ids)
  return &volume_ids_;
}

// -------------------------------------------------------------------

// Request

// optional .volume_cmdpb.CmdType cmd_type = 1;
inline bool Request::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::volume_cmdpb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:volume_cmdpb.Request.cmd_type)
  return static_cast< ::volume_cmdpb::CmdType >(cmd_type_);
}
inline void Request::set_cmd_type(::volume_cmdpb::CmdType value) {
  assert(::volume_cmdpb::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:volume_cmdpb.Request.cmd_type)
}

// optional .volume_cmdpb.AddRequest add = 2;
inline bool Request::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_add() {
  if (add_ != NULL) add_->::volume_cmdpb::AddRequest::Clear();
  clear_has_add();
}
inline const ::volume_cmdpb::AddRequest& Request::add() const {
  // @@protoc_insertion_point(field_get:volume_cmdpb.Request.add)
  return add_ != NULL ? *add_ : *default_instance_->add_;
}
inline ::volume_cmdpb::AddRequest* Request::mutable_add() {
  set_has_add();
  if (add_ == NULL) add_ = new ::volume_cmdpb::AddRequest;
  // @@protoc_insertion_point(field_mutable:volume_cmdpb.Request.add)
  return add_;
}
inline ::volume_cmdpb::AddRequest* Request::release_add() {
  clear_has_add();
  ::volume_cmdpb::AddRequest* temp = add_;
  add_ = NULL;
  return temp;
}
inline void Request::set_allocated_add(::volume_cmdpb::AddRequest* add) {
  delete add_;
  add_ = add;
  if (add) {
    set_has_add();
  } else {
    clear_has_add();
  }
  // @@protoc_insertion_point(field_set_allocated:volume_cmdpb.Request.add)
}

// -------------------------------------------------------------------

// Response

// optional .volume_cmdpb.CmdType cmd_type = 1;
inline bool Response::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::volume_cmdpb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:volume_cmdpb.Response.cmd_type)
  return static_cast< ::volume_cmdpb::CmdType >(cmd_type_);
}
inline void Response::set_cmd_type(::volume_cmdpb::CmdType value) {
  assert(::volume_cmdpb::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:volume_cmdpb.Response.cmd_type)
}

// optional .volume_cmdpb.AddResponse add = 2;
inline bool Response::has_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_add() {
  if (add_ != NULL) add_->::volume_cmdpb::AddResponse::Clear();
  clear_has_add();
}
inline const ::volume_cmdpb::AddResponse& Response::add() const {
  // @@protoc_insertion_point(field_get:volume_cmdpb.Response.add)
  return add_ != NULL ? *add_ : *default_instance_->add_;
}
inline ::volume_cmdpb::AddResponse* Response::mutable_add() {
  set_has_add();
  if (add_ == NULL) add_ = new ::volume_cmdpb::AddResponse;
  // @@protoc_insertion_point(field_mutable:volume_cmdpb.Response.add)
  return add_;
}
inline ::volume_cmdpb::AddResponse* Response::release_add() {
  clear_has_add();
  ::volume_cmdpb::AddResponse* temp = add_;
  add_ = NULL;
  return temp;
}
inline void Response::set_allocated_add(::volume_cmdpb::AddResponse* add) {
  delete add_;
  add_ = add;
  if (add) {
    set_has_add();
  } else {
    clear_has_add();
  }
  // @@protoc_insertion_point(field_set_allocated:volume_cmdpb.Response.add)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace volume_cmdpb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::volume_cmdpb::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::volume_cmdpb::CmdType>() {
  return ::volume_cmdpb::CmdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_volume_5fcmdpb_2eproto__INCLUDED
