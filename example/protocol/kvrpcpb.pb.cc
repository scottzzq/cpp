// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kvrpcpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kvrpcpb {

namespace {

const ::google::protobuf::Descriptor* LockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyError_reflection_ = NULL;
const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KvPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KvPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdPrewriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdPrewriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdPrewriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdPrewriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchRollbackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchRollbackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchRollbackResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchRollbackResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCleanupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCleanupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdCleanupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdCleanupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdBatchGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdBatchGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdScanLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdScanLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResolveLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResolveLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResolveLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResolveLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawPutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawPutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawPutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawPutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdRawDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdRawDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kvrpcpb_2eproto() {
  protobuf_AddDesc_kvrpcpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kvrpcpb.proto");
  GOOGLE_CHECK(file != NULL);
  LockInfo_descriptor_ = file->message_type(0);
  static const int LockInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, primary_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, lock_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, lock_ttl_),
  };
  LockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LockInfo_descriptor_,
      LockInfo::default_instance_,
      LockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LockInfo));
  KeyError_descriptor_ = file->message_type(1);
  static const int KeyError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, retryable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, abort_),
  };
  KeyError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyError_descriptor_,
      KeyError::default_instance_,
      KeyError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyError));
  Context_descriptor_ = file->message_type(2);
  static const int Context_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, read_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, term_),
  };
  Context_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Context_descriptor_,
      Context::default_instance_,
      Context_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Context));
  CmdGetRequest_descriptor_ = file->message_type(3);
  static const int CmdGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, version_),
  };
  CmdGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGetRequest_descriptor_,
      CmdGetRequest::default_instance_,
      CmdGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGetRequest));
  CmdGetResponse_descriptor_ = file->message_type(4);
  static const int CmdGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, value_),
  };
  CmdGetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGetResponse_descriptor_,
      CmdGetResponse::default_instance_,
      CmdGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGetResponse));
  CmdScanRequest_descriptor_ = file->message_type(5);
  static const int CmdScanRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, key_only_),
  };
  CmdScanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdScanRequest_descriptor_,
      CmdScanRequest::default_instance_,
      CmdScanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdScanRequest));
  KvPair_descriptor_ = file->message_type(6);
  static const int KvPair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, value_),
  };
  KvPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KvPair_descriptor_,
      KvPair::default_instance_,
      KvPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KvPair));
  CmdScanResponse_descriptor_ = file->message_type(7);
  static const int CmdScanResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanResponse, pairs_),
  };
  CmdScanResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdScanResponse_descriptor_,
      CmdScanResponse::default_instance_,
      CmdScanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdScanResponse));
  Mutation_descriptor_ = file->message_type(8);
  static const int Mutation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, value_),
  };
  Mutation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mutation_descriptor_,
      Mutation::default_instance_,
      Mutation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mutation));
  CmdPrewriteRequest_descriptor_ = file->message_type(9);
  static const int CmdPrewriteRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, primary_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, lock_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, skip_constraint_check_),
  };
  CmdPrewriteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdPrewriteRequest_descriptor_,
      CmdPrewriteRequest::default_instance_,
      CmdPrewriteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdPrewriteRequest));
  CmdPrewriteResponse_descriptor_ = file->message_type(10);
  static const int CmdPrewriteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteResponse, errors_),
  };
  CmdPrewriteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdPrewriteResponse_descriptor_,
      CmdPrewriteResponse::default_instance_,
      CmdPrewriteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdPrewriteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdPrewriteResponse));
  CmdCommitRequest_descriptor_ = file->message_type(11);
  static const int CmdCommitRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, commit_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, binlog_),
  };
  CmdCommitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCommitRequest_descriptor_,
      CmdCommitRequest::default_instance_,
      CmdCommitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCommitRequest));
  CmdCommitResponse_descriptor_ = file->message_type(12);
  static const int CmdCommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitResponse, error_),
  };
  CmdCommitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCommitResponse_descriptor_,
      CmdCommitResponse::default_instance_,
      CmdCommitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCommitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCommitResponse));
  CmdBatchRollbackRequest_descriptor_ = file->message_type(13);
  static const int CmdBatchRollbackRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, keys_),
  };
  CmdBatchRollbackRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdBatchRollbackRequest_descriptor_,
      CmdBatchRollbackRequest::default_instance_,
      CmdBatchRollbackRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdBatchRollbackRequest));
  CmdBatchRollbackResponse_descriptor_ = file->message_type(14);
  static const int CmdBatchRollbackResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackResponse, error_),
  };
  CmdBatchRollbackResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdBatchRollbackResponse_descriptor_,
      CmdBatchRollbackResponse::default_instance_,
      CmdBatchRollbackResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchRollbackResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdBatchRollbackResponse));
  CmdCleanupRequest_descriptor_ = file->message_type(15);
  static const int CmdCleanupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, start_version_),
  };
  CmdCleanupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCleanupRequest_descriptor_,
      CmdCleanupRequest::default_instance_,
      CmdCleanupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCleanupRequest));
  CmdCleanupResponse_descriptor_ = file->message_type(16);
  static const int CmdCleanupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, commit_version_),
  };
  CmdCleanupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdCleanupResponse_descriptor_,
      CmdCleanupResponse::default_instance_,
      CmdCleanupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdCleanupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdCleanupResponse));
  CmdBatchGetRequest_descriptor_ = file->message_type(17);
  static const int CmdBatchGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, version_),
  };
  CmdBatchGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdBatchGetRequest_descriptor_,
      CmdBatchGetRequest::default_instance_,
      CmdBatchGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdBatchGetRequest));
  CmdBatchGetResponse_descriptor_ = file->message_type(18);
  static const int CmdBatchGetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetResponse, pairs_),
  };
  CmdBatchGetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdBatchGetResponse_descriptor_,
      CmdBatchGetResponse::default_instance_,
      CmdBatchGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdBatchGetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdBatchGetResponse));
  CmdScanLockRequest_descriptor_ = file->message_type(19);
  static const int CmdScanLockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockRequest, max_version_),
  };
  CmdScanLockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdScanLockRequest_descriptor_,
      CmdScanLockRequest::default_instance_,
      CmdScanLockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdScanLockRequest));
  CmdScanLockResponse_descriptor_ = file->message_type(20);
  static const int CmdScanLockResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, locks_),
  };
  CmdScanLockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdScanLockResponse_descriptor_,
      CmdScanLockResponse::default_instance_,
      CmdScanLockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdScanLockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdScanLockResponse));
  CmdResolveLockRequest_descriptor_ = file->message_type(21);
  static const int CmdResolveLockRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, commit_version_),
  };
  CmdResolveLockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResolveLockRequest_descriptor_,
      CmdResolveLockRequest::default_instance_,
      CmdResolveLockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResolveLockRequest));
  CmdResolveLockResponse_descriptor_ = file->message_type(22);
  static const int CmdResolveLockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockResponse, error_),
  };
  CmdResolveLockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdResolveLockResponse_descriptor_,
      CmdResolveLockResponse::default_instance_,
      CmdResolveLockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResolveLockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdResolveLockResponse));
  CmdGCRequest_descriptor_ = file->message_type(23);
  static const int CmdGCRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCRequest, safe_point_),
  };
  CmdGCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGCRequest_descriptor_,
      CmdGCRequest::default_instance_,
      CmdGCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGCRequest));
  CmdGCResponse_descriptor_ = file->message_type(24);
  static const int CmdGCResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCResponse, error_),
  };
  CmdGCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGCResponse_descriptor_,
      CmdGCResponse::default_instance_,
      CmdGCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGCResponse));
  CmdRawGetRequest_descriptor_ = file->message_type(25);
  static const int CmdRawGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetRequest, key_),
  };
  CmdRawGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRawGetRequest_descriptor_,
      CmdRawGetRequest::default_instance_,
      CmdRawGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRawGetRequest));
  CmdRawGetResponse_descriptor_ = file->message_type(26);
  static const int CmdRawGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, value_),
  };
  CmdRawGetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRawGetResponse_descriptor_,
      CmdRawGetResponse::default_instance_,
      CmdRawGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawGetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRawGetResponse));
  CmdRawPutRequest_descriptor_ = file->message_type(27);
  static const int CmdRawPutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, value_),
  };
  CmdRawPutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRawPutRequest_descriptor_,
      CmdRawPutRequest::default_instance_,
      CmdRawPutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRawPutRequest));
  CmdRawPutResponse_descriptor_ = file->message_type(28);
  static const int CmdRawPutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutResponse, error_),
  };
  CmdRawPutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRawPutResponse_descriptor_,
      CmdRawPutResponse::default_instance_,
      CmdRawPutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawPutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRawPutResponse));
  CmdRawDeleteRequest_descriptor_ = file->message_type(29);
  static const int CmdRawDeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteRequest, key_),
  };
  CmdRawDeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRawDeleteRequest_descriptor_,
      CmdRawDeleteRequest::default_instance_,
      CmdRawDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRawDeleteRequest));
  CmdRawDeleteResponse_descriptor_ = file->message_type(30);
  static const int CmdRawDeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteResponse, error_),
  };
  CmdRawDeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdRawDeleteResponse_descriptor_,
      CmdRawDeleteResponse::default_instance_,
      CmdRawDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdRawDeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdRawDeleteResponse));
  Request_descriptor_ = file->message_type(31);
  static const int Request_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_scan_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_prewrite_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_commit_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_cleanup_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_batch_get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_batch_rollback_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_scan_lock_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_resolve_lock_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_gc_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_raw_get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_raw_put_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_raw_delete_req_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(32);
  static const int Response_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_get_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_scan_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_prewrite_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_commit_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_cleanup_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_batch_get_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_batch_rollback_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_scan_lock_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_resolve_lock_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_gc_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_raw_get_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_raw_put_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_raw_delete_resp_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  MessageType_descriptor_ = file->enum_type(0);
  Op_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kvrpcpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LockInfo_descriptor_, &LockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyError_descriptor_, &KeyError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Context_descriptor_, &Context::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGetRequest_descriptor_, &CmdGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGetResponse_descriptor_, &CmdGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdScanRequest_descriptor_, &CmdScanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KvPair_descriptor_, &KvPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdScanResponse_descriptor_, &CmdScanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mutation_descriptor_, &Mutation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdPrewriteRequest_descriptor_, &CmdPrewriteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdPrewriteResponse_descriptor_, &CmdPrewriteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCommitRequest_descriptor_, &CmdCommitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCommitResponse_descriptor_, &CmdCommitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdBatchRollbackRequest_descriptor_, &CmdBatchRollbackRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdBatchRollbackResponse_descriptor_, &CmdBatchRollbackResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCleanupRequest_descriptor_, &CmdCleanupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdCleanupResponse_descriptor_, &CmdCleanupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdBatchGetRequest_descriptor_, &CmdBatchGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdBatchGetResponse_descriptor_, &CmdBatchGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdScanLockRequest_descriptor_, &CmdScanLockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdScanLockResponse_descriptor_, &CmdScanLockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResolveLockRequest_descriptor_, &CmdResolveLockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdResolveLockResponse_descriptor_, &CmdResolveLockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGCRequest_descriptor_, &CmdGCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGCResponse_descriptor_, &CmdGCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRawGetRequest_descriptor_, &CmdRawGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRawGetResponse_descriptor_, &CmdRawGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRawPutRequest_descriptor_, &CmdRawPutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRawPutResponse_descriptor_, &CmdRawPutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRawDeleteRequest_descriptor_, &CmdRawDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdRawDeleteResponse_descriptor_, &CmdRawDeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kvrpcpb_2eproto() {
  delete LockInfo::default_instance_;
  delete LockInfo_reflection_;
  delete KeyError::default_instance_;
  delete KeyError_reflection_;
  delete Context::default_instance_;
  delete Context_reflection_;
  delete CmdGetRequest::default_instance_;
  delete CmdGetRequest_reflection_;
  delete CmdGetResponse::default_instance_;
  delete CmdGetResponse_reflection_;
  delete CmdScanRequest::default_instance_;
  delete CmdScanRequest_reflection_;
  delete KvPair::default_instance_;
  delete KvPair_reflection_;
  delete CmdScanResponse::default_instance_;
  delete CmdScanResponse_reflection_;
  delete Mutation::default_instance_;
  delete Mutation_reflection_;
  delete CmdPrewriteRequest::default_instance_;
  delete CmdPrewriteRequest_reflection_;
  delete CmdPrewriteResponse::default_instance_;
  delete CmdPrewriteResponse_reflection_;
  delete CmdCommitRequest::default_instance_;
  delete CmdCommitRequest_reflection_;
  delete CmdCommitResponse::default_instance_;
  delete CmdCommitResponse_reflection_;
  delete CmdBatchRollbackRequest::default_instance_;
  delete CmdBatchRollbackRequest_reflection_;
  delete CmdBatchRollbackResponse::default_instance_;
  delete CmdBatchRollbackResponse_reflection_;
  delete CmdCleanupRequest::default_instance_;
  delete CmdCleanupRequest_reflection_;
  delete CmdCleanupResponse::default_instance_;
  delete CmdCleanupResponse_reflection_;
  delete CmdBatchGetRequest::default_instance_;
  delete CmdBatchGetRequest_reflection_;
  delete CmdBatchGetResponse::default_instance_;
  delete CmdBatchGetResponse_reflection_;
  delete CmdScanLockRequest::default_instance_;
  delete CmdScanLockRequest_reflection_;
  delete CmdScanLockResponse::default_instance_;
  delete CmdScanLockResponse_reflection_;
  delete CmdResolveLockRequest::default_instance_;
  delete CmdResolveLockRequest_reflection_;
  delete CmdResolveLockResponse::default_instance_;
  delete CmdResolveLockResponse_reflection_;
  delete CmdGCRequest::default_instance_;
  delete CmdGCRequest_reflection_;
  delete CmdGCResponse::default_instance_;
  delete CmdGCResponse_reflection_;
  delete CmdRawGetRequest::default_instance_;
  delete CmdRawGetRequest_reflection_;
  delete CmdRawGetResponse::default_instance_;
  delete CmdRawGetResponse_reflection_;
  delete CmdRawPutRequest::default_instance_;
  delete CmdRawPutRequest_reflection_;
  delete CmdRawPutResponse::default_instance_;
  delete CmdRawPutResponse_reflection_;
  delete CmdRawDeleteRequest::default_instance_;
  delete CmdRawDeleteRequest_reflection_;
  delete CmdRawDeleteResponse::default_instance_;
  delete CmdRawDeleteResponse_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_kvrpcpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rkvrpcpb.proto\022\007kvrpcpb\032\014metapb.proto\032\r"
    "errorpb.proto\"U\n\010LockInfo\022\024\n\014primary_loc"
    "k\030\001 \001(\014\022\024\n\014lock_version\030\002 \001(\004\022\013\n\003key\030\003 \001"
    "(\014\022\020\n\010lock_ttl\030\004 \001(\004\"O\n\010KeyError\022!\n\006lock"
    "ed\030\001 \001(\0132\021.kvrpcpb.LockInfo\022\021\n\tretryable"
    "\030\002 \001(\t\022\r\n\005abort\030\003 \001(\t\"\206\001\n\007Context\022\021\n\treg"
    "ion_id\030\001 \001(\004\022)\n\014region_epoch\030\002 \001(\0132\023.met"
    "apb.RegionEpoch\022\032\n\004peer\030\003 \001(\0132\014.metapb.P"
    "eer\022\023\n\013read_quorum\030\004 \001(\010\022\014\n\004term\030\005 \001(\004\"-"
    "\n\rCmdGetRequest\022\013\n\003key\030\001 \001(\014\022\017\n\007version\030"
    "\002 \001(\004\"A\n\016CmdGetResponse\022 \n\005error\030\001 \001(\0132\021"
    ".kvrpcpb.KeyError\022\r\n\005value\030\002 \001(\014\"U\n\016CmdS"
    "canRequest\022\021\n\tstart_key\030\001 \001(\014\022\r\n\005limit\030\002"
    " \001(\r\022\017\n\007version\030\003 \001(\004\022\020\n\010key_only\030\004 \001(\010\""
    "F\n\006KvPair\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.KeyEr"
    "ror\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"1\n\017CmdSc"
    "anResponse\022\036\n\005pairs\030\001 \003(\0132\017.kvrpcpb.KvPa"
    "ir\"\?\n\010Mutation\022\027\n\002op\030\001 \001(\0162\013.kvrpcpb.Op\022"
    "\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\230\001\n\022CmdPrewr"
    "iteRequest\022$\n\tmutations\030\001 \003(\0132\021.kvrpcpb."
    "Mutation\022\024\n\014primary_lock\030\002 \001(\014\022\025\n\rstart_"
    "version\030\003 \001(\004\022\020\n\010lock_ttl\030\004 \001(\004\022\035\n\025skip_"
    "constraint_check\030\005 \001(\010\"8\n\023CmdPrewriteRes"
    "ponse\022!\n\006errors\030\001 \003(\0132\021.kvrpcpb.KeyError"
    "\"_\n\020CmdCommitRequest\022\025\n\rstart_version\030\001 "
    "\001(\004\022\014\n\004keys\030\002 \003(\014\022\026\n\016commit_version\030\003 \001("
    "\004\022\016\n\006binlog\030\004 \001(\014\"5\n\021CmdCommitResponse\022 "
    "\n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\">\n\027CmdB"
    "atchRollbackRequest\022\025\n\rstart_version\030\001 \001"
    "(\004\022\014\n\004keys\030\002 \003(\014\"<\n\030CmdBatchRollbackResp"
    "onse\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\"7"
    "\n\021CmdCleanupRequest\022\013\n\003key\030\001 \001(\014\022\025\n\rstar"
    "t_version\030\002 \001(\004\"N\n\022CmdCleanupResponse\022 \n"
    "\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\022\026\n\016commi"
    "t_version\030\002 \001(\004\"3\n\022CmdBatchGetRequest\022\014\n"
    "\004keys\030\001 \003(\014\022\017\n\007version\030\002 \001(\004\"5\n\023CmdBatch"
    "GetResponse\022\036\n\005pairs\030\001 \003(\0132\017.kvrpcpb.KvP"
    "air\")\n\022CmdScanLockRequest\022\023\n\013max_version"
    "\030\001 \001(\004\"Y\n\023CmdScanLockResponse\022 \n\005error\030\001"
    " \001(\0132\021.kvrpcpb.KeyError\022 \n\005locks\030\002 \003(\0132\021"
    ".kvrpcpb.LockInfo\"F\n\025CmdResolveLockReque"
    "st\022\025\n\rstart_version\030\001 \001(\004\022\026\n\016commit_vers"
    "ion\030\002 \001(\004\":\n\026CmdResolveLockResponse\022 \n\005e"
    "rror\030\001 \001(\0132\021.kvrpcpb.KeyError\"\"\n\014CmdGCRe"
    "quest\022\022\n\nsafe_point\030\001 \001(\004\"1\n\rCmdGCRespon"
    "se\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\"\037\n\020"
    "CmdRawGetRequest\022\013\n\003key\030\001 \001(\014\"1\n\021CmdRawG"
    "etResponse\022\r\n\005error\030\001 \001(\t\022\r\n\005value\030\002 \001(\014"
    "\".\n\020CmdRawPutRequest\022\013\n\003key\030\001 \001(\014\022\r\n\005val"
    "ue\030\002 \001(\014\"\"\n\021CmdRawPutResponse\022\r\n\005error\030\001"
    " \001(\t\"\"\n\023CmdRawDeleteRequest\022\013\n\003key\030\001 \001(\014"
    "\"%\n\024CmdRawDeleteResponse\022\r\n\005error\030\001 \001(\t\""
    "\213\006\n\007Request\022\"\n\004type\030\001 \001(\0162\024.kvrpcpb.Mess"
    "ageType\022!\n\007context\030\002 \001(\0132\020.kvrpcpb.Conte"
    "xt\022+\n\013cmd_get_req\030\003 \001(\0132\026.kvrpcpb.CmdGet"
    "Request\022-\n\014cmd_scan_req\030\004 \001(\0132\027.kvrpcpb."
    "CmdScanRequest\0225\n\020cmd_prewrite_req\030\005 \001(\013"
    "2\033.kvrpcpb.CmdPrewriteRequest\0221\n\016cmd_com"
    "mit_req\030\006 \001(\0132\031.kvrpcpb.CmdCommitRequest"
    "\0223\n\017cmd_cleanup_req\030\007 \001(\0132\032.kvrpcpb.CmdC"
    "leanupRequest\0226\n\021cmd_batch_get_req\030\n \001(\013"
    "2\033.kvrpcpb.CmdBatchGetRequest\022@\n\026cmd_bat"
    "ch_rollback_req\030\013 \001(\0132 .kvrpcpb.CmdBatch"
    "RollbackRequest\0226\n\021cmd_scan_lock_req\030\014 \001"
    "(\0132\033.kvrpcpb.CmdScanLockRequest\022<\n\024cmd_r"
    "esolve_lock_req\030\r \001(\0132\036.kvrpcpb.CmdResol"
    "veLockRequest\022)\n\ncmd_gc_req\030\016 \001(\0132\025.kvrp"
    "cpb.CmdGCRequest\0223\n\017cmd_raw_get_req\030\200\002 \001"
    "(\0132\031.kvrpcpb.CmdRawGetRequest\0223\n\017cmd_raw"
    "_put_req\030\201\002 \001(\0132\031.kvrpcpb.CmdRawPutReque"
    "st\0229\n\022cmd_raw_delete_req\030\202\002 \001(\0132\034.kvrpcp"
    "b.CmdRawDeleteRequest\"\251\006\n\010Response\022\"\n\004ty"
    "pe\030\001 \001(\0162\024.kvrpcpb.MessageType\022$\n\014region"
    "_error\030\002 \001(\0132\016.errorpb.Error\022-\n\014cmd_get_"
    "resp\030\003 \001(\0132\027.kvrpcpb.CmdGetResponse\022/\n\rc"
    "md_scan_resp\030\004 \001(\0132\030.kvrpcpb.CmdScanResp"
    "onse\0227\n\021cmd_prewrite_resp\030\005 \001(\0132\034.kvrpcp"
    "b.CmdPrewriteResponse\0223\n\017cmd_commit_resp"
    "\030\006 \001(\0132\032.kvrpcpb.CmdCommitResponse\0225\n\020cm"
    "d_cleanup_resp\030\007 \001(\0132\033.kvrpcpb.CmdCleanu"
    "pResponse\0228\n\022cmd_batch_get_resp\030\n \001(\0132\034."
    "kvrpcpb.CmdBatchGetResponse\022B\n\027cmd_batch"
    "_rollback_resp\030\013 \001(\0132!.kvrpcpb.CmdBatchR"
    "ollbackResponse\0228\n\022cmd_scan_lock_resp\030\014 "
    "\001(\0132\034.kvrpcpb.CmdScanLockResponse\022>\n\025cmd"
    "_resolve_lock_resp\030\r \001(\0132\037.kvrpcpb.CmdRe"
    "solveLockResponse\022+\n\013cmd_gc_resp\030\016 \001(\0132\026"
    ".kvrpcpb.CmdGCResponse\0225\n\020cmd_raw_get_re"
    "sp\030\200\002 \001(\0132\032.kvrpcpb.CmdRawGetResponse\0225\n"
    "\020cmd_raw_put_resp\030\201\002 \001(\0132\032.kvrpcpb.CmdRa"
    "wPutResponse\022;\n\023cmd_raw_delete_resp\030\202\002 \001"
    "(\0132\035.kvrpcpb.CmdRawDeleteResponse*\340\001\n\013Me"
    "ssageType\022\n\n\006CmdGet\020\000\022\013\n\007CmdScan\020\001\022\017\n\013Cm"
    "dPrewrite\020\002\022\r\n\tCmdCommit\020\003\022\016\n\nCmdCleanup"
    "\020\004\022\017\n\013CmdBatchGet\020\007\022\024\n\020CmdBatchRollback\020"
    "\010\022\017\n\013CmdScanLock\020\t\022\022\n\016CmdResolveLock\020\n\022\t"
    "\n\005CmdGC\020\013\022\016\n\tCmdRawGet\020\200\002\022\016\n\tCmdRawPut\020\201"
    "\002\022\021\n\014CmdRawDelete\020\202\002* \n\002Op\022\007\n\003Put\020\000\022\007\n\003D"
    "el\020\001\022\010\n\004Lock\020\002", 3934);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kvrpcpb.proto", &protobuf_RegisterTypes);
  LockInfo::default_instance_ = new LockInfo();
  KeyError::default_instance_ = new KeyError();
  Context::default_instance_ = new Context();
  CmdGetRequest::default_instance_ = new CmdGetRequest();
  CmdGetResponse::default_instance_ = new CmdGetResponse();
  CmdScanRequest::default_instance_ = new CmdScanRequest();
  KvPair::default_instance_ = new KvPair();
  CmdScanResponse::default_instance_ = new CmdScanResponse();
  Mutation::default_instance_ = new Mutation();
  CmdPrewriteRequest::default_instance_ = new CmdPrewriteRequest();
  CmdPrewriteResponse::default_instance_ = new CmdPrewriteResponse();
  CmdCommitRequest::default_instance_ = new CmdCommitRequest();
  CmdCommitResponse::default_instance_ = new CmdCommitResponse();
  CmdBatchRollbackRequest::default_instance_ = new CmdBatchRollbackRequest();
  CmdBatchRollbackResponse::default_instance_ = new CmdBatchRollbackResponse();
  CmdCleanupRequest::default_instance_ = new CmdCleanupRequest();
  CmdCleanupResponse::default_instance_ = new CmdCleanupResponse();
  CmdBatchGetRequest::default_instance_ = new CmdBatchGetRequest();
  CmdBatchGetResponse::default_instance_ = new CmdBatchGetResponse();
  CmdScanLockRequest::default_instance_ = new CmdScanLockRequest();
  CmdScanLockResponse::default_instance_ = new CmdScanLockResponse();
  CmdResolveLockRequest::default_instance_ = new CmdResolveLockRequest();
  CmdResolveLockResponse::default_instance_ = new CmdResolveLockResponse();
  CmdGCRequest::default_instance_ = new CmdGCRequest();
  CmdGCResponse::default_instance_ = new CmdGCResponse();
  CmdRawGetRequest::default_instance_ = new CmdRawGetRequest();
  CmdRawGetResponse::default_instance_ = new CmdRawGetResponse();
  CmdRawPutRequest::default_instance_ = new CmdRawPutRequest();
  CmdRawPutResponse::default_instance_ = new CmdRawPutResponse();
  CmdRawDeleteRequest::default_instance_ = new CmdRawDeleteRequest();
  CmdRawDeleteResponse::default_instance_ = new CmdRawDeleteResponse();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  LockInfo::default_instance_->InitAsDefaultInstance();
  KeyError::default_instance_->InitAsDefaultInstance();
  Context::default_instance_->InitAsDefaultInstance();
  CmdGetRequest::default_instance_->InitAsDefaultInstance();
  CmdGetResponse::default_instance_->InitAsDefaultInstance();
  CmdScanRequest::default_instance_->InitAsDefaultInstance();
  KvPair::default_instance_->InitAsDefaultInstance();
  CmdScanResponse::default_instance_->InitAsDefaultInstance();
  Mutation::default_instance_->InitAsDefaultInstance();
  CmdPrewriteRequest::default_instance_->InitAsDefaultInstance();
  CmdPrewriteResponse::default_instance_->InitAsDefaultInstance();
  CmdCommitRequest::default_instance_->InitAsDefaultInstance();
  CmdCommitResponse::default_instance_->InitAsDefaultInstance();
  CmdBatchRollbackRequest::default_instance_->InitAsDefaultInstance();
  CmdBatchRollbackResponse::default_instance_->InitAsDefaultInstance();
  CmdCleanupRequest::default_instance_->InitAsDefaultInstance();
  CmdCleanupResponse::default_instance_->InitAsDefaultInstance();
  CmdBatchGetRequest::default_instance_->InitAsDefaultInstance();
  CmdBatchGetResponse::default_instance_->InitAsDefaultInstance();
  CmdScanLockRequest::default_instance_->InitAsDefaultInstance();
  CmdScanLockResponse::default_instance_->InitAsDefaultInstance();
  CmdResolveLockRequest::default_instance_->InitAsDefaultInstance();
  CmdResolveLockResponse::default_instance_->InitAsDefaultInstance();
  CmdGCRequest::default_instance_->InitAsDefaultInstance();
  CmdGCResponse::default_instance_->InitAsDefaultInstance();
  CmdRawGetRequest::default_instance_->InitAsDefaultInstance();
  CmdRawGetResponse::default_instance_->InitAsDefaultInstance();
  CmdRawPutRequest::default_instance_->InitAsDefaultInstance();
  CmdRawPutResponse::default_instance_->InitAsDefaultInstance();
  CmdRawDeleteRequest::default_instance_->InitAsDefaultInstance();
  CmdRawDeleteResponse::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kvrpcpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kvrpcpb_2eproto {
  StaticDescriptorInitializer_kvrpcpb_2eproto() {
    protobuf_AddDesc_kvrpcpb_2eproto();
  }
} static_descriptor_initializer_kvrpcpb_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 256:
    case 257:
    case 258:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}
bool Op_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LockInfo::kPrimaryLockFieldNumber;
const int LockInfo::kLockVersionFieldNumber;
const int LockInfo::kKeyFieldNumber;
const int LockInfo::kLockTtlFieldNumber;
#endif  // !_MSC_VER

LockInfo::LockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockInfo)
}

void LockInfo::InitAsDefaultInstance() {
}

LockInfo::LockInfo(const LockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockInfo)
}

void LockInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  primary_lock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_version_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_ttl_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  if (primary_lock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete primary_lock_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void LockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockInfo_descriptor_;
}

const LockInfo& LockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

LockInfo* LockInfo::default_instance_ = NULL;

LockInfo* LockInfo::New() const {
  return new LockInfo;
}

void LockInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_primary_lock()) {
      if (primary_lock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        primary_lock_->clear();
      }
    }
    lock_version_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    lock_ttl_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes primary_lock = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lock_version;
        break;
      }

      // optional uint64 lock_version = 2;
      case 2: {
        if (tag == 16) {
         parse_lock_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_version_)));
          set_has_lock_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lock_ttl;
        break;
      }

      // optional uint64 lock_ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_lock_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
          set_has_lock_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockInfo)
  return false;
#undef DO_
}

void LockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockInfo)
  // optional bytes primary_lock = 1;
  if (has_primary_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->primary_lock(), output);
  }

  // optional uint64 lock_version = 2;
  if (has_lock_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lock_version(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lock_ttl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockInfo)
}

::google::protobuf::uint8* LockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockInfo)
  // optional bytes primary_lock = 1;
  if (has_primary_lock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->primary_lock(), target);
  }

  // optional uint64 lock_version = 2;
  if (has_lock_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lock_version(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lock_ttl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockInfo)
  return target;
}

int LockInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes primary_lock = 1;
    if (has_primary_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->primary_lock());
    }

    // optional uint64 lock_version = 2;
    if (has_lock_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_version());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 lock_ttl = 4;
    if (has_lock_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_ttl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_lock()) {
      set_primary_lock(from.primary_lock());
    }
    if (from.has_lock_version()) {
      set_lock_version(from.lock_version());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_lock_ttl()) {
      set_lock_ttl(from.lock_ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {

  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other != this) {
    std::swap(primary_lock_, other->primary_lock_);
    std::swap(lock_version_, other->lock_version_);
    std::swap(key_, other->key_);
    std::swap(lock_ttl_, other->lock_ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockInfo_descriptor_;
  metadata.reflection = LockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyError::kLockedFieldNumber;
const int KeyError::kRetryableFieldNumber;
const int KeyError::kAbortFieldNumber;
#endif  // !_MSC_VER

KeyError::KeyError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KeyError)
}

void KeyError::InitAsDefaultInstance() {
  locked_ = const_cast< ::kvrpcpb::LockInfo*>(&::kvrpcpb::LockInfo::default_instance());
}

KeyError::KeyError(const KeyError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyError)
}

void KeyError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  locked_ = NULL;
  retryable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyError::~KeyError() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyError)
  SharedDtor();
}

void KeyError::SharedDtor() {
  if (retryable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retryable_;
  }
  if (abort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abort_;
  }
  if (this != default_instance_) {
    delete locked_;
  }
}

void KeyError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyError_descriptor_;
}

const KeyError& KeyError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

KeyError* KeyError::default_instance_ = NULL;

KeyError* KeyError::New() const {
  return new KeyError;
}

void KeyError::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_locked()) {
      if (locked_ != NULL) locked_->::kvrpcpb::LockInfo::Clear();
    }
    if (has_retryable()) {
      if (retryable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retryable_->clear();
      }
    }
    if (has_abort()) {
      if (abort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abort_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KeyError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.LockInfo locked = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locked()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retryable;
        break;
      }

      // optional string retryable = 2;
      case 2: {
        if (tag == 18) {
         parse_retryable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retryable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retryable().data(), this->retryable().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retryable");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abort;
        break;
      }

      // optional string abort = 3;
      case 3: {
        if (tag == 26) {
         parse_abort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abort()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abort().data(), this->abort().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abort");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KeyError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KeyError)
  return false;
#undef DO_
}

void KeyError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KeyError)
  // optional .kvrpcpb.LockInfo locked = 1;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->locked(), output);
  }

  // optional string retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retryable().data(), this->retryable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retryable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retryable(), output);
  }

  // optional string abort = 3;
  if (has_abort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abort().data(), this->abort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KeyError)
}

::google::protobuf::uint8* KeyError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyError)
  // optional .kvrpcpb.LockInfo locked = 1;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->locked(), target);
  }

  // optional string retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retryable().data(), this->retryable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retryable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retryable(), target);
  }

  // optional string abort = 3;
  if (has_abort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abort().data(), this->abort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyError)
  return target;
}

int KeyError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.LockInfo locked = 1;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locked());
    }

    // optional string retryable = 2;
    if (has_retryable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retryable());
    }

    // optional string abort = 3;
    if (has_abort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyError::MergeFrom(const KeyError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_locked()) {
      mutable_locked()->::kvrpcpb::LockInfo::MergeFrom(from.locked());
    }
    if (from.has_retryable()) {
      set_retryable(from.retryable());
    }
    if (from.has_abort()) {
      set_abort(from.abort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyError::CopyFrom(const KeyError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyError::IsInitialized() const {

  return true;
}

void KeyError::Swap(KeyError* other) {
  if (other != this) {
    std::swap(locked_, other->locked_);
    std::swap(retryable_, other->retryable_);
    std::swap(abort_, other->abort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyError_descriptor_;
  metadata.reflection = KeyError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Context::kRegionIdFieldNumber;
const int Context::kRegionEpochFieldNumber;
const int Context::kPeerFieldNumber;
const int Context::kReadQuorumFieldNumber;
const int Context::kTermFieldNumber;
#endif  // !_MSC_VER

Context::Context()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Context)
}

void Context::InitAsDefaultInstance() {
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(&::metapb::RegionEpoch::default_instance());
  peer_ = const_cast< ::metapb::Peer*>(&::metapb::Peer::default_instance());
}

Context::Context(const Context& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Context)
}

void Context::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  region_epoch_ = NULL;
  peer_ = NULL;
  read_quorum_ = false;
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  if (this != default_instance_) {
    delete region_epoch_;
    delete peer_;
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

Context* Context::default_instance_ = NULL;

Context* Context::New() const {
  return new Context;
}

void Context::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Context*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(term_, read_quorum_);
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_region_epoch()) {
      if (region_epoch_ != NULL) region_epoch_->::metapb::RegionEpoch::Clear();
    }
    if (has_peer()) {
      if (peer_ != NULL) peer_->::metapb::Peer::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Context)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 2;
      case 2: {
        if (tag == 18) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 3;
      case 3: {
        if (tag == 26) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_read_quorum;
        break;
      }

      // optional bool read_quorum = 4;
      case 4: {
        if (tag == 32) {
         parse_read_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_quorum_)));
          set_has_read_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_term;
        break;
      }

      // optional uint64 term = 5;
      case 5: {
        if (tag == 40) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Context)
  return false;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Context)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_epoch(), output);
  }

  // optional .metapb.Peer peer = 3;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->peer(), output);
  }

  // optional bool read_quorum = 4;
  if (has_read_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_quorum(), output);
  }

  // optional uint64 term = 5;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Context)
}

::google::protobuf::uint8* Context::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Context)
  // optional uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_epoch(), target);
  }

  // optional .metapb.Peer peer = 3;
  if (has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->peer(), target);
  }

  // optional bool read_quorum = 4;
  if (has_read_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_quorum(), target);
  }

  // optional uint64 term = 5;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Context)
  return target;
}

int Context::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // optional .metapb.RegionEpoch region_epoch = 2;
    if (has_region_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_epoch());
    }

    // optional .metapb.Peer peer = 3;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer());
    }

    // optional bool read_quorum = 4;
    if (has_read_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint64 term = 5;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Context* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Context*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_region_epoch()) {
      mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
    }
    if (from.has_peer()) {
      mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
    }
    if (from.has_read_quorum()) {
      set_read_quorum(from.read_quorum());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {

  return true;
}

void Context::Swap(Context* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(region_epoch_, other->region_epoch_);
    std::swap(peer_, other->peer_);
    std::swap(read_quorum_, other->read_quorum_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGetRequest::kKeyFieldNumber;
const int CmdGetRequest::kVersionFieldNumber;
#endif  // !_MSC_VER

CmdGetRequest::CmdGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGetRequest)
}

void CmdGetRequest::InitAsDefaultInstance() {
}

CmdGetRequest::CmdGetRequest(const CmdGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGetRequest)
}

void CmdGetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGetRequest::~CmdGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGetRequest)
  SharedDtor();
}

void CmdGetRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CmdGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetRequest_descriptor_;
}

const CmdGetRequest& CmdGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdGetRequest* CmdGetRequest::default_instance_ = NULL;

CmdGetRequest* CmdGetRequest::New() const {
  return new CmdGetRequest;
}

void CmdGetRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGetRequest)
  return false;
#undef DO_
}

void CmdGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGetRequest)
}

::google::protobuf::uint8* CmdGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGetRequest)
  return target;
}

int CmdGetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGetRequest::MergeFrom(const CmdGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetRequest::CopyFrom(const CmdGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGetRequest::IsInitialized() const {

  return true;
}

void CmdGetRequest::Swap(CmdGetRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetRequest_descriptor_;
  metadata.reflection = CmdGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGetResponse::kErrorFieldNumber;
const int CmdGetResponse::kValueFieldNumber;
#endif  // !_MSC_VER

CmdGetResponse::CmdGetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGetResponse)
}

void CmdGetResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdGetResponse::CmdGetResponse(const CmdGetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGetResponse)
}

void CmdGetResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGetResponse::~CmdGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGetResponse)
  SharedDtor();
}

void CmdGetResponse::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetResponse_descriptor_;
}

const CmdGetResponse& CmdGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdGetResponse* CmdGetResponse::default_instance_ = NULL;

CmdGetResponse* CmdGetResponse::New() const {
  return new CmdGetResponse;
}

void CmdGetResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGetResponse)
  return false;
#undef DO_
}

void CmdGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGetResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGetResponse)
}

::google::protobuf::uint8* CmdGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGetResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGetResponse)
  return target;
}

int CmdGetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGetResponse::MergeFrom(const CmdGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetResponse::CopyFrom(const CmdGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGetResponse::IsInitialized() const {

  return true;
}

void CmdGetResponse::Swap(CmdGetResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetResponse_descriptor_;
  metadata.reflection = CmdGetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdScanRequest::kStartKeyFieldNumber;
const int CmdScanRequest::kLimitFieldNumber;
const int CmdScanRequest::kVersionFieldNumber;
const int CmdScanRequest::kKeyOnlyFieldNumber;
#endif  // !_MSC_VER

CmdScanRequest::CmdScanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanRequest)
}

void CmdScanRequest::InitAsDefaultInstance() {
}

CmdScanRequest::CmdScanRequest(const CmdScanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanRequest)
}

void CmdScanRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0u;
  version_ = GOOGLE_ULONGLONG(0);
  key_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdScanRequest::~CmdScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanRequest)
  SharedDtor();
}

void CmdScanRequest::SharedDtor() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (this != default_instance_) {
  }
}

void CmdScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanRequest_descriptor_;
}

const CmdScanRequest& CmdScanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdScanRequest* CmdScanRequest::default_instance_ = NULL;

CmdScanRequest* CmdScanRequest::New() const {
  return new CmdScanRequest;
}

void CmdScanRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdScanRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(version_, key_only_);
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_only;
        break;
      }

      // optional bool key_only = 4;
      case 4: {
        if (tag == 32) {
         parse_key_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_only_)));
          set_has_key_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanRequest)
  return false;
#undef DO_
}

void CmdScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanRequest)
  // optional bytes start_key = 1;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // optional uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // optional uint64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  // optional bool key_only = 4;
  if (has_key_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->key_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanRequest)
}

::google::protobuf::uint8* CmdScanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanRequest)
  // optional bytes start_key = 1;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // optional uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // optional uint64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  // optional bool key_only = 4;
  if (has_key_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->key_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanRequest)
  return target;
}

int CmdScanRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_key = 1;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // optional uint64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional bool key_only = 4;
    if (has_key_only()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdScanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdScanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdScanRequest::MergeFrom(const CmdScanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_key_only()) {
      set_key_only(from.key_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanRequest::CopyFrom(const CmdScanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdScanRequest::IsInitialized() const {

  return true;
}

void CmdScanRequest::Swap(CmdScanRequest* other) {
  if (other != this) {
    std::swap(start_key_, other->start_key_);
    std::swap(limit_, other->limit_);
    std::swap(version_, other->version_);
    std::swap(key_only_, other->key_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanRequest_descriptor_;
  metadata.reflection = CmdScanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KvPair::kErrorFieldNumber;
const int KvPair::kKeyFieldNumber;
const int KvPair::kValueFieldNumber;
#endif  // !_MSC_VER

KvPair::KvPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvPair)
}

void KvPair::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

KvPair::KvPair(const KvPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPair)
}

void KvPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPair)
  SharedDtor();
}

void KvPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void KvPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KvPair_descriptor_;
}

const KvPair& KvPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

KvPair* KvPair::default_instance_ = NULL;

KvPair* KvPair::New() const {
  return new KvPair;
}

void KvPair::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_error()) {
      if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KvPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvPair)
  return false;
#undef DO_
}

void KvPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvPair)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvPair)
}

::google::protobuf::uint8* KvPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPair)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPair)
  return target;
}

int KvPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KvPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KvPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KvPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPair::IsInitialized() const {

  return true;
}

void KvPair::Swap(KvPair* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KvPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KvPair_descriptor_;
  metadata.reflection = KvPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdScanResponse::kPairsFieldNumber;
#endif  // !_MSC_VER

CmdScanResponse::CmdScanResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanResponse)
}

void CmdScanResponse::InitAsDefaultInstance() {
}

CmdScanResponse::CmdScanResponse(const CmdScanResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanResponse)
}

void CmdScanResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdScanResponse::~CmdScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanResponse)
  SharedDtor();
}

void CmdScanResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanResponse_descriptor_;
}

const CmdScanResponse& CmdScanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdScanResponse* CmdScanResponse::default_instance_ = NULL;

CmdScanResponse* CmdScanResponse::New() const {
  return new CmdScanResponse;
}

void CmdScanResponse::Clear() {
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KvPair pairs = 1;
      case 1: {
        if (tag == 10) {
         parse_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanResponse)
  return false;
#undef DO_
}

void CmdScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanResponse)
}

::google::protobuf::uint8* CmdScanResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanResponse)
  return target;
}

int CmdScanResponse::ByteSize() const {
  int total_size = 0;

  // repeated .kvrpcpb.KvPair pairs = 1;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdScanResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdScanResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdScanResponse::MergeFrom(const CmdScanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairs_.MergeFrom(from.pairs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanResponse::CopyFrom(const CmdScanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdScanResponse::IsInitialized() const {

  return true;
}

void CmdScanResponse::Swap(CmdScanResponse* other) {
  if (other != this) {
    pairs_.Swap(&other->pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanResponse_descriptor_;
  metadata.reflection = CmdScanResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mutation::kOpFieldNumber;
const int Mutation::kKeyFieldNumber;
const int Mutation::kValueFieldNumber;
#endif  // !_MSC_VER

Mutation::Mutation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Mutation)
}

void Mutation::InitAsDefaultInstance() {
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Mutation)
}

void Mutation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_descriptor_;
}

const Mutation& Mutation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

Mutation* Mutation::default_instance_ = NULL;

Mutation* Mutation::New() const {
  return new Mutation;
}

void Mutation::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    op_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Op op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kvrpcpb::Op_IsValid(value)) {
            set_op(static_cast< ::kvrpcpb::Op >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Mutation)
  // optional .kvrpcpb.Op op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Mutation)
}

::google::protobuf::uint8* Mutation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Mutation)
  // optional .kvrpcpb.Op op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Mutation)
  return target;
}

int Mutation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.Op op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mutation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mutation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_descriptor_;
  metadata.reflection = Mutation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdPrewriteRequest::kMutationsFieldNumber;
const int CmdPrewriteRequest::kPrimaryLockFieldNumber;
const int CmdPrewriteRequest::kStartVersionFieldNumber;
const int CmdPrewriteRequest::kLockTtlFieldNumber;
const int CmdPrewriteRequest::kSkipConstraintCheckFieldNumber;
#endif  // !_MSC_VER

CmdPrewriteRequest::CmdPrewriteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdPrewriteRequest)
}

void CmdPrewriteRequest::InitAsDefaultInstance() {
}

CmdPrewriteRequest::CmdPrewriteRequest(const CmdPrewriteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdPrewriteRequest)
}

void CmdPrewriteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  primary_lock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_version_ = GOOGLE_ULONGLONG(0);
  lock_ttl_ = GOOGLE_ULONGLONG(0);
  skip_constraint_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdPrewriteRequest::~CmdPrewriteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdPrewriteRequest)
  SharedDtor();
}

void CmdPrewriteRequest::SharedDtor() {
  if (primary_lock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete primary_lock_;
  }
  if (this != default_instance_) {
  }
}

void CmdPrewriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdPrewriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdPrewriteRequest_descriptor_;
}

const CmdPrewriteRequest& CmdPrewriteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdPrewriteRequest* CmdPrewriteRequest::default_instance_ = NULL;

CmdPrewriteRequest* CmdPrewriteRequest::New() const {
  return new CmdPrewriteRequest;
}

void CmdPrewriteRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdPrewriteRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(start_version_, skip_constraint_check_);
    if (has_primary_lock()) {
      if (primary_lock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        primary_lock_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mutations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdPrewriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdPrewriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.Mutation mutations = 1;
      case 1: {
        if (tag == 10) {
         parse_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mutations;
        if (input->ExpectTag(18)) goto parse_primary_lock;
        break;
      }

      // optional bytes primary_lock = 2;
      case 2: {
        if (tag == 18) {
         parse_primary_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 3;
      case 3: {
        if (tag == 24) {
         parse_start_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lock_ttl;
        break;
      }

      // optional uint64 lock_ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_lock_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
          set_has_lock_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skip_constraint_check;
        break;
      }

      // optional bool skip_constraint_check = 5;
      case 5: {
        if (tag == 40) {
         parse_skip_constraint_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_constraint_check_)));
          set_has_skip_constraint_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdPrewriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdPrewriteRequest)
  return false;
#undef DO_
}

void CmdPrewriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdPrewriteRequest)
  // repeated .kvrpcpb.Mutation mutations = 1;
  for (int i = 0; i < this->mutations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutations(i), output);
  }

  // optional bytes primary_lock = 2;
  if (has_primary_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->primary_lock(), output);
  }

  // optional uint64 start_version = 3;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_version(), output);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lock_ttl(), output);
  }

  // optional bool skip_constraint_check = 5;
  if (has_skip_constraint_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->skip_constraint_check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdPrewriteRequest)
}

::google::protobuf::uint8* CmdPrewriteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdPrewriteRequest)
  // repeated .kvrpcpb.Mutation mutations = 1;
  for (int i = 0; i < this->mutations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mutations(i), target);
  }

  // optional bytes primary_lock = 2;
  if (has_primary_lock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->primary_lock(), target);
  }

  // optional uint64 start_version = 3;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_version(), target);
  }

  // optional uint64 lock_ttl = 4;
  if (has_lock_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lock_ttl(), target);
  }

  // optional bool skip_constraint_check = 5;
  if (has_skip_constraint_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->skip_constraint_check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdPrewriteRequest)
  return target;
}

int CmdPrewriteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes primary_lock = 2;
    if (has_primary_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->primary_lock());
    }

    // optional uint64 start_version = 3;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

    // optional uint64 lock_ttl = 4;
    if (has_lock_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_ttl());
    }

    // optional bool skip_constraint_check = 5;
    if (has_skip_constraint_check()) {
      total_size += 1 + 1;
    }

  }
  // repeated .kvrpcpb.Mutation mutations = 1;
  total_size += 1 * this->mutations_size();
  for (int i = 0; i < this->mutations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdPrewriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdPrewriteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdPrewriteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdPrewriteRequest::MergeFrom(const CmdPrewriteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutations_.MergeFrom(from.mutations_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_primary_lock()) {
      set_primary_lock(from.primary_lock());
    }
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_lock_ttl()) {
      set_lock_ttl(from.lock_ttl());
    }
    if (from.has_skip_constraint_check()) {
      set_skip_constraint_check(from.skip_constraint_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdPrewriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPrewriteRequest::CopyFrom(const CmdPrewriteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPrewriteRequest::IsInitialized() const {

  return true;
}

void CmdPrewriteRequest::Swap(CmdPrewriteRequest* other) {
  if (other != this) {
    mutations_.Swap(&other->mutations_);
    std::swap(primary_lock_, other->primary_lock_);
    std::swap(start_version_, other->start_version_);
    std::swap(lock_ttl_, other->lock_ttl_);
    std::swap(skip_constraint_check_, other->skip_constraint_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdPrewriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdPrewriteRequest_descriptor_;
  metadata.reflection = CmdPrewriteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdPrewriteResponse::kErrorsFieldNumber;
#endif  // !_MSC_VER

CmdPrewriteResponse::CmdPrewriteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdPrewriteResponse)
}

void CmdPrewriteResponse::InitAsDefaultInstance() {
}

CmdPrewriteResponse::CmdPrewriteResponse(const CmdPrewriteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdPrewriteResponse)
}

void CmdPrewriteResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdPrewriteResponse::~CmdPrewriteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdPrewriteResponse)
  SharedDtor();
}

void CmdPrewriteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdPrewriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdPrewriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdPrewriteResponse_descriptor_;
}

const CmdPrewriteResponse& CmdPrewriteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdPrewriteResponse* CmdPrewriteResponse::default_instance_ = NULL;

CmdPrewriteResponse* CmdPrewriteResponse::New() const {
  return new CmdPrewriteResponse;
}

void CmdPrewriteResponse::Clear() {
  errors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdPrewriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdPrewriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KeyError errors = 1;
      case 1: {
        if (tag == 10) {
         parse_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_errors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdPrewriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdPrewriteResponse)
  return false;
#undef DO_
}

void CmdPrewriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdPrewriteResponse)
  // repeated .kvrpcpb.KeyError errors = 1;
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->errors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdPrewriteResponse)
}

::google::protobuf::uint8* CmdPrewriteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdPrewriteResponse)
  // repeated .kvrpcpb.KeyError errors = 1;
  for (int i = 0; i < this->errors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->errors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdPrewriteResponse)
  return target;
}

int CmdPrewriteResponse::ByteSize() const {
  int total_size = 0;

  // repeated .kvrpcpb.KeyError errors = 1;
  total_size += 1 * this->errors_size();
  for (int i = 0; i < this->errors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->errors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdPrewriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdPrewriteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdPrewriteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdPrewriteResponse::MergeFrom(const CmdPrewriteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  errors_.MergeFrom(from.errors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdPrewriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPrewriteResponse::CopyFrom(const CmdPrewriteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPrewriteResponse::IsInitialized() const {

  return true;
}

void CmdPrewriteResponse::Swap(CmdPrewriteResponse* other) {
  if (other != this) {
    errors_.Swap(&other->errors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdPrewriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdPrewriteResponse_descriptor_;
  metadata.reflection = CmdPrewriteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCommitRequest::kStartVersionFieldNumber;
const int CmdCommitRequest::kKeysFieldNumber;
const int CmdCommitRequest::kCommitVersionFieldNumber;
const int CmdCommitRequest::kBinlogFieldNumber;
#endif  // !_MSC_VER

CmdCommitRequest::CmdCommitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCommitRequest)
}

void CmdCommitRequest::InitAsDefaultInstance() {
}

CmdCommitRequest::CmdCommitRequest(const CmdCommitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCommitRequest)
}

void CmdCommitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_version_ = GOOGLE_ULONGLONG(0);
  commit_version_ = GOOGLE_ULONGLONG(0);
  binlog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCommitRequest::~CmdCommitRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCommitRequest)
  SharedDtor();
}

void CmdCommitRequest::SharedDtor() {
  if (binlog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete binlog_;
  }
  if (this != default_instance_) {
  }
}

void CmdCommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCommitRequest_descriptor_;
}

const CmdCommitRequest& CmdCommitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdCommitRequest* CmdCommitRequest::default_instance_ = NULL;

CmdCommitRequest* CmdCommitRequest::New() const {
  return new CmdCommitRequest;
}

void CmdCommitRequest::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    start_version_ = GOOGLE_ULONGLONG(0);
    commit_version_ = GOOGLE_ULONGLONG(0);
    if (has_binlog()) {
      if (binlog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        binlog_->clear();
      }
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectTag(24)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
          set_has_commit_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_binlog;
        break;
      }

      // optional bytes binlog = 4;
      case 4: {
        if (tag == 34) {
         parse_binlog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binlog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCommitRequest)
  return false;
#undef DO_
}

void CmdCommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCommitRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_version(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  // optional uint64 commit_version = 3;
  if (has_commit_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit_version(), output);
  }

  // optional bytes binlog = 4;
  if (has_binlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->binlog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCommitRequest)
}

::google::protobuf::uint8* CmdCommitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCommitRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_version(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  // optional uint64 commit_version = 3;
  if (has_commit_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_version(), target);
  }

  // optional bytes binlog = 4;
  if (has_binlog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->binlog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCommitRequest)
  return target;
}

int CmdCommitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start_version = 1;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

    // optional uint64 commit_version = 3;
    if (has_commit_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_version());
    }

    // optional bytes binlog = 4;
    if (has_binlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binlog());
    }

  }
  // repeated bytes keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCommitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCommitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCommitRequest::MergeFrom(const CmdCommitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_commit_version()) {
      set_commit_version(from.commit_version());
    }
    if (from.has_binlog()) {
      set_binlog(from.binlog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCommitRequest::CopyFrom(const CmdCommitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCommitRequest::IsInitialized() const {

  return true;
}

void CmdCommitRequest::Swap(CmdCommitRequest* other) {
  if (other != this) {
    std::swap(start_version_, other->start_version_);
    keys_.Swap(&other->keys_);
    std::swap(commit_version_, other->commit_version_);
    std::swap(binlog_, other->binlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCommitRequest_descriptor_;
  metadata.reflection = CmdCommitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCommitResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CmdCommitResponse::CmdCommitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCommitResponse)
}

void CmdCommitResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdCommitResponse::CmdCommitResponse(const CmdCommitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCommitResponse)
}

void CmdCommitResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCommitResponse::~CmdCommitResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCommitResponse)
  SharedDtor();
}

void CmdCommitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdCommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCommitResponse_descriptor_;
}

const CmdCommitResponse& CmdCommitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdCommitResponse* CmdCommitResponse::default_instance_ = NULL;

CmdCommitResponse* CmdCommitResponse::New() const {
  return new CmdCommitResponse;
}

void CmdCommitResponse::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCommitResponse)
  return false;
#undef DO_
}

void CmdCommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCommitResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCommitResponse)
}

::google::protobuf::uint8* CmdCommitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCommitResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCommitResponse)
  return target;
}

int CmdCommitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCommitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCommitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCommitResponse::MergeFrom(const CmdCommitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCommitResponse::CopyFrom(const CmdCommitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCommitResponse::IsInitialized() const {

  return true;
}

void CmdCommitResponse::Swap(CmdCommitResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCommitResponse_descriptor_;
  metadata.reflection = CmdCommitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdBatchRollbackRequest::kStartVersionFieldNumber;
const int CmdBatchRollbackRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

CmdBatchRollbackRequest::CmdBatchRollbackRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchRollbackRequest)
}

void CmdBatchRollbackRequest::InitAsDefaultInstance() {
}

CmdBatchRollbackRequest::CmdBatchRollbackRequest(const CmdBatchRollbackRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchRollbackRequest)
}

void CmdBatchRollbackRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdBatchRollbackRequest::~CmdBatchRollbackRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchRollbackRequest)
  SharedDtor();
}

void CmdBatchRollbackRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdBatchRollbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchRollbackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchRollbackRequest_descriptor_;
}

const CmdBatchRollbackRequest& CmdBatchRollbackRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdBatchRollbackRequest* CmdBatchRollbackRequest::default_instance_ = NULL;

CmdBatchRollbackRequest* CmdBatchRollbackRequest::New() const {
  return new CmdBatchRollbackRequest;
}

void CmdBatchRollbackRequest::Clear() {
  start_version_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdBatchRollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchRollbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchRollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchRollbackRequest)
  return false;
#undef DO_
}

void CmdBatchRollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchRollbackRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_version(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchRollbackRequest)
}

::google::protobuf::uint8* CmdBatchRollbackRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchRollbackRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_version(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchRollbackRequest)
  return target;
}

int CmdBatchRollbackRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start_version = 1;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

  }
  // repeated bytes keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchRollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdBatchRollbackRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdBatchRollbackRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdBatchRollbackRequest::MergeFrom(const CmdBatchRollbackRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdBatchRollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchRollbackRequest::CopyFrom(const CmdBatchRollbackRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdBatchRollbackRequest::IsInitialized() const {

  return true;
}

void CmdBatchRollbackRequest::Swap(CmdBatchRollbackRequest* other) {
  if (other != this) {
    std::swap(start_version_, other->start_version_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdBatchRollbackRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchRollbackRequest_descriptor_;
  metadata.reflection = CmdBatchRollbackRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdBatchRollbackResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CmdBatchRollbackResponse::CmdBatchRollbackResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchRollbackResponse)
}

void CmdBatchRollbackResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdBatchRollbackResponse::CmdBatchRollbackResponse(const CmdBatchRollbackResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchRollbackResponse)
}

void CmdBatchRollbackResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdBatchRollbackResponse::~CmdBatchRollbackResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchRollbackResponse)
  SharedDtor();
}

void CmdBatchRollbackResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdBatchRollbackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchRollbackResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchRollbackResponse_descriptor_;
}

const CmdBatchRollbackResponse& CmdBatchRollbackResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdBatchRollbackResponse* CmdBatchRollbackResponse::default_instance_ = NULL;

CmdBatchRollbackResponse* CmdBatchRollbackResponse::New() const {
  return new CmdBatchRollbackResponse;
}

void CmdBatchRollbackResponse::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdBatchRollbackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchRollbackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchRollbackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchRollbackResponse)
  return false;
#undef DO_
}

void CmdBatchRollbackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchRollbackResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchRollbackResponse)
}

::google::protobuf::uint8* CmdBatchRollbackResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchRollbackResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchRollbackResponse)
  return target;
}

int CmdBatchRollbackResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchRollbackResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdBatchRollbackResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdBatchRollbackResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdBatchRollbackResponse::MergeFrom(const CmdBatchRollbackResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdBatchRollbackResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchRollbackResponse::CopyFrom(const CmdBatchRollbackResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdBatchRollbackResponse::IsInitialized() const {

  return true;
}

void CmdBatchRollbackResponse::Swap(CmdBatchRollbackResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdBatchRollbackResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchRollbackResponse_descriptor_;
  metadata.reflection = CmdBatchRollbackResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCleanupRequest::kKeyFieldNumber;
const int CmdCleanupRequest::kStartVersionFieldNumber;
#endif  // !_MSC_VER

CmdCleanupRequest::CmdCleanupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCleanupRequest)
}

void CmdCleanupRequest::InitAsDefaultInstance() {
}

CmdCleanupRequest::CmdCleanupRequest(const CmdCleanupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCleanupRequest)
}

void CmdCleanupRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCleanupRequest::~CmdCleanupRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCleanupRequest)
  SharedDtor();
}

void CmdCleanupRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CmdCleanupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCleanupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCleanupRequest_descriptor_;
}

const CmdCleanupRequest& CmdCleanupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdCleanupRequest* CmdCleanupRequest::default_instance_ = NULL;

CmdCleanupRequest* CmdCleanupRequest::New() const {
  return new CmdCleanupRequest;
}

void CmdCleanupRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    start_version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCleanupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCleanupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 2;
      case 2: {
        if (tag == 16) {
         parse_start_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCleanupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCleanupRequest)
  return false;
#undef DO_
}

void CmdCleanupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCleanupRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 start_version = 2;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCleanupRequest)
}

::google::protobuf::uint8* CmdCleanupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCleanupRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional uint64 start_version = 2;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCleanupRequest)
  return target;
}

int CmdCleanupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint64 start_version = 2;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCleanupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCleanupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCleanupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCleanupRequest::MergeFrom(const CmdCleanupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCleanupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCleanupRequest::CopyFrom(const CmdCleanupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCleanupRequest::IsInitialized() const {

  return true;
}

void CmdCleanupRequest::Swap(CmdCleanupRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(start_version_, other->start_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCleanupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCleanupRequest_descriptor_;
  metadata.reflection = CmdCleanupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdCleanupResponse::kErrorFieldNumber;
const int CmdCleanupResponse::kCommitVersionFieldNumber;
#endif  // !_MSC_VER

CmdCleanupResponse::CmdCleanupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdCleanupResponse)
}

void CmdCleanupResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdCleanupResponse::CmdCleanupResponse(const CmdCleanupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdCleanupResponse)
}

void CmdCleanupResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  commit_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdCleanupResponse::~CmdCleanupResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdCleanupResponse)
  SharedDtor();
}

void CmdCleanupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdCleanupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdCleanupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdCleanupResponse_descriptor_;
}

const CmdCleanupResponse& CmdCleanupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdCleanupResponse* CmdCleanupResponse::default_instance_ = NULL;

CmdCleanupResponse* CmdCleanupResponse::New() const {
  return new CmdCleanupResponse;
}

void CmdCleanupResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
    }
    commit_version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdCleanupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdCleanupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
          set_has_commit_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdCleanupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdCleanupResponse)
  return false;
#undef DO_
}

void CmdCleanupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdCleanupResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdCleanupResponse)
}

::google::protobuf::uint8* CmdCleanupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdCleanupResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdCleanupResponse)
  return target;
}

int CmdCleanupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional uint64 commit_version = 2;
    if (has_commit_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdCleanupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdCleanupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdCleanupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdCleanupResponse::MergeFrom(const CmdCleanupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
    if (from.has_commit_version()) {
      set_commit_version(from.commit_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdCleanupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdCleanupResponse::CopyFrom(const CmdCleanupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdCleanupResponse::IsInitialized() const {

  return true;
}

void CmdCleanupResponse::Swap(CmdCleanupResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(commit_version_, other->commit_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdCleanupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdCleanupResponse_descriptor_;
  metadata.reflection = CmdCleanupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdBatchGetRequest::kKeysFieldNumber;
const int CmdBatchGetRequest::kVersionFieldNumber;
#endif  // !_MSC_VER

CmdBatchGetRequest::CmdBatchGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchGetRequest)
}

void CmdBatchGetRequest::InitAsDefaultInstance() {
}

CmdBatchGetRequest::CmdBatchGetRequest(const CmdBatchGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchGetRequest)
}

void CmdBatchGetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdBatchGetRequest::~CmdBatchGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchGetRequest)
  SharedDtor();
}

void CmdBatchGetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdBatchGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchGetRequest_descriptor_;
}

const CmdBatchGetRequest& CmdBatchGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdBatchGetRequest* CmdBatchGetRequest::default_instance_ = NULL;

CmdBatchGetRequest* CmdBatchGetRequest::New() const {
  return new CmdBatchGetRequest;
}

void CmdBatchGetRequest::Clear() {
  version_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdBatchGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchGetRequest)
  return false;
#undef DO_
}

void CmdBatchGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchGetRequest)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchGetRequest)
}

::google::protobuf::uint8* CmdBatchGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchGetRequest)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchGetRequest)
  return target;
}

int CmdBatchGetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdBatchGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdBatchGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdBatchGetRequest::MergeFrom(const CmdBatchGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdBatchGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchGetRequest::CopyFrom(const CmdBatchGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdBatchGetRequest::IsInitialized() const {

  return true;
}

void CmdBatchGetRequest::Swap(CmdBatchGetRequest* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdBatchGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchGetRequest_descriptor_;
  metadata.reflection = CmdBatchGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdBatchGetResponse::kPairsFieldNumber;
#endif  // !_MSC_VER

CmdBatchGetResponse::CmdBatchGetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdBatchGetResponse)
}

void CmdBatchGetResponse::InitAsDefaultInstance() {
}

CmdBatchGetResponse::CmdBatchGetResponse(const CmdBatchGetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdBatchGetResponse)
}

void CmdBatchGetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdBatchGetResponse::~CmdBatchGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdBatchGetResponse)
  SharedDtor();
}

void CmdBatchGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdBatchGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdBatchGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdBatchGetResponse_descriptor_;
}

const CmdBatchGetResponse& CmdBatchGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdBatchGetResponse* CmdBatchGetResponse::default_instance_ = NULL;

CmdBatchGetResponse* CmdBatchGetResponse::New() const {
  return new CmdBatchGetResponse;
}

void CmdBatchGetResponse::Clear() {
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdBatchGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdBatchGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KvPair pairs = 1;
      case 1: {
        if (tag == 10) {
         parse_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdBatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdBatchGetResponse)
  return false;
#undef DO_
}

void CmdBatchGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdBatchGetResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdBatchGetResponse)
}

::google::protobuf::uint8* CmdBatchGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdBatchGetResponse)
  // repeated .kvrpcpb.KvPair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdBatchGetResponse)
  return target;
}

int CmdBatchGetResponse::ByteSize() const {
  int total_size = 0;

  // repeated .kvrpcpb.KvPair pairs = 1;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdBatchGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdBatchGetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdBatchGetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdBatchGetResponse::MergeFrom(const CmdBatchGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairs_.MergeFrom(from.pairs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdBatchGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdBatchGetResponse::CopyFrom(const CmdBatchGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdBatchGetResponse::IsInitialized() const {

  return true;
}

void CmdBatchGetResponse::Swap(CmdBatchGetResponse* other) {
  if (other != this) {
    pairs_.Swap(&other->pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdBatchGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdBatchGetResponse_descriptor_;
  metadata.reflection = CmdBatchGetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdScanLockRequest::kMaxVersionFieldNumber;
#endif  // !_MSC_VER

CmdScanLockRequest::CmdScanLockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanLockRequest)
}

void CmdScanLockRequest::InitAsDefaultInstance() {
}

CmdScanLockRequest::CmdScanLockRequest(const CmdScanLockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanLockRequest)
}

void CmdScanLockRequest::SharedCtor() {
  _cached_size_ = 0;
  max_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdScanLockRequest::~CmdScanLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanLockRequest)
  SharedDtor();
}

void CmdScanLockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdScanLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanLockRequest_descriptor_;
}

const CmdScanLockRequest& CmdScanLockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdScanLockRequest* CmdScanLockRequest::default_instance_ = NULL;

CmdScanLockRequest* CmdScanLockRequest::New() const {
  return new CmdScanLockRequest;
}

void CmdScanLockRequest::Clear() {
  max_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdScanLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 max_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_version_)));
          set_has_max_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanLockRequest)
  return false;
#undef DO_
}

void CmdScanLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanLockRequest)
  // optional uint64 max_version = 1;
  if (has_max_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->max_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanLockRequest)
}

::google::protobuf::uint8* CmdScanLockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanLockRequest)
  // optional uint64 max_version = 1;
  if (has_max_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->max_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanLockRequest)
  return target;
}

int CmdScanLockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 max_version = 1;
    if (has_max_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdScanLockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdScanLockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdScanLockRequest::MergeFrom(const CmdScanLockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_version()) {
      set_max_version(from.max_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdScanLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanLockRequest::CopyFrom(const CmdScanLockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdScanLockRequest::IsInitialized() const {

  return true;
}

void CmdScanLockRequest::Swap(CmdScanLockRequest* other) {
  if (other != this) {
    std::swap(max_version_, other->max_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdScanLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanLockRequest_descriptor_;
  metadata.reflection = CmdScanLockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdScanLockResponse::kErrorFieldNumber;
const int CmdScanLockResponse::kLocksFieldNumber;
#endif  // !_MSC_VER

CmdScanLockResponse::CmdScanLockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdScanLockResponse)
}

void CmdScanLockResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdScanLockResponse::CmdScanLockResponse(const CmdScanLockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdScanLockResponse)
}

void CmdScanLockResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdScanLockResponse::~CmdScanLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdScanLockResponse)
  SharedDtor();
}

void CmdScanLockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdScanLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdScanLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdScanLockResponse_descriptor_;
}

const CmdScanLockResponse& CmdScanLockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdScanLockResponse* CmdScanLockResponse::default_instance_ = NULL;

CmdScanLockResponse* CmdScanLockResponse::New() const {
  return new CmdScanLockResponse;
}

void CmdScanLockResponse::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  locks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdScanLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdScanLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locks;
        break;
      }

      // repeated .kvrpcpb.LockInfo locks = 2;
      case 2: {
        if (tag == 18) {
         parse_locks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_locks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_locks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdScanLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdScanLockResponse)
  return false;
#undef DO_
}

void CmdScanLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdScanLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // repeated .kvrpcpb.LockInfo locks = 2;
  for (int i = 0; i < this->locks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->locks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdScanLockResponse)
}

::google::protobuf::uint8* CmdScanLockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdScanLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // repeated .kvrpcpb.LockInfo locks = 2;
  for (int i = 0; i < this->locks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->locks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdScanLockResponse)
  return target;
}

int CmdScanLockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .kvrpcpb.LockInfo locks = 2;
  total_size += 1 * this->locks_size();
  for (int i = 0; i < this->locks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdScanLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdScanLockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdScanLockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdScanLockResponse::MergeFrom(const CmdScanLockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  locks_.MergeFrom(from.locks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdScanLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdScanLockResponse::CopyFrom(const CmdScanLockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdScanLockResponse::IsInitialized() const {

  return true;
}

void CmdScanLockResponse::Swap(CmdScanLockResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    locks_.Swap(&other->locks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdScanLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdScanLockResponse_descriptor_;
  metadata.reflection = CmdScanLockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdResolveLockRequest::kStartVersionFieldNumber;
const int CmdResolveLockRequest::kCommitVersionFieldNumber;
#endif  // !_MSC_VER

CmdResolveLockRequest::CmdResolveLockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdResolveLockRequest)
}

void CmdResolveLockRequest::InitAsDefaultInstance() {
}

CmdResolveLockRequest::CmdResolveLockRequest(const CmdResolveLockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdResolveLockRequest)
}

void CmdResolveLockRequest::SharedCtor() {
  _cached_size_ = 0;
  start_version_ = GOOGLE_ULONGLONG(0);
  commit_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResolveLockRequest::~CmdResolveLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdResolveLockRequest)
  SharedDtor();
}

void CmdResolveLockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdResolveLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResolveLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResolveLockRequest_descriptor_;
}

const CmdResolveLockRequest& CmdResolveLockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdResolveLockRequest* CmdResolveLockRequest::default_instance_ = NULL;

CmdResolveLockRequest* CmdResolveLockRequest::New() const {
  return new CmdResolveLockRequest;
}

void CmdResolveLockRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CmdResolveLockRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_version_, commit_version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResolveLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdResolveLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
          set_has_start_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
          set_has_commit_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdResolveLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdResolveLockRequest)
  return false;
#undef DO_
}

void CmdResolveLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdResolveLockRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_version(), output);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdResolveLockRequest)
}

::google::protobuf::uint8* CmdResolveLockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdResolveLockRequest)
  // optional uint64 start_version = 1;
  if (has_start_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_version(), target);
  }

  // optional uint64 commit_version = 2;
  if (has_commit_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdResolveLockRequest)
  return target;
}

int CmdResolveLockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start_version = 1;
    if (has_start_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_version());
    }

    // optional uint64 commit_version = 2;
    if (has_commit_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResolveLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResolveLockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResolveLockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResolveLockRequest::MergeFrom(const CmdResolveLockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_version()) {
      set_start_version(from.start_version());
    }
    if (from.has_commit_version()) {
      set_commit_version(from.commit_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResolveLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResolveLockRequest::CopyFrom(const CmdResolveLockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResolveLockRequest::IsInitialized() const {

  return true;
}

void CmdResolveLockRequest::Swap(CmdResolveLockRequest* other) {
  if (other != this) {
    std::swap(start_version_, other->start_version_);
    std::swap(commit_version_, other->commit_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResolveLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResolveLockRequest_descriptor_;
  metadata.reflection = CmdResolveLockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdResolveLockResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CmdResolveLockResponse::CmdResolveLockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdResolveLockResponse)
}

void CmdResolveLockResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdResolveLockResponse::CmdResolveLockResponse(const CmdResolveLockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdResolveLockResponse)
}

void CmdResolveLockResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResolveLockResponse::~CmdResolveLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdResolveLockResponse)
  SharedDtor();
}

void CmdResolveLockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdResolveLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResolveLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResolveLockResponse_descriptor_;
}

const CmdResolveLockResponse& CmdResolveLockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdResolveLockResponse* CmdResolveLockResponse::default_instance_ = NULL;

CmdResolveLockResponse* CmdResolveLockResponse::New() const {
  return new CmdResolveLockResponse;
}

void CmdResolveLockResponse::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdResolveLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdResolveLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdResolveLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdResolveLockResponse)
  return false;
#undef DO_
}

void CmdResolveLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdResolveLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdResolveLockResponse)
}

::google::protobuf::uint8* CmdResolveLockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdResolveLockResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdResolveLockResponse)
  return target;
}

int CmdResolveLockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResolveLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdResolveLockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResolveLockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResolveLockResponse::MergeFrom(const CmdResolveLockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdResolveLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResolveLockResponse::CopyFrom(const CmdResolveLockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResolveLockResponse::IsInitialized() const {

  return true;
}

void CmdResolveLockResponse::Swap(CmdResolveLockResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdResolveLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResolveLockResponse_descriptor_;
  metadata.reflection = CmdResolveLockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGCRequest::kSafePointFieldNumber;
#endif  // !_MSC_VER

CmdGCRequest::CmdGCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGCRequest)
}

void CmdGCRequest::InitAsDefaultInstance() {
}

CmdGCRequest::CmdGCRequest(const CmdGCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGCRequest)
}

void CmdGCRequest::SharedCtor() {
  _cached_size_ = 0;
  safe_point_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGCRequest::~CmdGCRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGCRequest)
  SharedDtor();
}

void CmdGCRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdGCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGCRequest_descriptor_;
}

const CmdGCRequest& CmdGCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdGCRequest* CmdGCRequest::default_instance_ = NULL;

CmdGCRequest* CmdGCRequest::New() const {
  return new CmdGCRequest;
}

void CmdGCRequest::Clear() {
  safe_point_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 safe_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
          set_has_safe_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGCRequest)
  return false;
#undef DO_
}

void CmdGCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGCRequest)
  // optional uint64 safe_point = 1;
  if (has_safe_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->safe_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGCRequest)
}

::google::protobuf::uint8* CmdGCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGCRequest)
  // optional uint64 safe_point = 1;
  if (has_safe_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->safe_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGCRequest)
  return target;
}

int CmdGCRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 safe_point = 1;
    if (has_safe_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->safe_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGCRequest::MergeFrom(const CmdGCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_safe_point()) {
      set_safe_point(from.safe_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGCRequest::CopyFrom(const CmdGCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGCRequest::IsInitialized() const {

  return true;
}

void CmdGCRequest::Swap(CmdGCRequest* other) {
  if (other != this) {
    std::swap(safe_point_, other->safe_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGCRequest_descriptor_;
  metadata.reflection = CmdGCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGCResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CmdGCResponse::CmdGCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdGCResponse)
}

void CmdGCResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(&::kvrpcpb::KeyError::default_instance());
}

CmdGCResponse::CmdGCResponse(const CmdGCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdGCResponse)
}

void CmdGCResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGCResponse::~CmdGCResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdGCResponse)
  SharedDtor();
}

void CmdGCResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CmdGCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGCResponse_descriptor_;
}

const CmdGCResponse& CmdGCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdGCResponse* CmdGCResponse::default_instance_ = NULL;

CmdGCResponse* CmdGCResponse::New() const {
  return new CmdGCResponse;
}

void CmdGCResponse::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::kvrpcpb::KeyError::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdGCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdGCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdGCResponse)
  return false;
#undef DO_
}

void CmdGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdGCResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdGCResponse)
}

::google::protobuf::uint8* CmdGCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdGCResponse)
  // optional .kvrpcpb.KeyError error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdGCResponse)
  return target;
}

int CmdGCResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.KeyError error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGCResponse::MergeFrom(const CmdGCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGCResponse::CopyFrom(const CmdGCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGCResponse::IsInitialized() const {

  return true;
}

void CmdGCResponse::Swap(CmdGCResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGCResponse_descriptor_;
  metadata.reflection = CmdGCResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRawGetRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

CmdRawGetRequest::CmdRawGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawGetRequest)
}

void CmdRawGetRequest::InitAsDefaultInstance() {
}

CmdRawGetRequest::CmdRawGetRequest(const CmdRawGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawGetRequest)
}

void CmdRawGetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRawGetRequest::~CmdRawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawGetRequest)
  SharedDtor();
}

void CmdRawGetRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CmdRawGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawGetRequest_descriptor_;
}

const CmdRawGetRequest& CmdRawGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdRawGetRequest* CmdRawGetRequest::default_instance_ = NULL;

CmdRawGetRequest* CmdRawGetRequest::New() const {
  return new CmdRawGetRequest;
}

void CmdRawGetRequest::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRawGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawGetRequest)
  return false;
#undef DO_
}

void CmdRawGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawGetRequest)
}

::google::protobuf::uint8* CmdRawGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawGetRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawGetRequest)
  return target;
}

int CmdRawGetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRawGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRawGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRawGetRequest::MergeFrom(const CmdRawGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRawGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawGetRequest::CopyFrom(const CmdRawGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRawGetRequest::IsInitialized() const {

  return true;
}

void CmdRawGetRequest::Swap(CmdRawGetRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRawGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawGetRequest_descriptor_;
  metadata.reflection = CmdRawGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRawGetResponse::kErrorFieldNumber;
const int CmdRawGetResponse::kValueFieldNumber;
#endif  // !_MSC_VER

CmdRawGetResponse::CmdRawGetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawGetResponse)
}

void CmdRawGetResponse::InitAsDefaultInstance() {
}

CmdRawGetResponse::CmdRawGetResponse(const CmdRawGetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawGetResponse)
}

void CmdRawGetResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRawGetResponse::~CmdRawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawGetResponse)
  SharedDtor();
}

void CmdRawGetResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CmdRawGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawGetResponse_descriptor_;
}

const CmdRawGetResponse& CmdRawGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdRawGetResponse* CmdRawGetResponse::default_instance_ = NULL;

CmdRawGetResponse* CmdRawGetResponse::New() const {
  return new CmdRawGetResponse;
}

void CmdRawGetResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRawGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawGetResponse)
  return false;
#undef DO_
}

void CmdRawGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawGetResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawGetResponse)
}

::google::protobuf::uint8* CmdRawGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawGetResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawGetResponse)
  return target;
}

int CmdRawGetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRawGetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRawGetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRawGetResponse::MergeFrom(const CmdRawGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRawGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawGetResponse::CopyFrom(const CmdRawGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRawGetResponse::IsInitialized() const {

  return true;
}

void CmdRawGetResponse::Swap(CmdRawGetResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRawGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawGetResponse_descriptor_;
  metadata.reflection = CmdRawGetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRawPutRequest::kKeyFieldNumber;
const int CmdRawPutRequest::kValueFieldNumber;
#endif  // !_MSC_VER

CmdRawPutRequest::CmdRawPutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawPutRequest)
}

void CmdRawPutRequest::InitAsDefaultInstance() {
}

CmdRawPutRequest::CmdRawPutRequest(const CmdRawPutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawPutRequest)
}

void CmdRawPutRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRawPutRequest::~CmdRawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawPutRequest)
  SharedDtor();
}

void CmdRawPutRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CmdRawPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawPutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawPutRequest_descriptor_;
}

const CmdRawPutRequest& CmdRawPutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdRawPutRequest* CmdRawPutRequest::default_instance_ = NULL;

CmdRawPutRequest* CmdRawPutRequest::New() const {
  return new CmdRawPutRequest;
}

void CmdRawPutRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRawPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawPutRequest)
  return false;
#undef DO_
}

void CmdRawPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawPutRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawPutRequest)
}

::google::protobuf::uint8* CmdRawPutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawPutRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawPutRequest)
  return target;
}

int CmdRawPutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRawPutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRawPutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRawPutRequest::MergeFrom(const CmdRawPutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRawPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawPutRequest::CopyFrom(const CmdRawPutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRawPutRequest::IsInitialized() const {

  return true;
}

void CmdRawPutRequest::Swap(CmdRawPutRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRawPutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawPutRequest_descriptor_;
  metadata.reflection = CmdRawPutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRawPutResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CmdRawPutResponse::CmdRawPutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawPutResponse)
}

void CmdRawPutResponse::InitAsDefaultInstance() {
}

CmdRawPutResponse::CmdRawPutResponse(const CmdRawPutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawPutResponse)
}

void CmdRawPutResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRawPutResponse::~CmdRawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawPutResponse)
  SharedDtor();
}

void CmdRawPutResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void CmdRawPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawPutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawPutResponse_descriptor_;
}

const CmdRawPutResponse& CmdRawPutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdRawPutResponse* CmdRawPutResponse::default_instance_ = NULL;

CmdRawPutResponse* CmdRawPutResponse::New() const {
  return new CmdRawPutResponse;
}

void CmdRawPutResponse::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRawPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawPutResponse)
  return false;
#undef DO_
}

void CmdRawPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawPutResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawPutResponse)
}

::google::protobuf::uint8* CmdRawPutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawPutResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawPutResponse)
  return target;
}

int CmdRawPutResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRawPutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRawPutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRawPutResponse::MergeFrom(const CmdRawPutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRawPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawPutResponse::CopyFrom(const CmdRawPutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRawPutResponse::IsInitialized() const {

  return true;
}

void CmdRawPutResponse::Swap(CmdRawPutResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRawPutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawPutResponse_descriptor_;
  metadata.reflection = CmdRawPutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRawDeleteRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

CmdRawDeleteRequest::CmdRawDeleteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawDeleteRequest)
}

void CmdRawDeleteRequest::InitAsDefaultInstance() {
}

CmdRawDeleteRequest::CmdRawDeleteRequest(const CmdRawDeleteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawDeleteRequest)
}

void CmdRawDeleteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRawDeleteRequest::~CmdRawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawDeleteRequest)
  SharedDtor();
}

void CmdRawDeleteRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CmdRawDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawDeleteRequest_descriptor_;
}

const CmdRawDeleteRequest& CmdRawDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdRawDeleteRequest* CmdRawDeleteRequest::default_instance_ = NULL;

CmdRawDeleteRequest* CmdRawDeleteRequest::New() const {
  return new CmdRawDeleteRequest;
}

void CmdRawDeleteRequest::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRawDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawDeleteRequest)
  return false;
#undef DO_
}

void CmdRawDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawDeleteRequest)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawDeleteRequest)
}

::google::protobuf::uint8* CmdRawDeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawDeleteRequest)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawDeleteRequest)
  return target;
}

int CmdRawDeleteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRawDeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRawDeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRawDeleteRequest::MergeFrom(const CmdRawDeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRawDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawDeleteRequest::CopyFrom(const CmdRawDeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRawDeleteRequest::IsInitialized() const {

  return true;
}

void CmdRawDeleteRequest::Swap(CmdRawDeleteRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRawDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawDeleteRequest_descriptor_;
  metadata.reflection = CmdRawDeleteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdRawDeleteResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CmdRawDeleteResponse::CmdRawDeleteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CmdRawDeleteResponse)
}

void CmdRawDeleteResponse::InitAsDefaultInstance() {
}

CmdRawDeleteResponse::CmdRawDeleteResponse(const CmdRawDeleteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CmdRawDeleteResponse)
}

void CmdRawDeleteResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdRawDeleteResponse::~CmdRawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CmdRawDeleteResponse)
  SharedDtor();
}

void CmdRawDeleteResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void CmdRawDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdRawDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRawDeleteResponse_descriptor_;
}

const CmdRawDeleteResponse& CmdRawDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

CmdRawDeleteResponse* CmdRawDeleteResponse::default_instance_ = NULL;

CmdRawDeleteResponse* CmdRawDeleteResponse::New() const {
  return new CmdRawDeleteResponse;
}

void CmdRawDeleteResponse::Clear() {
  if (has_error()) {
    if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      error_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdRawDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CmdRawDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CmdRawDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CmdRawDeleteResponse)
  return false;
#undef DO_
}

void CmdRawDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CmdRawDeleteResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CmdRawDeleteResponse)
}

::google::protobuf::uint8* CmdRawDeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CmdRawDeleteResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CmdRawDeleteResponse)
  return target;
}

int CmdRawDeleteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdRawDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdRawDeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdRawDeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdRawDeleteResponse::MergeFrom(const CmdRawDeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdRawDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdRawDeleteResponse::CopyFrom(const CmdRawDeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdRawDeleteResponse::IsInitialized() const {

  return true;
}

void CmdRawDeleteResponse::Swap(CmdRawDeleteResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdRawDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdRawDeleteResponse_descriptor_;
  metadata.reflection = CmdRawDeleteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kContextFieldNumber;
const int Request::kCmdGetReqFieldNumber;
const int Request::kCmdScanReqFieldNumber;
const int Request::kCmdPrewriteReqFieldNumber;
const int Request::kCmdCommitReqFieldNumber;
const int Request::kCmdCleanupReqFieldNumber;
const int Request::kCmdBatchGetReqFieldNumber;
const int Request::kCmdBatchRollbackReqFieldNumber;
const int Request::kCmdScanLockReqFieldNumber;
const int Request::kCmdResolveLockReqFieldNumber;
const int Request::kCmdGcReqFieldNumber;
const int Request::kCmdRawGetReqFieldNumber;
const int Request::kCmdRawPutReqFieldNumber;
const int Request::kCmdRawDeleteReqFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Request)
}

void Request::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(&::kvrpcpb::Context::default_instance());
  cmd_get_req_ = const_cast< ::kvrpcpb::CmdGetRequest*>(&::kvrpcpb::CmdGetRequest::default_instance());
  cmd_scan_req_ = const_cast< ::kvrpcpb::CmdScanRequest*>(&::kvrpcpb::CmdScanRequest::default_instance());
  cmd_prewrite_req_ = const_cast< ::kvrpcpb::CmdPrewriteRequest*>(&::kvrpcpb::CmdPrewriteRequest::default_instance());
  cmd_commit_req_ = const_cast< ::kvrpcpb::CmdCommitRequest*>(&::kvrpcpb::CmdCommitRequest::default_instance());
  cmd_cleanup_req_ = const_cast< ::kvrpcpb::CmdCleanupRequest*>(&::kvrpcpb::CmdCleanupRequest::default_instance());
  cmd_batch_get_req_ = const_cast< ::kvrpcpb::CmdBatchGetRequest*>(&::kvrpcpb::CmdBatchGetRequest::default_instance());
  cmd_batch_rollback_req_ = const_cast< ::kvrpcpb::CmdBatchRollbackRequest*>(&::kvrpcpb::CmdBatchRollbackRequest::default_instance());
  cmd_scan_lock_req_ = const_cast< ::kvrpcpb::CmdScanLockRequest*>(&::kvrpcpb::CmdScanLockRequest::default_instance());
  cmd_resolve_lock_req_ = const_cast< ::kvrpcpb::CmdResolveLockRequest*>(&::kvrpcpb::CmdResolveLockRequest::default_instance());
  cmd_gc_req_ = const_cast< ::kvrpcpb::CmdGCRequest*>(&::kvrpcpb::CmdGCRequest::default_instance());
  cmd_raw_get_req_ = const_cast< ::kvrpcpb::CmdRawGetRequest*>(&::kvrpcpb::CmdRawGetRequest::default_instance());
  cmd_raw_put_req_ = const_cast< ::kvrpcpb::CmdRawPutRequest*>(&::kvrpcpb::CmdRawPutRequest::default_instance());
  cmd_raw_delete_req_ = const_cast< ::kvrpcpb::CmdRawDeleteRequest*>(&::kvrpcpb::CmdRawDeleteRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  context_ = NULL;
  cmd_get_req_ = NULL;
  cmd_scan_req_ = NULL;
  cmd_prewrite_req_ = NULL;
  cmd_commit_req_ = NULL;
  cmd_cleanup_req_ = NULL;
  cmd_batch_get_req_ = NULL;
  cmd_batch_rollback_req_ = NULL;
  cmd_scan_lock_req_ = NULL;
  cmd_resolve_lock_req_ = NULL;
  cmd_gc_req_ = NULL;
  cmd_raw_get_req_ = NULL;
  cmd_raw_put_req_ = NULL;
  cmd_raw_delete_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete cmd_get_req_;
    delete cmd_scan_req_;
    delete cmd_prewrite_req_;
    delete cmd_commit_req_;
    delete cmd_cleanup_req_;
    delete cmd_batch_get_req_;
    delete cmd_batch_rollback_req_;
    delete cmd_scan_lock_req_;
    delete cmd_resolve_lock_req_;
    delete cmd_gc_req_;
    delete cmd_raw_get_req_;
    delete cmd_raw_put_req_;
    delete cmd_raw_delete_req_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    if (has_context()) {
      if (context_ != NULL) context_->::kvrpcpb::Context::Clear();
    }
    if (has_cmd_get_req()) {
      if (cmd_get_req_ != NULL) cmd_get_req_->::kvrpcpb::CmdGetRequest::Clear();
    }
    if (has_cmd_scan_req()) {
      if (cmd_scan_req_ != NULL) cmd_scan_req_->::kvrpcpb::CmdScanRequest::Clear();
    }
    if (has_cmd_prewrite_req()) {
      if (cmd_prewrite_req_ != NULL) cmd_prewrite_req_->::kvrpcpb::CmdPrewriteRequest::Clear();
    }
    if (has_cmd_commit_req()) {
      if (cmd_commit_req_ != NULL) cmd_commit_req_->::kvrpcpb::CmdCommitRequest::Clear();
    }
    if (has_cmd_cleanup_req()) {
      if (cmd_cleanup_req_ != NULL) cmd_cleanup_req_->::kvrpcpb::CmdCleanupRequest::Clear();
    }
    if (has_cmd_batch_get_req()) {
      if (cmd_batch_get_req_ != NULL) cmd_batch_get_req_->::kvrpcpb::CmdBatchGetRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_cmd_batch_rollback_req()) {
      if (cmd_batch_rollback_req_ != NULL) cmd_batch_rollback_req_->::kvrpcpb::CmdBatchRollbackRequest::Clear();
    }
    if (has_cmd_scan_lock_req()) {
      if (cmd_scan_lock_req_ != NULL) cmd_scan_lock_req_->::kvrpcpb::CmdScanLockRequest::Clear();
    }
    if (has_cmd_resolve_lock_req()) {
      if (cmd_resolve_lock_req_ != NULL) cmd_resolve_lock_req_->::kvrpcpb::CmdResolveLockRequest::Clear();
    }
    if (has_cmd_gc_req()) {
      if (cmd_gc_req_ != NULL) cmd_gc_req_->::kvrpcpb::CmdGCRequest::Clear();
    }
    if (has_cmd_raw_get_req()) {
      if (cmd_raw_get_req_ != NULL) cmd_raw_get_req_->::kvrpcpb::CmdRawGetRequest::Clear();
    }
    if (has_cmd_raw_put_req()) {
      if (cmd_raw_put_req_ != NULL) cmd_raw_put_req_->::kvrpcpb::CmdRawPutRequest::Clear();
    }
    if (has_cmd_raw_delete_req()) {
      if (cmd_raw_delete_req_ != NULL) cmd_raw_delete_req_->::kvrpcpb::CmdRawDeleteRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kvrpcpb::MessageType_IsValid(value)) {
            set_type(static_cast< ::kvrpcpb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }

      // optional .kvrpcpb.Context context = 2;
      case 2: {
        if (tag == 18) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd_get_req;
        break;
      }

      // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd_scan_req;
        break;
      }

      // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd_scan_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cmd_prewrite_req;
        break;
      }

      // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
      case 5: {
        if (tag == 42) {
         parse_cmd_prewrite_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_prewrite_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cmd_commit_req;
        break;
      }

      // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
      case 6: {
        if (tag == 50) {
         parse_cmd_commit_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_commit_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cmd_cleanup_req;
        break;
      }

      // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
      case 7: {
        if (tag == 58) {
         parse_cmd_cleanup_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_cleanup_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cmd_batch_get_req;
        break;
      }

      // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
      case 10: {
        if (tag == 82) {
         parse_cmd_batch_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cmd_batch_rollback_req;
        break;
      }

      // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
      case 11: {
        if (tag == 90) {
         parse_cmd_batch_rollback_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_rollback_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cmd_scan_lock_req;
        break;
      }

      // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
      case 12: {
        if (tag == 98) {
         parse_cmd_scan_lock_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_lock_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cmd_resolve_lock_req;
        break;
      }

      // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
      case 13: {
        if (tag == 106) {
         parse_cmd_resolve_lock_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_resolve_lock_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_cmd_gc_req;
        break;
      }

      // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
      case 14: {
        if (tag == 114) {
         parse_cmd_gc_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_gc_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2050)) goto parse_cmd_raw_get_req;
        break;
      }

      // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
      case 256: {
        if (tag == 2050) {
         parse_cmd_raw_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2058)) goto parse_cmd_raw_put_req;
        break;
      }

      // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
      case 257: {
        if (tag == 2058) {
         parse_cmd_raw_put_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_put_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2066)) goto parse_cmd_raw_delete_req;
        break;
      }

      // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
      case 258: {
        if (tag == 2066) {
         parse_cmd_raw_delete_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_delete_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Request)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .kvrpcpb.Context context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->context(), output);
  }

  // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
  if (has_cmd_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cmd_get_req(), output);
  }

  // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
  if (has_cmd_scan_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cmd_scan_req(), output);
  }

  // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
  if (has_cmd_prewrite_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cmd_prewrite_req(), output);
  }

  // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
  if (has_cmd_commit_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cmd_commit_req(), output);
  }

  // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
  if (has_cmd_cleanup_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cmd_cleanup_req(), output);
  }

  // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
  if (has_cmd_batch_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cmd_batch_get_req(), output);
  }

  // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
  if (has_cmd_batch_rollback_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->cmd_batch_rollback_req(), output);
  }

  // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
  if (has_cmd_scan_lock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->cmd_scan_lock_req(), output);
  }

  // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
  if (has_cmd_resolve_lock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cmd_resolve_lock_req(), output);
  }

  // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
  if (has_cmd_gc_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cmd_gc_req(), output);
  }

  // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
  if (has_cmd_raw_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      256, this->cmd_raw_get_req(), output);
  }

  // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
  if (has_cmd_raw_put_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      257, this->cmd_raw_put_req(), output);
  }

  // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
  if (has_cmd_raw_delete_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      258, this->cmd_raw_delete_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Request)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .kvrpcpb.Context context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->context(), target);
  }

  // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
  if (has_cmd_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cmd_get_req(), target);
  }

  // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
  if (has_cmd_scan_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cmd_scan_req(), target);
  }

  // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
  if (has_cmd_prewrite_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cmd_prewrite_req(), target);
  }

  // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
  if (has_cmd_commit_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cmd_commit_req(), target);
  }

  // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
  if (has_cmd_cleanup_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cmd_cleanup_req(), target);
  }

  // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
  if (has_cmd_batch_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cmd_batch_get_req(), target);
  }

  // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
  if (has_cmd_batch_rollback_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->cmd_batch_rollback_req(), target);
  }

  // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
  if (has_cmd_scan_lock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->cmd_scan_lock_req(), target);
  }

  // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
  if (has_cmd_resolve_lock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cmd_resolve_lock_req(), target);
  }

  // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
  if (has_cmd_gc_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cmd_gc_req(), target);
  }

  // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
  if (has_cmd_raw_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        256, this->cmd_raw_get_req(), target);
  }

  // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
  if (has_cmd_raw_put_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        257, this->cmd_raw_put_req(), target);
  }

  // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
  if (has_cmd_raw_delete_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        258, this->cmd_raw_delete_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .kvrpcpb.Context context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }

    // optional .kvrpcpb.CmdGetRequest cmd_get_req = 3;
    if (has_cmd_get_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_get_req());
    }

    // optional .kvrpcpb.CmdScanRequest cmd_scan_req = 4;
    if (has_cmd_scan_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_scan_req());
    }

    // optional .kvrpcpb.CmdPrewriteRequest cmd_prewrite_req = 5;
    if (has_cmd_prewrite_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_prewrite_req());
    }

    // optional .kvrpcpb.CmdCommitRequest cmd_commit_req = 6;
    if (has_cmd_commit_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_commit_req());
    }

    // optional .kvrpcpb.CmdCleanupRequest cmd_cleanup_req = 7;
    if (has_cmd_cleanup_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_cleanup_req());
    }

    // optional .kvrpcpb.CmdBatchGetRequest cmd_batch_get_req = 10;
    if (has_cmd_batch_get_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_batch_get_req());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .kvrpcpb.CmdBatchRollbackRequest cmd_batch_rollback_req = 11;
    if (has_cmd_batch_rollback_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_batch_rollback_req());
    }

    // optional .kvrpcpb.CmdScanLockRequest cmd_scan_lock_req = 12;
    if (has_cmd_scan_lock_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_scan_lock_req());
    }

    // optional .kvrpcpb.CmdResolveLockRequest cmd_resolve_lock_req = 13;
    if (has_cmd_resolve_lock_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_resolve_lock_req());
    }

    // optional .kvrpcpb.CmdGCRequest cmd_gc_req = 14;
    if (has_cmd_gc_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_gc_req());
    }

    // optional .kvrpcpb.CmdRawGetRequest cmd_raw_get_req = 256;
    if (has_cmd_raw_get_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_raw_get_req());
    }

    // optional .kvrpcpb.CmdRawPutRequest cmd_raw_put_req = 257;
    if (has_cmd_raw_put_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_raw_put_req());
    }

    // optional .kvrpcpb.CmdRawDeleteRequest cmd_raw_delete_req = 258;
    if (has_cmd_raw_delete_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_raw_delete_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_context()) {
      mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
    }
    if (from.has_cmd_get_req()) {
      mutable_cmd_get_req()->::kvrpcpb::CmdGetRequest::MergeFrom(from.cmd_get_req());
    }
    if (from.has_cmd_scan_req()) {
      mutable_cmd_scan_req()->::kvrpcpb::CmdScanRequest::MergeFrom(from.cmd_scan_req());
    }
    if (from.has_cmd_prewrite_req()) {
      mutable_cmd_prewrite_req()->::kvrpcpb::CmdPrewriteRequest::MergeFrom(from.cmd_prewrite_req());
    }
    if (from.has_cmd_commit_req()) {
      mutable_cmd_commit_req()->::kvrpcpb::CmdCommitRequest::MergeFrom(from.cmd_commit_req());
    }
    if (from.has_cmd_cleanup_req()) {
      mutable_cmd_cleanup_req()->::kvrpcpb::CmdCleanupRequest::MergeFrom(from.cmd_cleanup_req());
    }
    if (from.has_cmd_batch_get_req()) {
      mutable_cmd_batch_get_req()->::kvrpcpb::CmdBatchGetRequest::MergeFrom(from.cmd_batch_get_req());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd_batch_rollback_req()) {
      mutable_cmd_batch_rollback_req()->::kvrpcpb::CmdBatchRollbackRequest::MergeFrom(from.cmd_batch_rollback_req());
    }
    if (from.has_cmd_scan_lock_req()) {
      mutable_cmd_scan_lock_req()->::kvrpcpb::CmdScanLockRequest::MergeFrom(from.cmd_scan_lock_req());
    }
    if (from.has_cmd_resolve_lock_req()) {
      mutable_cmd_resolve_lock_req()->::kvrpcpb::CmdResolveLockRequest::MergeFrom(from.cmd_resolve_lock_req());
    }
    if (from.has_cmd_gc_req()) {
      mutable_cmd_gc_req()->::kvrpcpb::CmdGCRequest::MergeFrom(from.cmd_gc_req());
    }
    if (from.has_cmd_raw_get_req()) {
      mutable_cmd_raw_get_req()->::kvrpcpb::CmdRawGetRequest::MergeFrom(from.cmd_raw_get_req());
    }
    if (from.has_cmd_raw_put_req()) {
      mutable_cmd_raw_put_req()->::kvrpcpb::CmdRawPutRequest::MergeFrom(from.cmd_raw_put_req());
    }
    if (from.has_cmd_raw_delete_req()) {
      mutable_cmd_raw_delete_req()->::kvrpcpb::CmdRawDeleteRequest::MergeFrom(from.cmd_raw_delete_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(context_, other->context_);
    std::swap(cmd_get_req_, other->cmd_get_req_);
    std::swap(cmd_scan_req_, other->cmd_scan_req_);
    std::swap(cmd_prewrite_req_, other->cmd_prewrite_req_);
    std::swap(cmd_commit_req_, other->cmd_commit_req_);
    std::swap(cmd_cleanup_req_, other->cmd_cleanup_req_);
    std::swap(cmd_batch_get_req_, other->cmd_batch_get_req_);
    std::swap(cmd_batch_rollback_req_, other->cmd_batch_rollback_req_);
    std::swap(cmd_scan_lock_req_, other->cmd_scan_lock_req_);
    std::swap(cmd_resolve_lock_req_, other->cmd_resolve_lock_req_);
    std::swap(cmd_gc_req_, other->cmd_gc_req_);
    std::swap(cmd_raw_get_req_, other->cmd_raw_get_req_);
    std::swap(cmd_raw_put_req_, other->cmd_raw_put_req_);
    std::swap(cmd_raw_delete_req_, other->cmd_raw_delete_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kTypeFieldNumber;
const int Response::kRegionErrorFieldNumber;
const int Response::kCmdGetRespFieldNumber;
const int Response::kCmdScanRespFieldNumber;
const int Response::kCmdPrewriteRespFieldNumber;
const int Response::kCmdCommitRespFieldNumber;
const int Response::kCmdCleanupRespFieldNumber;
const int Response::kCmdBatchGetRespFieldNumber;
const int Response::kCmdBatchRollbackRespFieldNumber;
const int Response::kCmdScanLockRespFieldNumber;
const int Response::kCmdResolveLockRespFieldNumber;
const int Response::kCmdGcRespFieldNumber;
const int Response::kCmdRawGetRespFieldNumber;
const int Response::kCmdRawPutRespFieldNumber;
const int Response::kCmdRawDeleteRespFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Response)
}

void Response::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(&::errorpb::Error::default_instance());
  cmd_get_resp_ = const_cast< ::kvrpcpb::CmdGetResponse*>(&::kvrpcpb::CmdGetResponse::default_instance());
  cmd_scan_resp_ = const_cast< ::kvrpcpb::CmdScanResponse*>(&::kvrpcpb::CmdScanResponse::default_instance());
  cmd_prewrite_resp_ = const_cast< ::kvrpcpb::CmdPrewriteResponse*>(&::kvrpcpb::CmdPrewriteResponse::default_instance());
  cmd_commit_resp_ = const_cast< ::kvrpcpb::CmdCommitResponse*>(&::kvrpcpb::CmdCommitResponse::default_instance());
  cmd_cleanup_resp_ = const_cast< ::kvrpcpb::CmdCleanupResponse*>(&::kvrpcpb::CmdCleanupResponse::default_instance());
  cmd_batch_get_resp_ = const_cast< ::kvrpcpb::CmdBatchGetResponse*>(&::kvrpcpb::CmdBatchGetResponse::default_instance());
  cmd_batch_rollback_resp_ = const_cast< ::kvrpcpb::CmdBatchRollbackResponse*>(&::kvrpcpb::CmdBatchRollbackResponse::default_instance());
  cmd_scan_lock_resp_ = const_cast< ::kvrpcpb::CmdScanLockResponse*>(&::kvrpcpb::CmdScanLockResponse::default_instance());
  cmd_resolve_lock_resp_ = const_cast< ::kvrpcpb::CmdResolveLockResponse*>(&::kvrpcpb::CmdResolveLockResponse::default_instance());
  cmd_gc_resp_ = const_cast< ::kvrpcpb::CmdGCResponse*>(&::kvrpcpb::CmdGCResponse::default_instance());
  cmd_raw_get_resp_ = const_cast< ::kvrpcpb::CmdRawGetResponse*>(&::kvrpcpb::CmdRawGetResponse::default_instance());
  cmd_raw_put_resp_ = const_cast< ::kvrpcpb::CmdRawPutResponse*>(&::kvrpcpb::CmdRawPutResponse::default_instance());
  cmd_raw_delete_resp_ = const_cast< ::kvrpcpb::CmdRawDeleteResponse*>(&::kvrpcpb::CmdRawDeleteResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  region_error_ = NULL;
  cmd_get_resp_ = NULL;
  cmd_scan_resp_ = NULL;
  cmd_prewrite_resp_ = NULL;
  cmd_commit_resp_ = NULL;
  cmd_cleanup_resp_ = NULL;
  cmd_batch_get_resp_ = NULL;
  cmd_batch_rollback_resp_ = NULL;
  cmd_scan_lock_resp_ = NULL;
  cmd_resolve_lock_resp_ = NULL;
  cmd_gc_resp_ = NULL;
  cmd_raw_get_resp_ = NULL;
  cmd_raw_put_resp_ = NULL;
  cmd_raw_delete_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete region_error_;
    delete cmd_get_resp_;
    delete cmd_scan_resp_;
    delete cmd_prewrite_resp_;
    delete cmd_commit_resp_;
    delete cmd_cleanup_resp_;
    delete cmd_batch_get_resp_;
    delete cmd_batch_rollback_resp_;
    delete cmd_scan_lock_resp_;
    delete cmd_resolve_lock_resp_;
    delete cmd_gc_resp_;
    delete cmd_raw_get_resp_;
    delete cmd_raw_put_resp_;
    delete cmd_raw_delete_resp_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kvrpcpb_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    if (has_region_error()) {
      if (region_error_ != NULL) region_error_->::errorpb::Error::Clear();
    }
    if (has_cmd_get_resp()) {
      if (cmd_get_resp_ != NULL) cmd_get_resp_->::kvrpcpb::CmdGetResponse::Clear();
    }
    if (has_cmd_scan_resp()) {
      if (cmd_scan_resp_ != NULL) cmd_scan_resp_->::kvrpcpb::CmdScanResponse::Clear();
    }
    if (has_cmd_prewrite_resp()) {
      if (cmd_prewrite_resp_ != NULL) cmd_prewrite_resp_->::kvrpcpb::CmdPrewriteResponse::Clear();
    }
    if (has_cmd_commit_resp()) {
      if (cmd_commit_resp_ != NULL) cmd_commit_resp_->::kvrpcpb::CmdCommitResponse::Clear();
    }
    if (has_cmd_cleanup_resp()) {
      if (cmd_cleanup_resp_ != NULL) cmd_cleanup_resp_->::kvrpcpb::CmdCleanupResponse::Clear();
    }
    if (has_cmd_batch_get_resp()) {
      if (cmd_batch_get_resp_ != NULL) cmd_batch_get_resp_->::kvrpcpb::CmdBatchGetResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_cmd_batch_rollback_resp()) {
      if (cmd_batch_rollback_resp_ != NULL) cmd_batch_rollback_resp_->::kvrpcpb::CmdBatchRollbackResponse::Clear();
    }
    if (has_cmd_scan_lock_resp()) {
      if (cmd_scan_lock_resp_ != NULL) cmd_scan_lock_resp_->::kvrpcpb::CmdScanLockResponse::Clear();
    }
    if (has_cmd_resolve_lock_resp()) {
      if (cmd_resolve_lock_resp_ != NULL) cmd_resolve_lock_resp_->::kvrpcpb::CmdResolveLockResponse::Clear();
    }
    if (has_cmd_gc_resp()) {
      if (cmd_gc_resp_ != NULL) cmd_gc_resp_->::kvrpcpb::CmdGCResponse::Clear();
    }
    if (has_cmd_raw_get_resp()) {
      if (cmd_raw_get_resp_ != NULL) cmd_raw_get_resp_->::kvrpcpb::CmdRawGetResponse::Clear();
    }
    if (has_cmd_raw_put_resp()) {
      if (cmd_raw_put_resp_ != NULL) cmd_raw_put_resp_->::kvrpcpb::CmdRawPutResponse::Clear();
    }
    if (has_cmd_raw_delete_resp()) {
      if (cmd_raw_delete_resp_ != NULL) cmd_raw_delete_resp_->::kvrpcpb::CmdRawDeleteResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kvrpcpb::MessageType_IsValid(value)) {
            set_type(static_cast< ::kvrpcpb::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_error;
        break;
      }

      // optional .errorpb.Error region_error = 2;
      case 2: {
        if (tag == 18) {
         parse_region_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd_get_resp;
        break;
      }

      // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd_get_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_get_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd_scan_resp;
        break;
      }

      // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd_scan_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cmd_prewrite_resp;
        break;
      }

      // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
      case 5: {
        if (tag == 42) {
         parse_cmd_prewrite_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_prewrite_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cmd_commit_resp;
        break;
      }

      // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
      case 6: {
        if (tag == 50) {
         parse_cmd_commit_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_commit_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cmd_cleanup_resp;
        break;
      }

      // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
      case 7: {
        if (tag == 58) {
         parse_cmd_cleanup_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_cleanup_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cmd_batch_get_resp;
        break;
      }

      // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
      case 10: {
        if (tag == 82) {
         parse_cmd_batch_get_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_get_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cmd_batch_rollback_resp;
        break;
      }

      // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
      case 11: {
        if (tag == 90) {
         parse_cmd_batch_rollback_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_batch_rollback_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cmd_scan_lock_resp;
        break;
      }

      // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
      case 12: {
        if (tag == 98) {
         parse_cmd_scan_lock_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_scan_lock_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cmd_resolve_lock_resp;
        break;
      }

      // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
      case 13: {
        if (tag == 106) {
         parse_cmd_resolve_lock_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_resolve_lock_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_cmd_gc_resp;
        break;
      }

      // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
      case 14: {
        if (tag == 114) {
         parse_cmd_gc_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_gc_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2050)) goto parse_cmd_raw_get_resp;
        break;
      }

      // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
      case 256: {
        if (tag == 2050) {
         parse_cmd_raw_get_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_get_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2058)) goto parse_cmd_raw_put_resp;
        break;
      }

      // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
      case 257: {
        if (tag == 2058) {
         parse_cmd_raw_put_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_put_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2066)) goto parse_cmd_raw_delete_resp;
        break;
      }

      // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
      case 258: {
        if (tag == 2066) {
         parse_cmd_raw_delete_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_raw_delete_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Response)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .errorpb.Error region_error = 2;
  if (has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_error(), output);
  }

  // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
  if (has_cmd_get_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cmd_get_resp(), output);
  }

  // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
  if (has_cmd_scan_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cmd_scan_resp(), output);
  }

  // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
  if (has_cmd_prewrite_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cmd_prewrite_resp(), output);
  }

  // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
  if (has_cmd_commit_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cmd_commit_resp(), output);
  }

  // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
  if (has_cmd_cleanup_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cmd_cleanup_resp(), output);
  }

  // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
  if (has_cmd_batch_get_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cmd_batch_get_resp(), output);
  }

  // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
  if (has_cmd_batch_rollback_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->cmd_batch_rollback_resp(), output);
  }

  // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
  if (has_cmd_scan_lock_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->cmd_scan_lock_resp(), output);
  }

  // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
  if (has_cmd_resolve_lock_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cmd_resolve_lock_resp(), output);
  }

  // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
  if (has_cmd_gc_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cmd_gc_resp(), output);
  }

  // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
  if (has_cmd_raw_get_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      256, this->cmd_raw_get_resp(), output);
  }

  // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
  if (has_cmd_raw_put_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      257, this->cmd_raw_put_resp(), output);
  }

  // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
  if (has_cmd_raw_delete_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      258, this->cmd_raw_delete_resp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Response)
  // optional .kvrpcpb.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .errorpb.Error region_error = 2;
  if (has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_error(), target);
  }

  // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
  if (has_cmd_get_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cmd_get_resp(), target);
  }

  // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
  if (has_cmd_scan_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cmd_scan_resp(), target);
  }

  // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
  if (has_cmd_prewrite_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cmd_prewrite_resp(), target);
  }

  // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
  if (has_cmd_commit_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cmd_commit_resp(), target);
  }

  // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
  if (has_cmd_cleanup_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cmd_cleanup_resp(), target);
  }

  // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
  if (has_cmd_batch_get_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cmd_batch_get_resp(), target);
  }

  // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
  if (has_cmd_batch_rollback_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->cmd_batch_rollback_resp(), target);
  }

  // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
  if (has_cmd_scan_lock_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->cmd_scan_lock_resp(), target);
  }

  // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
  if (has_cmd_resolve_lock_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cmd_resolve_lock_resp(), target);
  }

  // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
  if (has_cmd_gc_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cmd_gc_resp(), target);
  }

  // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
  if (has_cmd_raw_get_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        256, this->cmd_raw_get_resp(), target);
  }

  // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
  if (has_cmd_raw_put_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        257, this->cmd_raw_put_resp(), target);
  }

  // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
  if (has_cmd_raw_delete_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        258, this->cmd_raw_delete_resp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kvrpcpb.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .errorpb.Error region_error = 2;
    if (has_region_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_error());
    }

    // optional .kvrpcpb.CmdGetResponse cmd_get_resp = 3;
    if (has_cmd_get_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_get_resp());
    }

    // optional .kvrpcpb.CmdScanResponse cmd_scan_resp = 4;
    if (has_cmd_scan_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_scan_resp());
    }

    // optional .kvrpcpb.CmdPrewriteResponse cmd_prewrite_resp = 5;
    if (has_cmd_prewrite_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_prewrite_resp());
    }

    // optional .kvrpcpb.CmdCommitResponse cmd_commit_resp = 6;
    if (has_cmd_commit_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_commit_resp());
    }

    // optional .kvrpcpb.CmdCleanupResponse cmd_cleanup_resp = 7;
    if (has_cmd_cleanup_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_cleanup_resp());
    }

    // optional .kvrpcpb.CmdBatchGetResponse cmd_batch_get_resp = 10;
    if (has_cmd_batch_get_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_batch_get_resp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .kvrpcpb.CmdBatchRollbackResponse cmd_batch_rollback_resp = 11;
    if (has_cmd_batch_rollback_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_batch_rollback_resp());
    }

    // optional .kvrpcpb.CmdScanLockResponse cmd_scan_lock_resp = 12;
    if (has_cmd_scan_lock_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_scan_lock_resp());
    }

    // optional .kvrpcpb.CmdResolveLockResponse cmd_resolve_lock_resp = 13;
    if (has_cmd_resolve_lock_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_resolve_lock_resp());
    }

    // optional .kvrpcpb.CmdGCResponse cmd_gc_resp = 14;
    if (has_cmd_gc_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_gc_resp());
    }

    // optional .kvrpcpb.CmdRawGetResponse cmd_raw_get_resp = 256;
    if (has_cmd_raw_get_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_raw_get_resp());
    }

    // optional .kvrpcpb.CmdRawPutResponse cmd_raw_put_resp = 257;
    if (has_cmd_raw_put_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_raw_put_resp());
    }

    // optional .kvrpcpb.CmdRawDeleteResponse cmd_raw_delete_resp = 258;
    if (has_cmd_raw_delete_resp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_raw_delete_resp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_region_error()) {
      mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
    }
    if (from.has_cmd_get_resp()) {
      mutable_cmd_get_resp()->::kvrpcpb::CmdGetResponse::MergeFrom(from.cmd_get_resp());
    }
    if (from.has_cmd_scan_resp()) {
      mutable_cmd_scan_resp()->::kvrpcpb::CmdScanResponse::MergeFrom(from.cmd_scan_resp());
    }
    if (from.has_cmd_prewrite_resp()) {
      mutable_cmd_prewrite_resp()->::kvrpcpb::CmdPrewriteResponse::MergeFrom(from.cmd_prewrite_resp());
    }
    if (from.has_cmd_commit_resp()) {
      mutable_cmd_commit_resp()->::kvrpcpb::CmdCommitResponse::MergeFrom(from.cmd_commit_resp());
    }
    if (from.has_cmd_cleanup_resp()) {
      mutable_cmd_cleanup_resp()->::kvrpcpb::CmdCleanupResponse::MergeFrom(from.cmd_cleanup_resp());
    }
    if (from.has_cmd_batch_get_resp()) {
      mutable_cmd_batch_get_resp()->::kvrpcpb::CmdBatchGetResponse::MergeFrom(from.cmd_batch_get_resp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd_batch_rollback_resp()) {
      mutable_cmd_batch_rollback_resp()->::kvrpcpb::CmdBatchRollbackResponse::MergeFrom(from.cmd_batch_rollback_resp());
    }
    if (from.has_cmd_scan_lock_resp()) {
      mutable_cmd_scan_lock_resp()->::kvrpcpb::CmdScanLockResponse::MergeFrom(from.cmd_scan_lock_resp());
    }
    if (from.has_cmd_resolve_lock_resp()) {
      mutable_cmd_resolve_lock_resp()->::kvrpcpb::CmdResolveLockResponse::MergeFrom(from.cmd_resolve_lock_resp());
    }
    if (from.has_cmd_gc_resp()) {
      mutable_cmd_gc_resp()->::kvrpcpb::CmdGCResponse::MergeFrom(from.cmd_gc_resp());
    }
    if (from.has_cmd_raw_get_resp()) {
      mutable_cmd_raw_get_resp()->::kvrpcpb::CmdRawGetResponse::MergeFrom(from.cmd_raw_get_resp());
    }
    if (from.has_cmd_raw_put_resp()) {
      mutable_cmd_raw_put_resp()->::kvrpcpb::CmdRawPutResponse::MergeFrom(from.cmd_raw_put_resp());
    }
    if (from.has_cmd_raw_delete_resp()) {
      mutable_cmd_raw_delete_resp()->::kvrpcpb::CmdRawDeleteResponse::MergeFrom(from.cmd_raw_delete_resp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(region_error_, other->region_error_);
    std::swap(cmd_get_resp_, other->cmd_get_resp_);
    std::swap(cmd_scan_resp_, other->cmd_scan_resp_);
    std::swap(cmd_prewrite_resp_, other->cmd_prewrite_resp_);
    std::swap(cmd_commit_resp_, other->cmd_commit_resp_);
    std::swap(cmd_cleanup_resp_, other->cmd_cleanup_resp_);
    std::swap(cmd_batch_get_resp_, other->cmd_batch_get_resp_);
    std::swap(cmd_batch_rollback_resp_, other->cmd_batch_rollback_resp_);
    std::swap(cmd_scan_lock_resp_, other->cmd_scan_lock_resp_);
    std::swap(cmd_resolve_lock_resp_, other->cmd_resolve_lock_resp_);
    std::swap(cmd_gc_resp_, other->cmd_gc_resp_);
    std::swap(cmd_raw_get_resp_, other->cmd_raw_get_resp_);
    std::swap(cmd_raw_put_resp_, other->cmd_raw_put_resp_);
    std::swap(cmd_raw_delete_resp_, other->cmd_raw_delete_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvrpcpb

// @@protoc_insertion_point(global_scope)
