#include "keys.h"

std::string store_ident_key(){
	return std::string(STORE_IDENT_KEY, 2);
}

std::string make_region_id_key(uint64_t region_id, char suffix, uint64_t extra_cap){
	std::string key;
	key.reserve(sizeof(REGION_RAFT_PREFIX_KEY) + sizeof(uint64_t) + sizeof(char));
	key.append(REGION_RAFT_PREFIX_KEY, sizeof(REGION_RAFT_PREFIX_KEY));
	// no need check error here, can't panic;
	key.append((char*)&region_id, sizeof(uint64_t));
	key.append((char*)&suffix, sizeof(char));
	return key;
}

std::string region_raft_prefix(uint64_t region_id) {
	std::string key;
	key.reserve(sizeof(REGION_RAFT_PREFIX_KEY) + sizeof(uint64_t));
	key.append(REGION_RAFT_PREFIX_KEY, sizeof(REGION_RAFT_PREFIX_KEY));
	// no need check error here, can't panic;
	key.append((char*)&region_id, sizeof(uint64_t));
	return key;
}

std::string raft_log_key(uint64_t region_id, uint64_t log_index) {
	std::string key = make_region_id_key(region_id, RAFT_LOG_SUFFIX, sizeof(uint64_t));
	// no need check error here, can't panic;
	key.append((char*)&log_index, sizeof(uint64_t));
	return key;
}

std::string raft_state_key(uint64_t region_id) {
	return make_region_id_key(region_id, RAFT_STATE_SUFFIX, 0);
}

std::string apply_state_key(uint64_t region_id){
	return make_region_id_key(region_id, APPLY_STATE_SUFFIX, 0);
}

/// Get the log index from raft log key generated by `raft_log_key`.
uint64_t raft_log_index(std::string key) {
	uint64_t expect_key_len = sizeof(REGION_RAFT_PREFIX_KEY) + sizeof(uint64_t) +
		sizeof(char) + sizeof(uint64_t);
	assert(key.size() == expect_key_len);
	uint64_t log_index = *((uint64_t *)(key.data() + expect_key_len - sizeof(uint64_t)));
	return log_index;
}

/// Get the region id and index from raft log key generated by `raft_log_key`.
std::tuple<uint64_t, uint64_t> decode_raft_log_key(std::string key){
	uint64_t suffix_idx = sizeof(REGION_RAFT_PREFIX_KEY) + sizeof(uint64_t);
	uint64_t expect_key_len = suffix_idx + sizeof(char) + sizeof(uint64_t);
	if (key.size() != expect_key_len || !strncmp(key.data(), REGION_RAFT_PREFIX_KEY, sizeof(REGION_RAFT_PREFIX_KEY)) ||
			key[suffix_idx] != RAFT_LOG_SUFFIX) {
		abort();
		//return Err(box_err!("key {} is not a valid raft log key", escape(key)));
	}
	uint64_t region_id = *((uint64_t *)(key.data() + sizeof(REGION_RAFT_PREFIX_KEY)));
	uint64_t index = *((uint64_t *)(key.data() + suffix_idx));
	return std::make_tuple(region_id, index);
}

std::string raft_log_prefix(uint64_t region_id) {
	return make_region_id_key(region_id, RAFT_LOG_SUFFIX, 0);
}

std::string make_region_meta_key(uint64_t region_id, char suffix) {
	std::string key;
	key.reserve(sizeof(REGION_META_PREFIX_KEY) + sizeof(uint64_t) + sizeof(char));
	key.append(REGION_META_PREFIX_KEY, sizeof(REGION_META_PREFIX_KEY));
	// no need to check error here, can't panic;
	key.append((char*)&region_id, sizeof(uint64_t));
	key.append((char*)&suffix, sizeof(char));
	return key;
}

// Decode region meta key, return the region key and meta suffix type.
std::tuple<uint64_t, char> decode_region_meta_key(std::string key) {
	if (key.size() != sizeof(REGION_META_PREFIX_KEY) + sizeof(uint64_t) + sizeof(char)) {
		printf("xxx\n");
		abort();
	}

	if (strncmp(key.data(), REGION_META_PREFIX_KEY, sizeof(REGION_META_PREFIX_KEY))) {
		printf("www\n");
		abort();
	}
	uint64_t region_id = *((uint64_t*)(key.data() + sizeof(REGION_META_PREFIX_KEY)));
	char type = key[key.size() - 1];
	return std::make_tuple(region_id, type);
}

std::string region_meta_prefix(uint64_t region_id){
	std::string key;
	key.reserve(sizeof(REGION_META_PREFIX_KEY) + sizeof(uint64_t));
	key.append(REGION_META_PREFIX_KEY, sizeof(REGION_META_PREFIX_KEY));
	key.append((char*)&region_id, sizeof(uint64_t));
	return key;
}

std::string region_state_key(uint64_t region_id) {
	return make_region_meta_key(region_id, REGION_STATE_SUFFIX);
}
